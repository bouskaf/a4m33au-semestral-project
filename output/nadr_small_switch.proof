============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 16140 was started by mac on Filip-MacBook-Pro.local,
Sat Jul  8 18:29:46 2017
The command was "./prover9".
============================== end of head ===========================

============================== INPUT =================================
set(prolog_style_variables).

formulas(assumptions).
(all X all Y (less(X,Y) & less(Y,X) -> X = Y)) # label(antisymmetry) # label(axiom).
(all X all Y all Z (less(X,Y) & less(Y,Z) -> less(X,Z))) # label(transitivity) # label(axiom).
(all X all Y (less(X,Y) | less(Y,X))) # label(totality) # label(axiom).
(all X (less(X,succ(X)) & (all Y (less(Y,X) | less(succ(X),Y))))) # label(succ) # label(axiom).
(all X (pred(succ(X)) = X & succ(pred(X)) = X)) # label(pred) # label(axiom).
(all T all Train all N1 all N2 (at(T,Train,N1) & at(T,Train,N2) -> N1 = N2)) # label(at_uniq) # label(axiom).
(all T all Train all N all OtherN (at(T,Train,N) -> -enter(T,Train,OtherN))) # label(at_nondup) # label(axiom).
(all T all Train all OtherTrain all N (at(T,Train,N) -> -enter(T,OtherTrain,N))) # label(input_nocol) # label(axiom).
(all T all Train all OtherTrain all N (enter(T,Train,N) & enter(T,OtherTrain,N) -> Train = OtherTrain)) # label(enter_uniq) # label(axiom).
(all T all N (empty(T,N) <-> (all Train -at(T,Train,N)))) # label(node_empty) # label(axiom).
(all T all N (safe(T,N) <-> (all Train all OtherTrain (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)))) # label(node_safe) # label(axiom).
(all N (notBlocked(N) <-> (all T1 all Train (at(T1,Train,N) & -open(T1,N) -> (exists T2 (less(T1,T2) & open(T2,N))))))) # label(not_blocked) # label(axiom).
(all T1 all Train all N (at(T1,Train,N) -> (exists T2 (move(T2,Train) & less(T1,T2))))) # label(train_will_move) # label(axiom).
(all T1 all Train all N1 (at(T1,Train,N1) -> (exists T2 exists N2 (enter(T2,Train,N2) & less(T2,T1))))) # label(train_entered) # label(axiom).
(all T all Train all OtherTrain all N (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)) # label(occupied_only_once) # label(axiom).
(all T all N1 all N2 (switch(succ(T),N1) = N2 & -empty(T,N1) -> switch(T,N1) = N2)) # label(switch_restr) # label(axiom).
(all T all Train move(T,Train)) # label(train_moves) # label(axiom).
(exists Train exists N1 all T1 all T2 all N2 enter(succ(T2),Train,N1)) -> -at(T1,Train,N2) & -at(T2,Train,N2) & -enter(T2,Train,N2) & empty(T2,N1) & input(N1) & less(T1,T2) # label(train_enters) # label(axiom).
(all T all Train all N (at(T,Train,N) -> N = out2 | N = s | N = in | N = out1)) # label(at_restr) # label(axiom).
(all T all N (open(T,N) -> input(N))) # label(open_restr) # label(axiom).
(all N (input(N) -> N = in)) # label(input) # label(axiom).
(all Train (gate(Train) = out2 | gate(Train) = out1)) # label(gate_restr) # label(axiom).
out2 != s & out2 != in & out2 != out1 & s != in & s != out1 & in != out1 # label(distinct_nodes) # label(axiom).
(all T all Train all N (enter(T,Train,N) -> N = in)) # label(enter_values) # label(axiom).
(all T (switch(T,s) = out1 | switch(T,s) = out2)) # label(switch_s_values) # label(axiom).
(all T switch(T,in) = s) # label(switch_in_values) # label(axiom).
(all T all Train (at(T,Train,in) & gate(Train) = out2 -> switch(T,in) = s)) # label(switch_in_with_gate_out2) # label(axiom).
(all T all Train (at(T,Train,s) & gate(Train) = out2 -> switch(T,s) = out2)) # label(switch_s_with_gate_out2) # label(axiom).
(all T all Train (at(T,Train,in) & gate(Train) = out1 -> switch(T,in) = s)) # label(switch_in_with_gate_out1) # label(axiom).
(all T all Train (at(T,Train,s) & gate(Train) = out1 -> switch(T,s) = out1)) # label(switch_s_with_gate_out1) # label(axiom).
(all T all Train (enter(T,Train,in) | at(T,Train,in) & -open(T,in))) -> at(succ(T),Train,in) # label(enter_or_wait_at_in) # label(axiom).
(all T all Train ((at(T,Train,in) & open(T,in) & move(T,Train) -> at(succ(T),Train,s)) | (at(T,Train,in) & open(T,in) & -move(T,Train) -> at(succ(T),Train,in)))) # label(move_or_stay_from_in_to_s) # label(axiom).
(all T all Train ((at(T,Train,out2) & -move(T,Train) -> at(succ(T),Train,out2)) | (at(T,Train,out2) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out2) # label(axiom).
(all T all Train ((at(T,Train,out1) & -move(T,Train) -> at(succ(T),Train,out1)) | (at(T,Train,out1) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out1) # label(axiom).
(all T all Train ((at(T,Train,s) & switch(T,s) = out1 & -move(T,Train) -> at(succ(T),Train,s)) | (at(T,Train,s) & switch(T,s) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s_to_out1) # label(axiom).
(all T all Train ((at(T,Train,s) & switch(T,s) = out2 & -move(T,Train) -> at(succ(T),Train,s)) | (at(T,Train,s) & switch(T,s) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s_to_out2) # label(axiom).
(all T all Train all N1 all N2 (path_free(T,Train,N1,N2) -> N1 = in & N2 = out2 | N1 = in & N2 = out1)) # label(path_from_to_values) # label(axiom).
(all T (open(T,in) <-> (exists Train path_free(T,Train,in,gate(Train))))) # label(open_in) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in,out2) <-> at(T,Train,in) & gate(Train) = out2 & (-at(T,OtherTrain,in) | Train = OtherTrain) & (-at(T,OtherTrain,s) | Train = OtherTrain) & (-at(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in_to_out2) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in,out1) <-> at(T,Train,in) & gate(Train) = out1 & (-at(T,OtherTrain,in) | Train = OtherTrain) & (-at(T,OtherTrain,s) | Train = OtherTrain) & (-at(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in_to_out1) # label(axiom).
end_of_list.

formulas(goals).
(all T all Train all N1 all N2 (at(T,Train,N1) & switch(T,N1) = N2 -> -(at(succ(T),Train,N1) & switch(succ(T),N1) != N2))) # label(switch_critical) # label(conjecture).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all X all Y (less(X,Y) & less(Y,X) -> X = Y)) # label(antisymmetry) # label(axiom) # label(non_clause).  [assumption].
2 (all X all Y all Z (less(X,Y) & less(Y,Z) -> less(X,Z))) # label(transitivity) # label(axiom) # label(non_clause).  [assumption].
3 (all X all Y (less(X,Y) | less(Y,X))) # label(totality) # label(axiom) # label(non_clause).  [assumption].
4 (all X (less(X,succ(X)) & (all Y (less(Y,X) | less(succ(X),Y))))) # label(succ) # label(axiom) # label(non_clause).  [assumption].
5 (all X (pred(succ(X)) = X & succ(pred(X)) = X)) # label(pred) # label(axiom) # label(non_clause).  [assumption].
6 (all T all Train all N1 all N2 (at(T,Train,N1) & at(T,Train,N2) -> N1 = N2)) # label(at_uniq) # label(axiom) # label(non_clause).  [assumption].
7 (all T all Train all N all OtherN (at(T,Train,N) -> -enter(T,Train,OtherN))) # label(at_nondup) # label(axiom) # label(non_clause).  [assumption].
8 (all T all Train all OtherTrain all N (at(T,Train,N) -> -enter(T,OtherTrain,N))) # label(input_nocol) # label(axiom) # label(non_clause).  [assumption].
9 (all T all Train all OtherTrain all N (enter(T,Train,N) & enter(T,OtherTrain,N) -> Train = OtherTrain)) # label(enter_uniq) # label(axiom) # label(non_clause).  [assumption].
10 (all T all N (empty(T,N) <-> (all Train -at(T,Train,N)))) # label(node_empty) # label(axiom) # label(non_clause).  [assumption].
11 (all T all N (safe(T,N) <-> (all Train all OtherTrain (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)))) # label(node_safe) # label(axiom) # label(non_clause).  [assumption].
12 (all N (notBlocked(N) <-> (all T1 all Train (at(T1,Train,N) & -open(T1,N) -> (exists T2 (less(T1,T2) & open(T2,N))))))) # label(not_blocked) # label(axiom) # label(non_clause).  [assumption].
13 (all T1 all Train all N (at(T1,Train,N) -> (exists T2 (move(T2,Train) & less(T1,T2))))) # label(train_will_move) # label(axiom) # label(non_clause).  [assumption].
14 (all T1 all Train all N1 (at(T1,Train,N1) -> (exists T2 exists N2 (enter(T2,Train,N2) & less(T2,T1))))) # label(train_entered) # label(axiom) # label(non_clause).  [assumption].
15 (all T all Train all OtherTrain all N (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)) # label(occupied_only_once) # label(axiom) # label(non_clause).  [assumption].
16 (all T all N1 all N2 (switch(succ(T),N1) = N2 & -empty(T,N1) -> switch(T,N1) = N2)) # label(switch_restr) # label(axiom) # label(non_clause).  [assumption].
17 (all T all Train move(T,Train)) # label(train_moves) # label(axiom) # label(non_clause).  [assumption].
18 (exists Train exists N1 all T1 all T2 all N2 enter(succ(T2),Train,N1)) -> -at(T1,Train,N2) & -at(T2,Train,N2) & -enter(T2,Train,N2) & empty(T2,N1) & input(N1) & less(T1,T2) # label(train_enters) # label(axiom) # label(non_clause).  [assumption].
19 (all T all Train all N (at(T,Train,N) -> N = out2 | N = s | N = in | N = out1)) # label(at_restr) # label(axiom) # label(non_clause).  [assumption].
20 (all T all N (open(T,N) -> input(N))) # label(open_restr) # label(axiom) # label(non_clause).  [assumption].
21 (all N (input(N) -> N = in)) # label(input) # label(axiom) # label(non_clause).  [assumption].
22 (all Train (gate(Train) = out2 | gate(Train) = out1)) # label(gate_restr) # label(axiom) # label(non_clause).  [assumption].
23 out2 != s & out2 != in & out2 != out1 & s != in & s != out1 & in != out1 # label(distinct_nodes) # label(axiom) # label(non_clause).  [assumption].
24 (all T all Train all N (enter(T,Train,N) -> N = in)) # label(enter_values) # label(axiom) # label(non_clause).  [assumption].
25 (all T (switch(T,s) = out1 | switch(T,s) = out2)) # label(switch_s_values) # label(axiom) # label(non_clause).  [assumption].
26 (all T switch(T,in) = s) # label(switch_in_values) # label(axiom) # label(non_clause).  [assumption].
27 (all T all Train (at(T,Train,in) & gate(Train) = out2 -> switch(T,in) = s)) # label(switch_in_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
28 (all T all Train (at(T,Train,s) & gate(Train) = out2 -> switch(T,s) = out2)) # label(switch_s_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
29 (all T all Train (at(T,Train,in) & gate(Train) = out1 -> switch(T,in) = s)) # label(switch_in_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
30 (all T all Train (at(T,Train,s) & gate(Train) = out1 -> switch(T,s) = out1)) # label(switch_s_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
31 (all T all Train (enter(T,Train,in) | at(T,Train,in) & -open(T,in))) -> at(succ(T),Train,in) # label(enter_or_wait_at_in) # label(axiom) # label(non_clause).  [assumption].
32 (all T all Train ((at(T,Train,in) & open(T,in) & move(T,Train) -> at(succ(T),Train,s)) | (at(T,Train,in) & open(T,in) & -move(T,Train) -> at(succ(T),Train,in)))) # label(move_or_stay_from_in_to_s) # label(axiom) # label(non_clause).  [assumption].
33 (all T all Train ((at(T,Train,out2) & -move(T,Train) -> at(succ(T),Train,out2)) | (at(T,Train,out2) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out2) # label(axiom) # label(non_clause).  [assumption].
34 (all T all Train ((at(T,Train,out1) & -move(T,Train) -> at(succ(T),Train,out1)) | (at(T,Train,out1) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out1) # label(axiom) # label(non_clause).  [assumption].
35 (all T all Train ((at(T,Train,s) & switch(T,s) = out1 & -move(T,Train) -> at(succ(T),Train,s)) | (at(T,Train,s) & switch(T,s) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s_to_out1) # label(axiom) # label(non_clause).  [assumption].
36 (all T all Train ((at(T,Train,s) & switch(T,s) = out2 & -move(T,Train) -> at(succ(T),Train,s)) | (at(T,Train,s) & switch(T,s) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s_to_out2) # label(axiom) # label(non_clause).  [assumption].
37 (all T all Train all N1 all N2 (path_free(T,Train,N1,N2) -> N1 = in & N2 = out2 | N1 = in & N2 = out1)) # label(path_from_to_values) # label(axiom) # label(non_clause).  [assumption].
38 (all T (open(T,in) <-> (exists Train path_free(T,Train,in,gate(Train))))) # label(open_in) # label(axiom) # label(non_clause).  [assumption].
39 (all T all Train all OtherTrain (path_free(T,Train,in,out2) <-> at(T,Train,in) & gate(Train) = out2 & (-at(T,OtherTrain,in) | Train = OtherTrain) & (-at(T,OtherTrain,s) | Train = OtherTrain) & (-at(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in_to_out2) # label(axiom) # label(non_clause).  [assumption].
40 (all T all Train all OtherTrain (path_free(T,Train,in,out1) <-> at(T,Train,in) & gate(Train) = out1 & (-at(T,OtherTrain,in) | Train = OtherTrain) & (-at(T,OtherTrain,s) | Train = OtherTrain) & (-at(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in_to_out1) # label(axiom) # label(non_clause).  [assumption].
41 (all T all Train all N1 all N2 (at(T,Train,N1) & switch(T,N1) = N2 -> -(at(succ(T),Train,N1) & switch(succ(T),N1) != N2))) # label(switch_critical) # label(conjecture) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
-less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].
-less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].
less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].
less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].
less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].
pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
-at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].
-at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].
-at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].
-enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].
-empty(A,B) | -at(A,C,B) # label(node_empty) # label(axiom).  [clausify(10)].
empty(A,B) | at(A,f1(A,B),B) # label(node_empty) # label(axiom).  [clausify(10)].
-safe(A,B) | -at(A,C,B) | -at(A,D,B) | D = C # label(node_safe) # label(axiom).  [clausify(11)].
safe(A,B) | at(A,f2(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
safe(A,B) | at(A,f3(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
safe(A,B) | f3(A,B) != f2(A,B) # label(node_safe) # label(axiom).  [clausify(11)].
-notBlocked(A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)) # label(not_blocked) # label(axiom).  [clausify(12)].
-notBlocked(A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A) # label(not_blocked) # label(axiom).  [clausify(12)].
notBlocked(A) | at(f5(A),f6(A),A) # label(not_blocked) # label(axiom).  [clausify(12)].
notBlocked(A) | -open(f5(A),A) # label(not_blocked) # label(axiom).  [clausify(12)].
notBlocked(A) | -less(f5(A),B) | -open(B,A) # label(not_blocked) # label(axiom).  [clausify(12)].
-at(A,B,C) | move(f7(A,B,C),B) # label(train_will_move) # label(axiom).  [clausify(13)].
-at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(13)].
-at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(14)].
-at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(14)].
-at(A,B,C) | -at(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(15)].
switch(succ(A),B) != C | empty(A,B) | switch(A,B) = C # label(switch_restr) # label(axiom).  [clausify(16)].
move(A,B) # label(train_moves) # label(axiom).  [clausify(17)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(A,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -enter(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | empty(D,E) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | input(E) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | less(A,D) # label(train_enters) # label(axiom).  [clausify(18)].
-at(A,B,C) | out2 = C | s = C | in = C | out1 = C # label(at_restr) # label(axiom).  [clausify(19)].
-open(A,B) | input(B) # label(open_restr) # label(axiom).  [clausify(20)].
-input(A) | in = A # label(input) # label(axiom).  [clausify(21)].
gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(22)].
s != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
in != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
out1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
in != s # label(distinct_nodes) # label(axiom).  [clausify(23)].
out1 != s # label(distinct_nodes) # label(axiom).  [clausify(23)].
out1 != in # label(distinct_nodes) # label(axiom).  [clausify(23)].
-enter(A,B,C) | in = C # label(enter_values) # label(axiom).  [clausify(24)].
switch(A,s) = out1 | switch(A,s) = out2 # label(switch_s_values) # label(axiom).  [clausify(25)].
switch(A,in) = s # label(switch_in_values) # label(axiom).  [clausify(26)].
-at(A,B,in) | gate(B) != out2 | switch(A,in) = s # label(switch_in_with_gate_out2) # label(axiom).  [clausify(27)].
-at(A,B,s) | gate(B) != out2 | switch(A,s) = out2 # label(switch_s_with_gate_out2) # label(axiom).  [clausify(28)].
-at(A,B,in) | gate(B) != out1 | switch(A,in) = s # label(switch_in_with_gate_out1) # label(axiom).  [clausify(29)].
-at(A,B,s) | gate(B) != out1 | switch(A,s) = out1 # label(switch_s_with_gate_out1) # label(axiom).  [clausify(30)].
-enter(f13(A,B),f14(A,B),in) | at(succ(A),B,in) # label(enter_or_wait_at_in) # label(axiom).  [clausify(31)].
-at(f13(A,B),f14(A,B),in) | open(f13(A,B),in) | at(succ(A),B,in) # label(enter_or_wait_at_in) # label(axiom).  [clausify(31)].
-path_free(A,B,C,D) | in = C # label(path_from_to_values) # label(axiom).  [clausify(37)].
-path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(37)].
-open(A,in) | path_free(A,f15(A),in,gate(f15(A))) # label(open_in) # label(axiom).  [clausify(38)].
open(A,in) | -path_free(A,B,in,gate(B)) # label(open_in) # label(axiom).  [clausify(38)].
-path_free(A,B,in,out2) | at(A,B,in) # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
-path_free(A,B,in,out2) | gate(B) = out2 # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
-path_free(A,B,in,out2) | -at(A,C,in) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
-path_free(A,B,in,out2) | -at(A,C,s) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
-path_free(A,B,in,out2) | -at(A,C,out2) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
path_free(A,B,in,out2) | -at(A,B,in) | gate(B) != out2 | at(A,C,in) | at(A,C,s) | at(A,C,out2) # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
path_free(A,B,in,out2) | -at(A,B,in) | gate(B) != out2 | C != B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
-path_free(A,B,in,out1) | at(A,B,in) # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
-path_free(A,B,in,out1) | gate(B) = out1 # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
-path_free(A,B,in,out1) | -at(A,C,in) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
-path_free(A,B,in,out1) | -at(A,C,s) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
-path_free(A,B,in,out1) | -at(A,C,out1) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
path_free(A,B,in,out1) | -at(A,B,in) | gate(B) != out1 | at(A,C,in) | at(A,C,s) | at(A,C,out1) # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
path_free(A,B,in,out1) | -at(A,B,in) | gate(B) != out1 | C != B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
at(c1,c2,c3) # label(switch_critical) # label(conjecture).  [deny(41)].
switch(c1,c3) = c4 # label(switch_critical) # label(conjecture).  [deny(41)].
at(succ(c1),c2,c3) # label(switch_critical) # label(conjecture).  [deny(41)].
switch(succ(c1),c3) != c4 # label(switch_critical) # label(conjecture).  [deny(41)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating empty/2
42 empty(A,B) | at(A,f1(A,B),B) # label(node_empty) # label(axiom).  [clausify(10)].
43 -empty(A,B) | -at(A,C,B) # label(node_empty) # label(axiom).  [clausify(10)].
Derived: at(A,f1(A,B),B) | -at(A,C,B).  [resolve(42,a,43,a)].
44 switch(succ(A),B) != C | empty(A,B) | switch(A,B) = C # label(switch_restr) # label(axiom).  [clausify(16)].
Derived: switch(succ(A),B) != C | switch(A,B) = C | -at(A,D,B).  [resolve(44,b,43,a)].
45 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | empty(D,E) # label(train_enters) # label(axiom).  [clausify(18)].
Derived: -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,V7,E).  [resolve(45,b,43,a)].

Eliminating safe/2
46 safe(A,B) | at(A,f2(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
47 -safe(A,B) | -at(A,C,B) | -at(A,D,B) | D = C # label(node_safe) # label(axiom).  [clausify(11)].
48 safe(A,B) | at(A,f3(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
49 safe(A,B) | f3(A,B) != f2(A,B) # label(node_safe) # label(axiom).  [clausify(11)].

Eliminating notBlocked/1
50 notBlocked(A) | at(f5(A),f6(A),A) # label(not_blocked) # label(axiom).  [clausify(12)].
51 -notBlocked(A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)) # label(not_blocked) # label(axiom).  [clausify(12)].
52 -notBlocked(A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A) # label(not_blocked) # label(axiom).  [clausify(12)].
Derived: at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(50,a,51,a)].
Derived: at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(50,a,52,a)].
53 notBlocked(A) | -open(f5(A),A) # label(not_blocked) # label(axiom).  [clausify(12)].
Derived: -open(f5(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(53,a,51,a)].
Derived: -open(f5(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(53,a,52,a)].
54 notBlocked(A) | -less(f5(A),B) | -open(B,A) # label(not_blocked) # label(axiom).  [clausify(12)].
Derived: -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | less(C,f4(A,C,D)).  [resolve(54,a,51,a)].
Derived: -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | open(f4(A,C,D),A).  [resolve(54,a,52,a)].

Eliminating move/2

Eliminating input/1
55 -input(A) | in = A # label(input) # label(axiom).  [clausify(21)].
56 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | input(E) # label(train_enters) # label(axiom).  [clausify(18)].
57 -open(A,B) | input(B) # label(open_restr) # label(axiom).  [clausify(20)].
Derived: in = A | -enter(succ(f11(B,C,D,E,A,F,V6)),F,V6).  [resolve(55,a,56,b)].
Derived: in = A | -open(B,A).  [resolve(55,a,57,b)].

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, less, open, at, enter, path_free ]).
Function symbol precedence:  function_order([ in, out1, out2, s, c1, c2, c3, c4, switch, f1, f13, f14, gate, succ, pred, f5, f6, f15, f4, f7, f8, f9, f11 ]).
After inverse_order:  (no changes).
Unfolding symbols: c4/0.

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      58 -less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].
kept:      59 -less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].
kept:      60 less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].
kept:      61 less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].
kept:      62 less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].
kept:      63 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
kept:      64 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
kept:      65 -at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].
kept:      66 -at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].
kept:      67 -at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].
kept:      68 -enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].
kept:      69 -at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(13)].
kept:      70 -at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(14)].
kept:      71 -at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(14)].
kept:      72 -at(A,B,C) | -at(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(15)].
kept:      73 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(A,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
kept:      74 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
kept:      75 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -enter(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
kept:      76 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | less(A,D) # label(train_enters) # label(axiom).  [clausify(18)].
kept:      77 -at(A,B,C) | out2 = C | s = C | in = C | out1 = C # label(at_restr) # label(axiom).  [clausify(19)].
kept:      78 gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(22)].
kept:      79 s != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
           80 in != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      81 out2 != in.  [copy(80),flip(a)].
           82 out1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      83 out2 != out1.  [copy(82),flip(a)].
           84 in != s # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      85 s != in.  [copy(84),flip(a)].
           86 out1 != s # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      87 s != out1.  [copy(86),flip(a)].
kept:      88 out1 != in # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      89 -enter(A,B,C) | in = C # label(enter_values) # label(axiom).  [clausify(24)].
kept:      90 switch(A,s) = out1 | switch(A,s) = out2 # label(switch_s_values) # label(axiom).  [clausify(25)].
kept:      91 switch(A,in) = s # label(switch_in_values) # label(axiom).  [clausify(26)].
           92 -at(A,B,in) | gate(B) != out2 | switch(A,in) = s # label(switch_in_with_gate_out2) # label(axiom).  [clausify(27)].
kept:      93 -at(A,B,s) | gate(B) != out2 | switch(A,s) = out2 # label(switch_s_with_gate_out2) # label(axiom).  [clausify(28)].
           94 -at(A,B,in) | gate(B) != out1 | switch(A,in) = s # label(switch_in_with_gate_out1) # label(axiom).  [clausify(29)].
kept:      95 -at(A,B,s) | gate(B) != out1 | switch(A,s) = out1 # label(switch_s_with_gate_out1) # label(axiom).  [clausify(30)].
kept:      96 -enter(f13(A,B),f14(A,B),in) | at(succ(A),B,in) # label(enter_or_wait_at_in) # label(axiom).  [clausify(31)].
kept:      97 -at(f13(A,B),f14(A,B),in) | open(f13(A,B),in) | at(succ(A),B,in) # label(enter_or_wait_at_in) # label(axiom).  [clausify(31)].
kept:      98 -path_free(A,B,C,D) | in = C # label(path_from_to_values) # label(axiom).  [clausify(37)].
kept:      99 -path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(37)].
kept:      100 -open(A,in) | path_free(A,f15(A),in,gate(f15(A))) # label(open_in) # label(axiom).  [clausify(38)].
kept:      101 open(A,in) | -path_free(A,B,in,gate(B)) # label(open_in) # label(axiom).  [clausify(38)].
kept:      102 -path_free(A,B,in,out2) | at(A,B,in) # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
kept:      103 -path_free(A,B,in,out2) | gate(B) = out2 # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
kept:      104 -path_free(A,B,in,out2) | -at(A,C,in) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
kept:      105 -path_free(A,B,in,out2) | -at(A,C,s) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
kept:      106 -path_free(A,B,in,out2) | -at(A,C,out2) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
kept:      107 path_free(A,B,in,out2) | -at(A,B,in) | gate(B) != out2 | at(A,C,in) | at(A,C,s) | at(A,C,out2) # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
           108 path_free(A,B,in,out2) | -at(A,B,in) | gate(B) != out2 | C != B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
kept:      109 path_free(A,B,in,out2) | -at(A,B,in) | gate(B) != out2.  [copy(108),xx(d)].
kept:      110 -path_free(A,B,in,out1) | at(A,B,in) # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
kept:      111 -path_free(A,B,in,out1) | gate(B) = out1 # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
kept:      112 -path_free(A,B,in,out1) | -at(A,C,in) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
kept:      113 -path_free(A,B,in,out1) | -at(A,C,s) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
kept:      114 -path_free(A,B,in,out1) | -at(A,C,out1) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
kept:      115 path_free(A,B,in,out1) | -at(A,B,in) | gate(B) != out1 | at(A,C,in) | at(A,C,s) | at(A,C,out1) # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
           116 path_free(A,B,in,out1) | -at(A,B,in) | gate(B) != out1 | C != B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
kept:      117 path_free(A,B,in,out1) | -at(A,B,in) | gate(B) != out1.  [copy(116),xx(d)].
kept:      118 at(c1,c2,c3) # label(switch_critical) # label(conjecture).  [deny(41)].
           119 switch(c1,c3) = c4 # label(switch_critical) # label(conjecture).  [deny(41)].
kept:      120 c4 = switch(c1,c3).  [copy(119),flip(a)].
kept:      121 at(succ(c1),c2,c3) # label(switch_critical) # label(conjecture).  [deny(41)].
           122 switch(succ(c1),c3) != c4 # label(switch_critical) # label(conjecture).  [deny(41)].
kept:      123 switch(succ(c1),c3) != switch(c1,c3).  [copy(122),rewrite([120(5)])].
kept:      124 at(A,f1(A,B),B) | -at(A,C,B).  [resolve(42,a,43,a)].
kept:      125 switch(succ(A),B) != C | switch(A,B) = C | -at(A,D,B).  [resolve(44,b,43,a)].
kept:      126 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,V7,E).  [resolve(45,b,43,a)].
kept:      127 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(50,a,51,a)].
kept:      128 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(50,a,52,a)].
kept:      129 -open(f5(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(53,a,51,a)].
kept:      130 -open(f5(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(53,a,52,a)].
kept:      131 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | less(C,f4(A,C,D)).  [resolve(54,a,51,a)].
kept:      132 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | open(f4(A,C,D),A).  [resolve(54,a,52,a)].
kept:      133 in = A | -enter(succ(f11(B,C,D,E,A,F,V6)),F,V6).  [resolve(55,a,56,b)].
kept:      134 in = A | -open(B,A).  [resolve(55,a,57,b)].
kept:      135 less(A,A).  [factor(60,a,b)].

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

% Clauses after input processing:

formulas(usable).
end_of_list.

formulas(sos).
58 -less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].
59 -less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].
60 less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].
61 less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].
62 less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].
63 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
64 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
65 -at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].
66 -at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].
67 -at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].
68 -enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].
69 -at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(13)].
70 -at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(14)].
71 -at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(14)].
72 -at(A,B,C) | -at(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(15)].
73 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(A,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
74 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
75 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -enter(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
76 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | less(A,D) # label(train_enters) # label(axiom).  [clausify(18)].
77 -at(A,B,C) | out2 = C | s = C | in = C | out1 = C # label(at_restr) # label(axiom).  [clausify(19)].
78 gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(22)].
79 s != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
81 out2 != in.  [copy(80),flip(a)].
83 out2 != out1.  [copy(82),flip(a)].
85 s != in.  [copy(84),flip(a)].
87 s != out1.  [copy(86),flip(a)].
88 out1 != in # label(distinct_nodes) # label(axiom).  [clausify(23)].
89 -enter(A,B,C) | in = C # label(enter_values) # label(axiom).  [clausify(24)].
90 switch(A,s) = out1 | switch(A,s) = out2 # label(switch_s_values) # label(axiom).  [clausify(25)].
91 switch(A,in) = s # label(switch_in_values) # label(axiom).  [clausify(26)].
93 -at(A,B,s) | gate(B) != out2 | switch(A,s) = out2 # label(switch_s_with_gate_out2) # label(axiom).  [clausify(28)].
95 -at(A,B,s) | gate(B) != out1 | switch(A,s) = out1 # label(switch_s_with_gate_out1) # label(axiom).  [clausify(30)].
96 -enter(f13(A,B),f14(A,B),in) | at(succ(A),B,in) # label(enter_or_wait_at_in) # label(axiom).  [clausify(31)].
97 -at(f13(A,B),f14(A,B),in) | open(f13(A,B),in) | at(succ(A),B,in) # label(enter_or_wait_at_in) # label(axiom).  [clausify(31)].
98 -path_free(A,B,C,D) | in = C # label(path_from_to_values) # label(axiom).  [clausify(37)].
99 -path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(37)].
100 -open(A,in) | path_free(A,f15(A),in,gate(f15(A))) # label(open_in) # label(axiom).  [clausify(38)].
101 open(A,in) | -path_free(A,B,in,gate(B)) # label(open_in) # label(axiom).  [clausify(38)].
102 -path_free(A,B,in,out2) | at(A,B,in) # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
103 -path_free(A,B,in,out2) | gate(B) = out2 # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
104 -path_free(A,B,in,out2) | -at(A,C,in) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
105 -path_free(A,B,in,out2) | -at(A,C,s) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
106 -path_free(A,B,in,out2) | -at(A,C,out2) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
109 path_free(A,B,in,out2) | -at(A,B,in) | gate(B) != out2.  [copy(108),xx(d)].
110 -path_free(A,B,in,out1) | at(A,B,in) # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
111 -path_free(A,B,in,out1) | gate(B) = out1 # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
112 -path_free(A,B,in,out1) | -at(A,C,in) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
113 -path_free(A,B,in,out1) | -at(A,C,s) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
114 -path_free(A,B,in,out1) | -at(A,C,out1) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
117 path_free(A,B,in,out1) | -at(A,B,in) | gate(B) != out1.  [copy(116),xx(d)].
118 at(c1,c2,c3) # label(switch_critical) # label(conjecture).  [deny(41)].
120 c4 = switch(c1,c3).  [copy(119),flip(a)].
121 at(succ(c1),c2,c3) # label(switch_critical) # label(conjecture).  [deny(41)].
123 switch(succ(c1),c3) != switch(c1,c3).  [copy(122),rewrite([120(5)])].
124 at(A,f1(A,B),B) | -at(A,C,B).  [resolve(42,a,43,a)].
125 switch(succ(A),B) != C | switch(A,B) = C | -at(A,D,B).  [resolve(44,b,43,a)].
126 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,V7,E).  [resolve(45,b,43,a)].
127 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(50,a,51,a)].
128 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(50,a,52,a)].
129 -open(f5(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(53,a,51,a)].
130 -open(f5(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(53,a,52,a)].
131 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | less(C,f4(A,C,D)).  [resolve(54,a,51,a)].
132 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | open(f4(A,C,D),A).  [resolve(54,a,52,a)].
133 in = A | -enter(succ(f11(B,C,D,E,A,F,V6)),F,V6).  [resolve(55,a,56,b)].
134 in = A | -open(B,A).  [resolve(55,a,57,b)].
135 less(A,A).  [factor(60,a,b)].
end_of_list.

formulas(demodulators).
63 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
64 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
91 switch(A,in) = s # label(switch_in_values) # label(axiom).  [clausify(26)].
120 c4 = switch(c1,c3).  [copy(119),flip(a)].
end_of_list.

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.01 seconds.

given #1 (I,wt=9): 58 -less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].

given #2 (I,wt=9): 59 -less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].

given #3 (I,wt=6): 60 less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].

given #4 (I,wt=4): 61 less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].

given #5 (I,wt=7): 62 less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].

given #6 (I,wt=5): 63 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].

given #7 (I,wt=5): 64 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].

given #8 (I,wt=11): 65 -at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].

given #9 (I,wt=8): 66 -at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].

given #10 (I,wt=8): 67 -at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].

given #11 (I,wt=11): 68 -enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].

given #12 (I,wt=10): 69 -at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(13)].

given #13 (I,wt=14): 70 -at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(14)].

given #14 (I,wt=10): 71 -at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(14)].

given #15 (I,wt=11): 72 -at(A,B,C) | -at(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(15)].

given #16 (I,wt=16): 73 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(A,B,C) # label(train_enters) # label(axiom).  [clausify(18)].

given #17 (I,wt=16): 74 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].

given #18 (I,wt=16): 75 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -enter(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].

given #19 (I,wt=15): 76 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | less(A,D) # label(train_enters) # label(axiom).  [clausify(18)].

given #20 (I,wt=16): 77 -at(A,B,C) | out2 = C | s = C | in = C | out1 = C # label(at_restr) # label(axiom).  [clausify(19)].

given #21 (I,wt=8): 78 gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(22)].

given #22 (I,wt=3): 79 s != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #23 (I,wt=3): 81 out2 != in.  [copy(80),flip(a)].

given #24 (I,wt=3): 83 out2 != out1.  [copy(82),flip(a)].

given #25 (I,wt=3): 85 s != in.  [copy(84),flip(a)].

given #26 (I,wt=3): 87 s != out1.  [copy(86),flip(a)].

given #27 (I,wt=3): 88 out1 != in # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #28 (I,wt=7): 89 -enter(A,B,C) | in = C # label(enter_values) # label(axiom).  [clausify(24)].

given #29 (I,wt=10): 90 switch(A,s) = out1 | switch(A,s) = out2 # label(switch_s_values) # label(axiom).  [clausify(25)].

given #30 (I,wt=5): 91 switch(A,in) = s # label(switch_in_values) # label(axiom).  [clausify(26)].

given #31 (I,wt=13): 93 -at(A,B,s) | gate(B) != out2 | switch(A,s) = out2 # label(switch_s_with_gate_out2) # label(axiom).  [clausify(28)].

given #32 (I,wt=13): 95 -at(A,B,s) | gate(B) != out1 | switch(A,s) = out1 # label(switch_s_with_gate_out1) # label(axiom).  [clausify(30)].

given #33 (I,wt=13): 96 -enter(f13(A,B),f14(A,B),in) | at(succ(A),B,in) # label(enter_or_wait_at_in) # label(axiom).  [clausify(31)].

given #34 (I,wt=18): 97 -at(f13(A,B),f14(A,B),in) | open(f13(A,B),in) | at(succ(A),B,in) # label(enter_or_wait_at_in) # label(axiom).  [clausify(31)].

given #35 (I,wt=8): 98 -path_free(A,B,C,D) | in = C # label(path_from_to_values) # label(axiom).  [clausify(37)].

given #36 (I,wt=11): 99 -path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(37)].

given #37 (I,wt=11): 100 -open(A,in) | path_free(A,f15(A),in,gate(f15(A))) # label(open_in) # label(axiom).  [clausify(38)].

given #38 (I,wt=9): 101 open(A,in) | -path_free(A,B,in,gate(B)) # label(open_in) # label(axiom).  [clausify(38)].

given #39 (I,wt=9): 102 -path_free(A,B,in,out2) | at(A,B,in) # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].

given #40 (I,wt=9): 103 -path_free(A,B,in,out2) | gate(B) = out2 # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].

given #41 (I,wt=12): 104 -path_free(A,B,in,out2) | -at(A,C,in) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].

given #42 (I,wt=12): 105 -path_free(A,B,in,out2) | -at(A,C,s) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].

given #43 (I,wt=12): 106 -path_free(A,B,in,out2) | -at(A,C,out2) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].

given #44 (I,wt=13): 109 path_free(A,B,in,out2) | -at(A,B,in) | gate(B) != out2.  [copy(108),xx(d)].

given #45 (I,wt=9): 110 -path_free(A,B,in,out1) | at(A,B,in) # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].

given #46 (I,wt=9): 111 -path_free(A,B,in,out1) | gate(B) = out1 # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].

given #47 (I,wt=12): 112 -path_free(A,B,in,out1) | -at(A,C,in) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].

given #48 (I,wt=12): 113 -path_free(A,B,in,out1) | -at(A,C,s) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].

given #49 (I,wt=12): 114 -path_free(A,B,in,out1) | -at(A,C,out1) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].

given #50 (I,wt=13): 117 path_free(A,B,in,out1) | -at(A,B,in) | gate(B) != out1.  [copy(116),xx(d)].

given #51 (I,wt=4): 118 at(c1,c2,c3) # label(switch_critical) # label(conjecture).  [deny(41)].

given #52 (I,wt=5): 120 c4 = switch(c1,c3).  [copy(119),flip(a)].

given #53 (I,wt=5): 121 at(succ(c1),c2,c3) # label(switch_critical) # label(conjecture).  [deny(41)].

given #54 (I,wt=8): 123 switch(succ(c1),c3) != switch(c1,c3).  [copy(122),rewrite([120(5)])].

given #55 (I,wt=10): 124 at(A,f1(A,B),B) | -at(A,C,B).  [resolve(42,a,43,a)].

given #56 (I,wt=15): 125 switch(succ(A),B) != C | switch(A,B) = C | -at(A,D,B).  [resolve(44,b,43,a)].

============================== PROOF =================================

% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 12.
% Level of proof is 4.
% Maximum clause weight is 15.000.
% Given clauses 56.

10 (all T all N (empty(T,N) <-> (all Train -at(T,Train,N)))) # label(node_empty) # label(axiom) # label(non_clause).  [assumption].
16 (all T all N1 all N2 (switch(succ(T),N1) = N2 & -empty(T,N1) -> switch(T,N1) = N2)) # label(switch_restr) # label(axiom) # label(non_clause).  [assumption].
41 (all T all Train all N1 all N2 (at(T,Train,N1) & switch(T,N1) = N2 -> -(at(succ(T),Train,N1) & switch(succ(T),N1) != N2))) # label(switch_critical) # label(conjecture) # label(non_clause) # label(goal).  [goal].
43 -empty(A,B) | -at(A,C,B) # label(node_empty) # label(axiom).  [clausify(10)].
44 switch(succ(A),B) != C | empty(A,B) | switch(A,B) = C # label(switch_restr) # label(axiom).  [clausify(16)].
118 at(c1,c2,c3) # label(switch_critical) # label(conjecture).  [deny(41)].
119 switch(c1,c3) = c4 # label(switch_critical) # label(conjecture).  [deny(41)].
120 c4 = switch(c1,c3).  [copy(119),flip(a)].
122 switch(succ(c1),c3) != c4 # label(switch_critical) # label(conjecture).  [deny(41)].
123 switch(succ(c1),c3) != switch(c1,c3).  [copy(122),rewrite([120(5)])].
125 switch(succ(A),B) != C | switch(A,B) = C | -at(A,D,B).  [resolve(44,b,43,a)].
181 $F.  [ur(125,b,123,a(flip),c,118,a),xx(a)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=56. Generated=148. Kept=113. proofs=1.
Usable=56. Sos=52. Demods=4. Limbo=3, Disabled=89. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=34. Back_subsumed=2.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=4 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=1059. Demod_rewrites=3.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=66. Nonunit_bsub_feature_tests=140.
Megabytes=0.48.
User_CPU=0.01, System_CPU=0.00, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 16140 exit (max_proofs) Sat Jul  8 18:29:46 2017
