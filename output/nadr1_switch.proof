============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 16075 was started by mac on Filip-MacBook-Pro.local,
Sat Jul  8 18:25:34 2017
The command was "./prover9".
============================== end of head ===========================

============================== INPUT =================================
set(prolog_style_variables).

formulas(assumptions).
(all X all Y (less(X,Y) & less(Y,X) -> X = Y)) # label(antisymmetry) # label(axiom).
(all X all Y all Z (less(X,Y) & less(Y,Z) -> less(X,Z))) # label(transitivity) # label(axiom).
(all X all Y (less(X,Y) | less(Y,X))) # label(totality) # label(axiom).
(all X (less(X,succ(X)) & (all Y (less(Y,X) | less(succ(X),Y))))) # label(succ) # label(axiom).
(all X (pred(succ(X)) = X & succ(pred(X)) = X)) # label(pred) # label(axiom).
(all T all Train all N1 all N2 (at(T,Train,N1) & at(T,Train,N2) -> N1 = N2)) # label(at_uniq) # label(axiom).
(all T all Train all N all OtherN (at(T,Train,N) -> -enter(T,Train,OtherN))) # label(at_nondup) # label(axiom).
(all T all Train all OtherTrain all N (at(T,Train,N) -> -enter(T,OtherTrain,N))) # label(input_nocol) # label(axiom).
(all T all Train all OtherTrain all N (enter(T,Train,N) & enter(T,OtherTrain,N) -> Train = OtherTrain)) # label(enter_uniq) # label(axiom).
(all T all N (empty(T,N) <-> (all Train -at(T,Train,N)))) # label(node_empty) # label(axiom).
(all T all N (safe(T,N) <-> (all Train all OtherTrain (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)))) # label(node_safe) # label(axiom).
(all N (notBlocked(N) <-> (all T1 all Train (at(T1,Train,N) & -open(T1,N) -> (exists T2 (less(T1,T2) & open(T2,N))))))) # label(not_blocked) # label(axiom).
(all T1 all Train all N (at(T1,Train,N) -> (exists T2 (move(T2,Train) & less(T1,T2))))) # label(train_will_move) # label(axiom).
(all T1 all Train all N1 (at(T1,Train,N1) -> (exists T2 exists N2 (enter(T2,Train,N2) & less(T2,T1))))) # label(train_entered) # label(axiom).
(all T all Train all OtherTrain all N (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)) # label(occupied_only_once) # label(axiom).
(all T all N1 all N2 (switch(succ(T),N1) = N2 & -empty(T,N1) -> switch(T,N1) = N2)) # label(switch_restr) # label(axiom).
(all T all Train move(T,Train)) # label(train_moves) # label(axiom).
(exists Train exists N1 all T1 all T2 all N2 enter(succ(T2),Train,N1)) -> -at(T1,Train,N2) & -at(T2,Train,N2) & -enter(T2,Train,N2) & empty(T2,N1) & input(N1) & less(T1,T2) # label(train_enters) # label(axiom).
(all T all Train all N (at(T,Train,N) -> N = out2 | N = out1 | N = in2 | N = in1 | N = s1 | N = s2)) # label(at_restr) # label(axiom).
(all T all N (open(T,N) -> input(N))) # label(open_restr) # label(axiom).
(all N (input(N) -> N = in2 | N = in1)) # label(input) # label(axiom).
(all Train (gate(Train) = out2 | gate(Train) = out1)) # label(gate_restr) # label(axiom).
out2 != out1 & out2 != in2 & out2 != in1 & out2 != s1 & out2 != s2 & out1 != in2 & out1 != in1 & out1 != s1 & out1 != s2 & in2 != in1 & in2 != s1 & in2 != s2 & in1 != s1 & in1 != s2 & s1 != s2 # label(distinct_nodes) # label(axiom).
(all T all Train all N (enter(T,Train,N) -> N = in2 | N = in1)) # label(enter_values) # label(axiom).
(all T switch(T,in2) = s2) # label(switch_in2_values) # label(axiom).
(all T switch(T,in1) = s1) # label(switch_in1_values) # label(axiom).
(all T (switch(T,s1) = out1 | switch(T,s1) = out2)) # label(switch_s1_values) # label(axiom).
(all T (switch(T,s2) = out1 | switch(T,s2) = out2)) # label(switch_s2_values) # label(axiom).
(all T all Train (at(T,Train,in2) & gate(Train) = out2 -> switch(T,in2) = s2)) # label(switch_in2_with_gate_out2) # label(axiom).
(all T all Train (at(T,Train,s2) & gate(Train) = out2 -> switch(T,s2) = out2)) # label(switch_s2_with_gate_out2) # label(axiom).
(all T all Train (at(T,Train,in2) & gate(Train) = out1 -> switch(T,in2) = s2)) # label(switch_in2_with_gate_out1) # label(axiom).
(all T all Train (at(T,Train,s2) & gate(Train) = out1 -> switch(T,s2) = out1)) # label(switch_s2_with_gate_out1) # label(axiom).
(all T all Train (at(T,Train,in1) & gate(Train) = out2 -> switch(T,in1) = s1)) # label(switch_in1_with_gate_out2) # label(axiom).
(all T all Train (at(T,Train,s1) & gate(Train) = out2 -> switch(T,s1) = out2)) # label(switch_s1_with_gate_out2) # label(axiom).
(all T all Train (at(T,Train,in1) & gate(Train) = out1 -> switch(T,in1) = s1)) # label(switch_in1_with_gate_out1) # label(axiom).
(all T all Train (at(T,Train,s1) & gate(Train) = out1 -> switch(T,s1) = out1)) # label(switch_s1_with_gate_out1) # label(axiom).
(all T all Train (enter(T,Train,in2) | at(T,Train,in2) & -open(T,in2))) -> at(succ(T),Train,in2) # label(enter_or_wait_at_in2) # label(axiom).
(all T all Train ((at(T,Train,in2) & open(T,in2) & move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,in2) & open(T,in2) & -move(T,Train) -> at(succ(T),Train,in2)))) # label(move_or_stay_from_in2_to_s2) # label(axiom).
(all T all Train (enter(T,Train,in1) | at(T,Train,in1) & -open(T,in1))) -> at(succ(T),Train,in1) # label(enter_or_wait_at_in1) # label(axiom).
(all T all Train ((at(T,Train,in1) & open(T,in1) & move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,in1) & open(T,in1) & -move(T,Train) -> at(succ(T),Train,in1)))) # label(move_or_stay_from_in1_to_s1) # label(axiom).
(all T all Train ((at(T,Train,out2) & -move(T,Train) -> at(succ(T),Train,out2)) | (at(T,Train,out2) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out2) # label(axiom).
(all T all Train ((at(T,Train,out1) & -move(T,Train) -> at(succ(T),Train,out1)) | (at(T,Train,out1) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out1) # label(axiom).
(all T all Train ((at(T,Train,s1) & switch(T,s1) = out1 & -move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,s1) & switch(T,s1) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s1_to_out1) # label(axiom).
(all T all Train ((at(T,Train,s1) & switch(T,s1) = out2 & -move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,s1) & switch(T,s1) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s1_to_out2) # label(axiom).
(all T all Train ((at(T,Train,s2) & switch(T,s2) = out1 & -move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,s2) & switch(T,s2) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s2_to_out1) # label(axiom).
(all T all Train ((at(T,Train,s2) & switch(T,s2) = out2 & -move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,s2) & switch(T,s2) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s2_to_out2) # label(axiom).
(all T all Train all N1 all N2 (path_free(T,Train,N1,N2) -> N1 = in2 & N2 = out2 | N1 = in2 & N2 = out1 | N1 = in1 & N2 = out2 | N1 = in1 & N2 = out1)) # label(path_from_to_values) # label(axiom).
(all T (open(T,in2) <-> (exists Train path_free(T,Train,in2,gate(Train))))) # label(open_in2) # label(axiom).
(all T (open(T,in1) <-> (exists Train path_free(T,Train,in1,gate(Train))))) # label(open_in1) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in2,out2) <-> at(T,Train,in2) & gate(Train) = out2 & (-at(T,OtherTrain,in2) | Train = OtherTrain) & (-at(T,OtherTrain,s2) | Train = OtherTrain) & (-at(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in2_to_out2) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in2,out1) <-> at(T,Train,in2) & gate(Train) = out1 & (-at(T,OtherTrain,in2) | Train = OtherTrain) & (-at(T,OtherTrain,s2) | Train = OtherTrain) & (-at(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in2_to_out1) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in1,out2) <-> at(T,Train,in1) & gate(Train) = out2 & (-at(T,OtherTrain,in1) | Train = OtherTrain) & (-at(T,OtherTrain,s1) | Train = OtherTrain) & (-at(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in1_to_out2) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in1,out1) <-> at(T,Train,in1) & gate(Train) = out1 & (-at(T,OtherTrain,in1) | Train = OtherTrain) & (-at(T,OtherTrain,s1) | Train = OtherTrain) & (-at(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in1_to_out1) # label(axiom).
end_of_list.

formulas(goals).
(all T all Train all N1 all N2 (at(T,Train,N1) & switch(T,N1) = N2 -> -(at(succ(T),Train,N1) & switch(succ(T),N1) != N2))) # label(switch_critical) # label(conjecture).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all X all Y (less(X,Y) & less(Y,X) -> X = Y)) # label(antisymmetry) # label(axiom) # label(non_clause).  [assumption].
2 (all X all Y all Z (less(X,Y) & less(Y,Z) -> less(X,Z))) # label(transitivity) # label(axiom) # label(non_clause).  [assumption].
3 (all X all Y (less(X,Y) | less(Y,X))) # label(totality) # label(axiom) # label(non_clause).  [assumption].
4 (all X (less(X,succ(X)) & (all Y (less(Y,X) | less(succ(X),Y))))) # label(succ) # label(axiom) # label(non_clause).  [assumption].
5 (all X (pred(succ(X)) = X & succ(pred(X)) = X)) # label(pred) # label(axiom) # label(non_clause).  [assumption].
6 (all T all Train all N1 all N2 (at(T,Train,N1) & at(T,Train,N2) -> N1 = N2)) # label(at_uniq) # label(axiom) # label(non_clause).  [assumption].
7 (all T all Train all N all OtherN (at(T,Train,N) -> -enter(T,Train,OtherN))) # label(at_nondup) # label(axiom) # label(non_clause).  [assumption].
8 (all T all Train all OtherTrain all N (at(T,Train,N) -> -enter(T,OtherTrain,N))) # label(input_nocol) # label(axiom) # label(non_clause).  [assumption].
9 (all T all Train all OtherTrain all N (enter(T,Train,N) & enter(T,OtherTrain,N) -> Train = OtherTrain)) # label(enter_uniq) # label(axiom) # label(non_clause).  [assumption].
10 (all T all N (empty(T,N) <-> (all Train -at(T,Train,N)))) # label(node_empty) # label(axiom) # label(non_clause).  [assumption].
11 (all T all N (safe(T,N) <-> (all Train all OtherTrain (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)))) # label(node_safe) # label(axiom) # label(non_clause).  [assumption].
12 (all N (notBlocked(N) <-> (all T1 all Train (at(T1,Train,N) & -open(T1,N) -> (exists T2 (less(T1,T2) & open(T2,N))))))) # label(not_blocked) # label(axiom) # label(non_clause).  [assumption].
13 (all T1 all Train all N (at(T1,Train,N) -> (exists T2 (move(T2,Train) & less(T1,T2))))) # label(train_will_move) # label(axiom) # label(non_clause).  [assumption].
14 (all T1 all Train all N1 (at(T1,Train,N1) -> (exists T2 exists N2 (enter(T2,Train,N2) & less(T2,T1))))) # label(train_entered) # label(axiom) # label(non_clause).  [assumption].
15 (all T all Train all OtherTrain all N (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)) # label(occupied_only_once) # label(axiom) # label(non_clause).  [assumption].
16 (all T all N1 all N2 (switch(succ(T),N1) = N2 & -empty(T,N1) -> switch(T,N1) = N2)) # label(switch_restr) # label(axiom) # label(non_clause).  [assumption].
17 (all T all Train move(T,Train)) # label(train_moves) # label(axiom) # label(non_clause).  [assumption].
18 (exists Train exists N1 all T1 all T2 all N2 enter(succ(T2),Train,N1)) -> -at(T1,Train,N2) & -at(T2,Train,N2) & -enter(T2,Train,N2) & empty(T2,N1) & input(N1) & less(T1,T2) # label(train_enters) # label(axiom) # label(non_clause).  [assumption].
19 (all T all Train all N (at(T,Train,N) -> N = out2 | N = out1 | N = in2 | N = in1 | N = s1 | N = s2)) # label(at_restr) # label(axiom) # label(non_clause).  [assumption].
20 (all T all N (open(T,N) -> input(N))) # label(open_restr) # label(axiom) # label(non_clause).  [assumption].
21 (all N (input(N) -> N = in2 | N = in1)) # label(input) # label(axiom) # label(non_clause).  [assumption].
22 (all Train (gate(Train) = out2 | gate(Train) = out1)) # label(gate_restr) # label(axiom) # label(non_clause).  [assumption].
23 out2 != out1 & out2 != in2 & out2 != in1 & out2 != s1 & out2 != s2 & out1 != in2 & out1 != in1 & out1 != s1 & out1 != s2 & in2 != in1 & in2 != s1 & in2 != s2 & in1 != s1 & in1 != s2 & s1 != s2 # label(distinct_nodes) # label(axiom) # label(non_clause).  [assumption].
24 (all T all Train all N (enter(T,Train,N) -> N = in2 | N = in1)) # label(enter_values) # label(axiom) # label(non_clause).  [assumption].
25 (all T switch(T,in2) = s2) # label(switch_in2_values) # label(axiom) # label(non_clause).  [assumption].
26 (all T switch(T,in1) = s1) # label(switch_in1_values) # label(axiom) # label(non_clause).  [assumption].
27 (all T (switch(T,s1) = out1 | switch(T,s1) = out2)) # label(switch_s1_values) # label(axiom) # label(non_clause).  [assumption].
28 (all T (switch(T,s2) = out1 | switch(T,s2) = out2)) # label(switch_s2_values) # label(axiom) # label(non_clause).  [assumption].
29 (all T all Train (at(T,Train,in2) & gate(Train) = out2 -> switch(T,in2) = s2)) # label(switch_in2_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
30 (all T all Train (at(T,Train,s2) & gate(Train) = out2 -> switch(T,s2) = out2)) # label(switch_s2_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
31 (all T all Train (at(T,Train,in2) & gate(Train) = out1 -> switch(T,in2) = s2)) # label(switch_in2_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
32 (all T all Train (at(T,Train,s2) & gate(Train) = out1 -> switch(T,s2) = out1)) # label(switch_s2_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
33 (all T all Train (at(T,Train,in1) & gate(Train) = out2 -> switch(T,in1) = s1)) # label(switch_in1_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
34 (all T all Train (at(T,Train,s1) & gate(Train) = out2 -> switch(T,s1) = out2)) # label(switch_s1_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
35 (all T all Train (at(T,Train,in1) & gate(Train) = out1 -> switch(T,in1) = s1)) # label(switch_in1_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
36 (all T all Train (at(T,Train,s1) & gate(Train) = out1 -> switch(T,s1) = out1)) # label(switch_s1_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
37 (all T all Train (enter(T,Train,in2) | at(T,Train,in2) & -open(T,in2))) -> at(succ(T),Train,in2) # label(enter_or_wait_at_in2) # label(axiom) # label(non_clause).  [assumption].
38 (all T all Train ((at(T,Train,in2) & open(T,in2) & move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,in2) & open(T,in2) & -move(T,Train) -> at(succ(T),Train,in2)))) # label(move_or_stay_from_in2_to_s2) # label(axiom) # label(non_clause).  [assumption].
39 (all T all Train (enter(T,Train,in1) | at(T,Train,in1) & -open(T,in1))) -> at(succ(T),Train,in1) # label(enter_or_wait_at_in1) # label(axiom) # label(non_clause).  [assumption].
40 (all T all Train ((at(T,Train,in1) & open(T,in1) & move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,in1) & open(T,in1) & -move(T,Train) -> at(succ(T),Train,in1)))) # label(move_or_stay_from_in1_to_s1) # label(axiom) # label(non_clause).  [assumption].
41 (all T all Train ((at(T,Train,out2) & -move(T,Train) -> at(succ(T),Train,out2)) | (at(T,Train,out2) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out2) # label(axiom) # label(non_clause).  [assumption].
42 (all T all Train ((at(T,Train,out1) & -move(T,Train) -> at(succ(T),Train,out1)) | (at(T,Train,out1) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out1) # label(axiom) # label(non_clause).  [assumption].
43 (all T all Train ((at(T,Train,s1) & switch(T,s1) = out1 & -move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,s1) & switch(T,s1) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s1_to_out1) # label(axiom) # label(non_clause).  [assumption].
44 (all T all Train ((at(T,Train,s1) & switch(T,s1) = out2 & -move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,s1) & switch(T,s1) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s1_to_out2) # label(axiom) # label(non_clause).  [assumption].
45 (all T all Train ((at(T,Train,s2) & switch(T,s2) = out1 & -move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,s2) & switch(T,s2) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s2_to_out1) # label(axiom) # label(non_clause).  [assumption].
46 (all T all Train ((at(T,Train,s2) & switch(T,s2) = out2 & -move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,s2) & switch(T,s2) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s2_to_out2) # label(axiom) # label(non_clause).  [assumption].
47 (all T all Train all N1 all N2 (path_free(T,Train,N1,N2) -> N1 = in2 & N2 = out2 | N1 = in2 & N2 = out1 | N1 = in1 & N2 = out2 | N1 = in1 & N2 = out1)) # label(path_from_to_values) # label(axiom) # label(non_clause).  [assumption].
48 (all T (open(T,in2) <-> (exists Train path_free(T,Train,in2,gate(Train))))) # label(open_in2) # label(axiom) # label(non_clause).  [assumption].
49 (all T (open(T,in1) <-> (exists Train path_free(T,Train,in1,gate(Train))))) # label(open_in1) # label(axiom) # label(non_clause).  [assumption].
50 (all T all Train all OtherTrain (path_free(T,Train,in2,out2) <-> at(T,Train,in2) & gate(Train) = out2 & (-at(T,OtherTrain,in2) | Train = OtherTrain) & (-at(T,OtherTrain,s2) | Train = OtherTrain) & (-at(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in2_to_out2) # label(axiom) # label(non_clause).  [assumption].
51 (all T all Train all OtherTrain (path_free(T,Train,in2,out1) <-> at(T,Train,in2) & gate(Train) = out1 & (-at(T,OtherTrain,in2) | Train = OtherTrain) & (-at(T,OtherTrain,s2) | Train = OtherTrain) & (-at(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in2_to_out1) # label(axiom) # label(non_clause).  [assumption].
52 (all T all Train all OtherTrain (path_free(T,Train,in1,out2) <-> at(T,Train,in1) & gate(Train) = out2 & (-at(T,OtherTrain,in1) | Train = OtherTrain) & (-at(T,OtherTrain,s1) | Train = OtherTrain) & (-at(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in1_to_out2) # label(axiom) # label(non_clause).  [assumption].
53 (all T all Train all OtherTrain (path_free(T,Train,in1,out1) <-> at(T,Train,in1) & gate(Train) = out1 & (-at(T,OtherTrain,in1) | Train = OtherTrain) & (-at(T,OtherTrain,s1) | Train = OtherTrain) & (-at(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in1_to_out1) # label(axiom) # label(non_clause).  [assumption].
54 (all T all Train all N1 all N2 (at(T,Train,N1) & switch(T,N1) = N2 -> -(at(succ(T),Train,N1) & switch(succ(T),N1) != N2))) # label(switch_critical) # label(conjecture) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
-less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].
-less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].
less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].
less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].
less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].
pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
-at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].
-at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].
-at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].
-enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].
-empty(A,B) | -at(A,C,B) # label(node_empty) # label(axiom).  [clausify(10)].
empty(A,B) | at(A,f1(A,B),B) # label(node_empty) # label(axiom).  [clausify(10)].
-safe(A,B) | -at(A,C,B) | -at(A,D,B) | D = C # label(node_safe) # label(axiom).  [clausify(11)].
safe(A,B) | at(A,f2(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
safe(A,B) | at(A,f3(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
safe(A,B) | f3(A,B) != f2(A,B) # label(node_safe) # label(axiom).  [clausify(11)].
-notBlocked(A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)) # label(not_blocked) # label(axiom).  [clausify(12)].
-notBlocked(A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A) # label(not_blocked) # label(axiom).  [clausify(12)].
notBlocked(A) | at(f5(A),f6(A),A) # label(not_blocked) # label(axiom).  [clausify(12)].
notBlocked(A) | -open(f5(A),A) # label(not_blocked) # label(axiom).  [clausify(12)].
notBlocked(A) | -less(f5(A),B) | -open(B,A) # label(not_blocked) # label(axiom).  [clausify(12)].
-at(A,B,C) | move(f7(A,B,C),B) # label(train_will_move) # label(axiom).  [clausify(13)].
-at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(13)].
-at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(14)].
-at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(14)].
-at(A,B,C) | -at(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(15)].
switch(succ(A),B) != C | empty(A,B) | switch(A,B) = C # label(switch_restr) # label(axiom).  [clausify(16)].
move(A,B) # label(train_moves) # label(axiom).  [clausify(17)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(A,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -enter(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | empty(D,E) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | input(E) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | less(A,D) # label(train_enters) # label(axiom).  [clausify(18)].
-at(A,B,C) | out2 = C | out1 = C | in2 = C | in1 = C | s1 = C | s2 = C # label(at_restr) # label(axiom).  [clausify(19)].
-open(A,B) | input(B) # label(open_restr) # label(axiom).  [clausify(20)].
-input(A) | in2 = A | in1 = A # label(input) # label(axiom).  [clausify(21)].
gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(22)].
out1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
in2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
in1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
s1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
s2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
in2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
in1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
s1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
s2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
in1 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
s1 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
s2 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
s1 != in1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
s2 != in1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
s2 != s1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
-enter(A,B,C) | in2 = C | in1 = C # label(enter_values) # label(axiom).  [clausify(24)].
switch(A,in2) = s2 # label(switch_in2_values) # label(axiom).  [clausify(25)].
switch(A,in1) = s1 # label(switch_in1_values) # label(axiom).  [clausify(26)].
switch(A,s1) = out1 | switch(A,s1) = out2 # label(switch_s1_values) # label(axiom).  [clausify(27)].
switch(A,s2) = out1 | switch(A,s2) = out2 # label(switch_s2_values) # label(axiom).  [clausify(28)].
-at(A,B,in2) | gate(B) != out2 | switch(A,in2) = s2 # label(switch_in2_with_gate_out2) # label(axiom).  [clausify(29)].
-at(A,B,s2) | gate(B) != out2 | switch(A,s2) = out2 # label(switch_s2_with_gate_out2) # label(axiom).  [clausify(30)].
-at(A,B,in2) | gate(B) != out1 | switch(A,in2) = s2 # label(switch_in2_with_gate_out1) # label(axiom).  [clausify(31)].
-at(A,B,s2) | gate(B) != out1 | switch(A,s2) = out1 # label(switch_s2_with_gate_out1) # label(axiom).  [clausify(32)].
-at(A,B,in1) | gate(B) != out2 | switch(A,in1) = s1 # label(switch_in1_with_gate_out2) # label(axiom).  [clausify(33)].
-at(A,B,s1) | gate(B) != out2 | switch(A,s1) = out2 # label(switch_s1_with_gate_out2) # label(axiom).  [clausify(34)].
-at(A,B,in1) | gate(B) != out1 | switch(A,in1) = s1 # label(switch_in1_with_gate_out1) # label(axiom).  [clausify(35)].
-at(A,B,s1) | gate(B) != out1 | switch(A,s1) = out1 # label(switch_s1_with_gate_out1) # label(axiom).  [clausify(36)].
-enter(f13(A,B),f14(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(37)].
-at(f13(A,B),f14(A,B),in2) | open(f13(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(37)].
-enter(f15(A,B),f16(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(39)].
-at(f15(A,B),f16(A,B),in1) | open(f15(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(39)].
-path_free(A,B,C,D) | in2 = C | in1 = C # label(path_from_to_values) # label(axiom).  [clausify(47)].
-path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(47)].
-open(A,in2) | path_free(A,f17(A),in2,gate(f17(A))) # label(open_in2) # label(axiom).  [clausify(48)].
open(A,in2) | -path_free(A,B,in2,gate(B)) # label(open_in2) # label(axiom).  [clausify(48)].
-open(A,in1) | path_free(A,f18(A),in1,gate(f18(A))) # label(open_in1) # label(axiom).  [clausify(49)].
open(A,in1) | -path_free(A,B,in1,gate(B)) # label(open_in1) # label(axiom).  [clausify(49)].
-path_free(A,B,in2,out2) | at(A,B,in2) # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
-path_free(A,B,in2,out2) | gate(B) = out2 # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
-path_free(A,B,in2,out2) | -at(A,C,in2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
-path_free(A,B,in2,out2) | -at(A,C,s2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
-path_free(A,B,in2,out2) | -at(A,C,out2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2 | at(A,C,in2) | at(A,C,s2) | at(A,C,out2) # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2 | C != B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
-path_free(A,B,in2,out1) | at(A,B,in2) # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
-path_free(A,B,in2,out1) | gate(B) = out1 # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
-path_free(A,B,in2,out1) | -at(A,C,in2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
-path_free(A,B,in2,out1) | -at(A,C,s2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
-path_free(A,B,in2,out1) | -at(A,C,out1) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1 | at(A,C,in2) | at(A,C,s2) | at(A,C,out1) # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1 | C != B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
-path_free(A,B,in1,out2) | at(A,B,in1) # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
-path_free(A,B,in1,out2) | gate(B) = out2 # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
-path_free(A,B,in1,out2) | -at(A,C,in1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
-path_free(A,B,in1,out2) | -at(A,C,s1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
-path_free(A,B,in1,out2) | -at(A,C,out2) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2 | at(A,C,in1) | at(A,C,s1) | at(A,C,out2) # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2 | C != B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
-path_free(A,B,in1,out1) | at(A,B,in1) # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
-path_free(A,B,in1,out1) | gate(B) = out1 # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
-path_free(A,B,in1,out1) | -at(A,C,in1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
-path_free(A,B,in1,out1) | -at(A,C,s1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
-path_free(A,B,in1,out1) | -at(A,C,out1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1 | at(A,C,in1) | at(A,C,s1) | at(A,C,out1) # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1 | C != B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
at(c1,c2,c3) # label(switch_critical) # label(conjecture).  [deny(54)].
switch(c1,c3) = c4 # label(switch_critical) # label(conjecture).  [deny(54)].
at(succ(c1),c2,c3) # label(switch_critical) # label(conjecture).  [deny(54)].
switch(succ(c1),c3) != c4 # label(switch_critical) # label(conjecture).  [deny(54)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating empty/2
55 empty(A,B) | at(A,f1(A,B),B) # label(node_empty) # label(axiom).  [clausify(10)].
56 -empty(A,B) | -at(A,C,B) # label(node_empty) # label(axiom).  [clausify(10)].
Derived: at(A,f1(A,B),B) | -at(A,C,B).  [resolve(55,a,56,a)].
57 switch(succ(A),B) != C | empty(A,B) | switch(A,B) = C # label(switch_restr) # label(axiom).  [clausify(16)].
Derived: switch(succ(A),B) != C | switch(A,B) = C | -at(A,D,B).  [resolve(57,b,56,a)].
58 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | empty(D,E) # label(train_enters) # label(axiom).  [clausify(18)].
Derived: -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,V7,E).  [resolve(58,b,56,a)].

Eliminating safe/2
59 safe(A,B) | at(A,f2(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
60 -safe(A,B) | -at(A,C,B) | -at(A,D,B) | D = C # label(node_safe) # label(axiom).  [clausify(11)].
61 safe(A,B) | at(A,f3(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
62 safe(A,B) | f3(A,B) != f2(A,B) # label(node_safe) # label(axiom).  [clausify(11)].

Eliminating notBlocked/1
63 notBlocked(A) | at(f5(A),f6(A),A) # label(not_blocked) # label(axiom).  [clausify(12)].
64 -notBlocked(A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)) # label(not_blocked) # label(axiom).  [clausify(12)].
65 -notBlocked(A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A) # label(not_blocked) # label(axiom).  [clausify(12)].
Derived: at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(63,a,64,a)].
Derived: at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(63,a,65,a)].
66 notBlocked(A) | -open(f5(A),A) # label(not_blocked) # label(axiom).  [clausify(12)].
Derived: -open(f5(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(66,a,64,a)].
Derived: -open(f5(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(66,a,65,a)].
67 notBlocked(A) | -less(f5(A),B) | -open(B,A) # label(not_blocked) # label(axiom).  [clausify(12)].
Derived: -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | less(C,f4(A,C,D)).  [resolve(67,a,64,a)].
Derived: -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | open(f4(A,C,D),A).  [resolve(67,a,65,a)].

Eliminating move/2

Eliminating input/1
68 -input(A) | in2 = A | in1 = A # label(input) # label(axiom).  [clausify(21)].
69 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | input(E) # label(train_enters) # label(axiom).  [clausify(18)].
70 -open(A,B) | input(B) # label(open_restr) # label(axiom).  [clausify(20)].
Derived: in2 = A | in1 = A | -enter(succ(f11(B,C,D,E,A,F,V6)),F,V6).  [resolve(68,a,69,b)].
Derived: in2 = A | in1 = A | -open(B,A).  [resolve(68,a,70,b)].

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, open, less, at, enter, path_free ]).
Function symbol precedence:  function_order([ in1, in2, out1, out2, s1, s2, c1, c2, c3, c4, switch, f1, f13, f14, f15, f16, gate, succ, pred, f5, f6, f17, f18, f4, f7, f8, f9, f11 ]).
After inverse_order:  (no changes).
Unfolding symbols: c4/0.

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      71 -less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].
kept:      72 -less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].
kept:      73 less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].
kept:      74 less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].
kept:      75 less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].
kept:      76 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
kept:      77 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
kept:      78 -at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].
kept:      79 -at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].
kept:      80 -at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].
kept:      81 -enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].
kept:      82 -at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(13)].
kept:      83 -at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(14)].
kept:      84 -at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(14)].
kept:      85 -at(A,B,C) | -at(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(15)].
kept:      86 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(A,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
kept:      87 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
kept:      88 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -enter(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
kept:      89 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | less(A,D) # label(train_enters) # label(axiom).  [clausify(18)].
kept:      90 -at(A,B,C) | out2 = C | out1 = C | in2 = C | in1 = C | s1 = C | s2 = C # label(at_restr) # label(axiom).  [clausify(19)].
kept:      91 gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(22)].
           92 out1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      93 out2 != out1.  [copy(92),flip(a)].
           94 in2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      95 out2 != in2.  [copy(94),flip(a)].
           96 in1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      97 out2 != in1.  [copy(96),flip(a)].
kept:      98 s1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      99 s2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
           100 in2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      101 out1 != in2.  [copy(100),flip(a)].
           102 in1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      103 out1 != in1.  [copy(102),flip(a)].
kept:      104 s1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      105 s2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
           106 in1 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      107 in2 != in1.  [copy(106),flip(a)].
kept:      108 s1 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      109 s2 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      110 s1 != in1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      111 s2 != in1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      112 s2 != s1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      113 -enter(A,B,C) | in2 = C | in1 = C # label(enter_values) # label(axiom).  [clausify(24)].
kept:      114 switch(A,in2) = s2 # label(switch_in2_values) # label(axiom).  [clausify(25)].
kept:      115 switch(A,in1) = s1 # label(switch_in1_values) # label(axiom).  [clausify(26)].
kept:      116 switch(A,s1) = out1 | switch(A,s1) = out2 # label(switch_s1_values) # label(axiom).  [clausify(27)].
kept:      117 switch(A,s2) = out1 | switch(A,s2) = out2 # label(switch_s2_values) # label(axiom).  [clausify(28)].
           118 -at(A,B,in2) | gate(B) != out2 | switch(A,in2) = s2 # label(switch_in2_with_gate_out2) # label(axiom).  [clausify(29)].
kept:      119 -at(A,B,s2) | gate(B) != out2 | switch(A,s2) = out2 # label(switch_s2_with_gate_out2) # label(axiom).  [clausify(30)].
           120 -at(A,B,in2) | gate(B) != out1 | switch(A,in2) = s2 # label(switch_in2_with_gate_out1) # label(axiom).  [clausify(31)].
kept:      121 -at(A,B,s2) | gate(B) != out1 | switch(A,s2) = out1 # label(switch_s2_with_gate_out1) # label(axiom).  [clausify(32)].
           122 -at(A,B,in1) | gate(B) != out2 | switch(A,in1) = s1 # label(switch_in1_with_gate_out2) # label(axiom).  [clausify(33)].
kept:      123 -at(A,B,s1) | gate(B) != out2 | switch(A,s1) = out2 # label(switch_s1_with_gate_out2) # label(axiom).  [clausify(34)].
           124 -at(A,B,in1) | gate(B) != out1 | switch(A,in1) = s1 # label(switch_in1_with_gate_out1) # label(axiom).  [clausify(35)].
kept:      125 -at(A,B,s1) | gate(B) != out1 | switch(A,s1) = out1 # label(switch_s1_with_gate_out1) # label(axiom).  [clausify(36)].
kept:      126 -enter(f13(A,B),f14(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(37)].
kept:      127 -at(f13(A,B),f14(A,B),in2) | open(f13(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(37)].
kept:      128 -enter(f15(A,B),f16(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(39)].
kept:      129 -at(f15(A,B),f16(A,B),in1) | open(f15(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(39)].
kept:      130 -path_free(A,B,C,D) | in2 = C | in1 = C # label(path_from_to_values) # label(axiom).  [clausify(47)].
kept:      131 -path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(47)].
kept:      132 -open(A,in2) | path_free(A,f17(A),in2,gate(f17(A))) # label(open_in2) # label(axiom).  [clausify(48)].
kept:      133 open(A,in2) | -path_free(A,B,in2,gate(B)) # label(open_in2) # label(axiom).  [clausify(48)].
kept:      134 -open(A,in1) | path_free(A,f18(A),in1,gate(f18(A))) # label(open_in1) # label(axiom).  [clausify(49)].
kept:      135 open(A,in1) | -path_free(A,B,in1,gate(B)) # label(open_in1) # label(axiom).  [clausify(49)].
kept:      136 -path_free(A,B,in2,out2) | at(A,B,in2) # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
kept:      137 -path_free(A,B,in2,out2) | gate(B) = out2 # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
kept:      138 -path_free(A,B,in2,out2) | -at(A,C,in2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
kept:      139 -path_free(A,B,in2,out2) | -at(A,C,s2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
kept:      140 -path_free(A,B,in2,out2) | -at(A,C,out2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
kept:      141 path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2 | at(A,C,in2) | at(A,C,s2) | at(A,C,out2) # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
           142 path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2 | C != B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
kept:      143 path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2.  [copy(142),xx(d)].
kept:      144 -path_free(A,B,in2,out1) | at(A,B,in2) # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
kept:      145 -path_free(A,B,in2,out1) | gate(B) = out1 # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
kept:      146 -path_free(A,B,in2,out1) | -at(A,C,in2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
kept:      147 -path_free(A,B,in2,out1) | -at(A,C,s2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
kept:      148 -path_free(A,B,in2,out1) | -at(A,C,out1) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
kept:      149 path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1 | at(A,C,in2) | at(A,C,s2) | at(A,C,out1) # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
           150 path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1 | C != B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
kept:      151 path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1.  [copy(150),xx(d)].
kept:      152 -path_free(A,B,in1,out2) | at(A,B,in1) # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
kept:      153 -path_free(A,B,in1,out2) | gate(B) = out2 # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
kept:      154 -path_free(A,B,in1,out2) | -at(A,C,in1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
kept:      155 -path_free(A,B,in1,out2) | -at(A,C,s1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
kept:      156 -path_free(A,B,in1,out2) | -at(A,C,out2) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
kept:      157 path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2 | at(A,C,in1) | at(A,C,s1) | at(A,C,out2) # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
           158 path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2 | C != B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
kept:      159 path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2.  [copy(158),xx(d)].
kept:      160 -path_free(A,B,in1,out1) | at(A,B,in1) # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
kept:      161 -path_free(A,B,in1,out1) | gate(B) = out1 # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
kept:      162 -path_free(A,B,in1,out1) | -at(A,C,in1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
kept:      163 -path_free(A,B,in1,out1) | -at(A,C,s1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
kept:      164 -path_free(A,B,in1,out1) | -at(A,C,out1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
kept:      165 path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1 | at(A,C,in1) | at(A,C,s1) | at(A,C,out1) # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
           166 path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1 | C != B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
kept:      167 path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1.  [copy(166),xx(d)].
kept:      168 at(c1,c2,c3) # label(switch_critical) # label(conjecture).  [deny(54)].
           169 switch(c1,c3) = c4 # label(switch_critical) # label(conjecture).  [deny(54)].
kept:      170 c4 = switch(c1,c3).  [copy(169),flip(a)].
kept:      171 at(succ(c1),c2,c3) # label(switch_critical) # label(conjecture).  [deny(54)].
           172 switch(succ(c1),c3) != c4 # label(switch_critical) # label(conjecture).  [deny(54)].
kept:      173 switch(succ(c1),c3) != switch(c1,c3).  [copy(172),rewrite([170(5)])].
kept:      174 at(A,f1(A,B),B) | -at(A,C,B).  [resolve(55,a,56,a)].
kept:      175 switch(succ(A),B) != C | switch(A,B) = C | -at(A,D,B).  [resolve(57,b,56,a)].
kept:      176 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,V7,E).  [resolve(58,b,56,a)].
kept:      177 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(63,a,64,a)].
kept:      178 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(63,a,65,a)].
kept:      179 -open(f5(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(66,a,64,a)].
kept:      180 -open(f5(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(66,a,65,a)].
kept:      181 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | less(C,f4(A,C,D)).  [resolve(67,a,64,a)].
kept:      182 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | open(f4(A,C,D),A).  [resolve(67,a,65,a)].
kept:      183 in2 = A | in1 = A | -enter(succ(f11(B,C,D,E,A,F,V6)),F,V6).  [resolve(68,a,69,b)].
kept:      184 in2 = A | in1 = A | -open(B,A).  [resolve(68,a,70,b)].
kept:      185 less(A,A).  [factor(73,a,b)].

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

% Clauses after input processing:

formulas(usable).
end_of_list.

formulas(sos).
71 -less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].
72 -less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].
73 less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].
74 less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].
75 less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].
76 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
77 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
78 -at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].
79 -at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].
80 -at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].
81 -enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].
82 -at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(13)].
83 -at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(14)].
84 -at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(14)].
85 -at(A,B,C) | -at(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(15)].
86 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(A,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
87 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
88 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -enter(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
89 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | less(A,D) # label(train_enters) # label(axiom).  [clausify(18)].
90 -at(A,B,C) | out2 = C | out1 = C | in2 = C | in1 = C | s1 = C | s2 = C # label(at_restr) # label(axiom).  [clausify(19)].
91 gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(22)].
93 out2 != out1.  [copy(92),flip(a)].
95 out2 != in2.  [copy(94),flip(a)].
97 out2 != in1.  [copy(96),flip(a)].
98 s1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
99 s2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
101 out1 != in2.  [copy(100),flip(a)].
103 out1 != in1.  [copy(102),flip(a)].
104 s1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
105 s2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
107 in2 != in1.  [copy(106),flip(a)].
108 s1 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
109 s2 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
110 s1 != in1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
111 s2 != in1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
112 s2 != s1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
113 -enter(A,B,C) | in2 = C | in1 = C # label(enter_values) # label(axiom).  [clausify(24)].
114 switch(A,in2) = s2 # label(switch_in2_values) # label(axiom).  [clausify(25)].
115 switch(A,in1) = s1 # label(switch_in1_values) # label(axiom).  [clausify(26)].
116 switch(A,s1) = out1 | switch(A,s1) = out2 # label(switch_s1_values) # label(axiom).  [clausify(27)].
117 switch(A,s2) = out1 | switch(A,s2) = out2 # label(switch_s2_values) # label(axiom).  [clausify(28)].
119 -at(A,B,s2) | gate(B) != out2 | switch(A,s2) = out2 # label(switch_s2_with_gate_out2) # label(axiom).  [clausify(30)].
121 -at(A,B,s2) | gate(B) != out1 | switch(A,s2) = out1 # label(switch_s2_with_gate_out1) # label(axiom).  [clausify(32)].
123 -at(A,B,s1) | gate(B) != out2 | switch(A,s1) = out2 # label(switch_s1_with_gate_out2) # label(axiom).  [clausify(34)].
125 -at(A,B,s1) | gate(B) != out1 | switch(A,s1) = out1 # label(switch_s1_with_gate_out1) # label(axiom).  [clausify(36)].
126 -enter(f13(A,B),f14(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(37)].
127 -at(f13(A,B),f14(A,B),in2) | open(f13(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(37)].
128 -enter(f15(A,B),f16(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(39)].
129 -at(f15(A,B),f16(A,B),in1) | open(f15(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(39)].
130 -path_free(A,B,C,D) | in2 = C | in1 = C # label(path_from_to_values) # label(axiom).  [clausify(47)].
131 -path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(47)].
132 -open(A,in2) | path_free(A,f17(A),in2,gate(f17(A))) # label(open_in2) # label(axiom).  [clausify(48)].
133 open(A,in2) | -path_free(A,B,in2,gate(B)) # label(open_in2) # label(axiom).  [clausify(48)].
134 -open(A,in1) | path_free(A,f18(A),in1,gate(f18(A))) # label(open_in1) # label(axiom).  [clausify(49)].
135 open(A,in1) | -path_free(A,B,in1,gate(B)) # label(open_in1) # label(axiom).  [clausify(49)].
136 -path_free(A,B,in2,out2) | at(A,B,in2) # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
137 -path_free(A,B,in2,out2) | gate(B) = out2 # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
138 -path_free(A,B,in2,out2) | -at(A,C,in2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
139 -path_free(A,B,in2,out2) | -at(A,C,s2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
140 -path_free(A,B,in2,out2) | -at(A,C,out2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
143 path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2.  [copy(142),xx(d)].
144 -path_free(A,B,in2,out1) | at(A,B,in2) # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
145 -path_free(A,B,in2,out1) | gate(B) = out1 # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
146 -path_free(A,B,in2,out1) | -at(A,C,in2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
147 -path_free(A,B,in2,out1) | -at(A,C,s2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
148 -path_free(A,B,in2,out1) | -at(A,C,out1) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
151 path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1.  [copy(150),xx(d)].
152 -path_free(A,B,in1,out2) | at(A,B,in1) # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
153 -path_free(A,B,in1,out2) | gate(B) = out2 # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
154 -path_free(A,B,in1,out2) | -at(A,C,in1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
155 -path_free(A,B,in1,out2) | -at(A,C,s1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
156 -path_free(A,B,in1,out2) | -at(A,C,out2) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
159 path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2.  [copy(158),xx(d)].
160 -path_free(A,B,in1,out1) | at(A,B,in1) # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
161 -path_free(A,B,in1,out1) | gate(B) = out1 # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
162 -path_free(A,B,in1,out1) | -at(A,C,in1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
163 -path_free(A,B,in1,out1) | -at(A,C,s1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
164 -path_free(A,B,in1,out1) | -at(A,C,out1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
167 path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1.  [copy(166),xx(d)].
168 at(c1,c2,c3) # label(switch_critical) # label(conjecture).  [deny(54)].
170 c4 = switch(c1,c3).  [copy(169),flip(a)].
171 at(succ(c1),c2,c3) # label(switch_critical) # label(conjecture).  [deny(54)].
173 switch(succ(c1),c3) != switch(c1,c3).  [copy(172),rewrite([170(5)])].
174 at(A,f1(A,B),B) | -at(A,C,B).  [resolve(55,a,56,a)].
175 switch(succ(A),B) != C | switch(A,B) = C | -at(A,D,B).  [resolve(57,b,56,a)].
176 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,V7,E).  [resolve(58,b,56,a)].
177 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(63,a,64,a)].
178 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(63,a,65,a)].
179 -open(f5(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(66,a,64,a)].
180 -open(f5(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(66,a,65,a)].
181 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | less(C,f4(A,C,D)).  [resolve(67,a,64,a)].
182 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | open(f4(A,C,D),A).  [resolve(67,a,65,a)].
183 in2 = A | in1 = A | -enter(succ(f11(B,C,D,E,A,F,V6)),F,V6).  [resolve(68,a,69,b)].
184 in2 = A | in1 = A | -open(B,A).  [resolve(68,a,70,b)].
185 less(A,A).  [factor(73,a,b)].
end_of_list.

formulas(demodulators).
76 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
77 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
114 switch(A,in2) = s2 # label(switch_in2_values) # label(axiom).  [clausify(25)].
115 switch(A,in1) = s1 # label(switch_in1_values) # label(axiom).  [clausify(26)].
170 c4 = switch(c1,c3).  [copy(169),flip(a)].
end_of_list.

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.02 seconds.

given #1 (I,wt=9): 71 -less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].

given #2 (I,wt=9): 72 -less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].

given #3 (I,wt=6): 73 less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].

given #4 (I,wt=4): 74 less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].

given #5 (I,wt=7): 75 less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].

given #6 (I,wt=5): 76 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].

given #7 (I,wt=5): 77 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].

given #8 (I,wt=11): 78 -at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].

given #9 (I,wt=8): 79 -at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].

given #10 (I,wt=8): 80 -at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].

given #11 (I,wt=11): 81 -enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].

given #12 (I,wt=10): 82 -at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(13)].

given #13 (I,wt=14): 83 -at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(14)].

given #14 (I,wt=10): 84 -at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(14)].

given #15 (I,wt=11): 85 -at(A,B,C) | -at(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(15)].

given #16 (I,wt=16): 86 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(A,B,C) # label(train_enters) # label(axiom).  [clausify(18)].

given #17 (I,wt=16): 87 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].

given #18 (I,wt=16): 88 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -enter(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].

given #19 (I,wt=15): 89 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | less(A,D) # label(train_enters) # label(axiom).  [clausify(18)].

given #20 (I,wt=22): 90 -at(A,B,C) | out2 = C | out1 = C | in2 = C | in1 = C | s1 = C | s2 = C # label(at_restr) # label(axiom).  [clausify(19)].

given #21 (I,wt=8): 91 gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(22)].

given #22 (I,wt=3): 93 out2 != out1.  [copy(92),flip(a)].

given #23 (I,wt=3): 95 out2 != in2.  [copy(94),flip(a)].

given #24 (I,wt=3): 97 out2 != in1.  [copy(96),flip(a)].

given #25 (I,wt=3): 98 s1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #26 (I,wt=3): 99 s2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #27 (I,wt=3): 101 out1 != in2.  [copy(100),flip(a)].

given #28 (I,wt=3): 103 out1 != in1.  [copy(102),flip(a)].

given #29 (I,wt=3): 104 s1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #30 (I,wt=3): 105 s2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #31 (I,wt=3): 107 in2 != in1.  [copy(106),flip(a)].

given #32 (I,wt=3): 108 s1 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #33 (I,wt=3): 109 s2 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #34 (I,wt=3): 110 s1 != in1 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #35 (I,wt=3): 111 s2 != in1 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #36 (I,wt=3): 112 s2 != s1 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #37 (I,wt=10): 113 -enter(A,B,C) | in2 = C | in1 = C # label(enter_values) # label(axiom).  [clausify(24)].

given #38 (I,wt=5): 114 switch(A,in2) = s2 # label(switch_in2_values) # label(axiom).  [clausify(25)].

given #39 (I,wt=5): 115 switch(A,in1) = s1 # label(switch_in1_values) # label(axiom).  [clausify(26)].

given #40 (I,wt=10): 116 switch(A,s1) = out1 | switch(A,s1) = out2 # label(switch_s1_values) # label(axiom).  [clausify(27)].

given #41 (I,wt=10): 117 switch(A,s2) = out1 | switch(A,s2) = out2 # label(switch_s2_values) # label(axiom).  [clausify(28)].

given #42 (I,wt=13): 119 -at(A,B,s2) | gate(B) != out2 | switch(A,s2) = out2 # label(switch_s2_with_gate_out2) # label(axiom).  [clausify(30)].

given #43 (I,wt=13): 121 -at(A,B,s2) | gate(B) != out1 | switch(A,s2) = out1 # label(switch_s2_with_gate_out1) # label(axiom).  [clausify(32)].

given #44 (I,wt=13): 123 -at(A,B,s1) | gate(B) != out2 | switch(A,s1) = out2 # label(switch_s1_with_gate_out2) # label(axiom).  [clausify(34)].

given #45 (I,wt=13): 125 -at(A,B,s1) | gate(B) != out1 | switch(A,s1) = out1 # label(switch_s1_with_gate_out1) # label(axiom).  [clausify(36)].

given #46 (I,wt=13): 126 -enter(f13(A,B),f14(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(37)].

given #47 (I,wt=18): 127 -at(f13(A,B),f14(A,B),in2) | open(f13(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(37)].

given #48 (I,wt=13): 128 -enter(f15(A,B),f16(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(39)].

given #49 (I,wt=18): 129 -at(f15(A,B),f16(A,B),in1) | open(f15(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(39)].

given #50 (I,wt=11): 130 -path_free(A,B,C,D) | in2 = C | in1 = C # label(path_from_to_values) # label(axiom).  [clausify(47)].

given #51 (I,wt=11): 131 -path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(47)].

given #52 (I,wt=11): 132 -open(A,in2) | path_free(A,f17(A),in2,gate(f17(A))) # label(open_in2) # label(axiom).  [clausify(48)].

given #53 (I,wt=9): 133 open(A,in2) | -path_free(A,B,in2,gate(B)) # label(open_in2) # label(axiom).  [clausify(48)].

given #54 (I,wt=11): 134 -open(A,in1) | path_free(A,f18(A),in1,gate(f18(A))) # label(open_in1) # label(axiom).  [clausify(49)].

given #55 (I,wt=9): 135 open(A,in1) | -path_free(A,B,in1,gate(B)) # label(open_in1) # label(axiom).  [clausify(49)].

given #56 (I,wt=9): 136 -path_free(A,B,in2,out2) | at(A,B,in2) # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].

given #57 (I,wt=9): 137 -path_free(A,B,in2,out2) | gate(B) = out2 # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].

given #58 (I,wt=12): 138 -path_free(A,B,in2,out2) | -at(A,C,in2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].

given #59 (I,wt=12): 139 -path_free(A,B,in2,out2) | -at(A,C,s2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].

given #60 (I,wt=12): 140 -path_free(A,B,in2,out2) | -at(A,C,out2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].

given #61 (I,wt=13): 143 path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2.  [copy(142),xx(d)].

given #62 (I,wt=9): 144 -path_free(A,B,in2,out1) | at(A,B,in2) # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].

given #63 (I,wt=9): 145 -path_free(A,B,in2,out1) | gate(B) = out1 # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].

given #64 (I,wt=12): 146 -path_free(A,B,in2,out1) | -at(A,C,in2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].

given #65 (I,wt=12): 147 -path_free(A,B,in2,out1) | -at(A,C,s2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].

given #66 (I,wt=12): 148 -path_free(A,B,in2,out1) | -at(A,C,out1) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].

given #67 (I,wt=13): 151 path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1.  [copy(150),xx(d)].

given #68 (I,wt=9): 152 -path_free(A,B,in1,out2) | at(A,B,in1) # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].

given #69 (I,wt=9): 153 -path_free(A,B,in1,out2) | gate(B) = out2 # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].

given #70 (I,wt=12): 154 -path_free(A,B,in1,out2) | -at(A,C,in1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].

given #71 (I,wt=12): 155 -path_free(A,B,in1,out2) | -at(A,C,s1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].

given #72 (I,wt=12): 156 -path_free(A,B,in1,out2) | -at(A,C,out2) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].

given #73 (I,wt=13): 159 path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2.  [copy(158),xx(d)].

given #74 (I,wt=9): 160 -path_free(A,B,in1,out1) | at(A,B,in1) # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].

given #75 (I,wt=9): 161 -path_free(A,B,in1,out1) | gate(B) = out1 # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].

given #76 (I,wt=12): 162 -path_free(A,B,in1,out1) | -at(A,C,in1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].

given #77 (I,wt=12): 163 -path_free(A,B,in1,out1) | -at(A,C,s1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].

given #78 (I,wt=12): 164 -path_free(A,B,in1,out1) | -at(A,C,out1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].

given #79 (I,wt=13): 167 path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1.  [copy(166),xx(d)].

given #80 (I,wt=4): 168 at(c1,c2,c3) # label(switch_critical) # label(conjecture).  [deny(54)].

given #81 (I,wt=5): 170 c4 = switch(c1,c3).  [copy(169),flip(a)].

given #82 (I,wt=5): 171 at(succ(c1),c2,c3) # label(switch_critical) # label(conjecture).  [deny(54)].

given #83 (I,wt=8): 173 switch(succ(c1),c3) != switch(c1,c3).  [copy(172),rewrite([170(5)])].

given #84 (I,wt=10): 174 at(A,f1(A,B),B) | -at(A,C,B).  [resolve(55,a,56,a)].

given #85 (I,wt=15): 175 switch(succ(A),B) != C | switch(A,B) = C | -at(A,D,B).  [resolve(57,b,56,a)].

given #86 (I,wt=16): 176 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,V7,E).  [resolve(58,b,56,a)].

given #87 (I,wt=19): 177 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(63,a,64,a)].

given #88 (I,wt=19): 178 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(63,a,65,a)].

given #89 (I,wt=17): 179 -open(f5(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(66,a,64,a)].

given #90 (I,wt=17): 180 -open(f5(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(66,a,65,a)].

given #91 (I,wt=20): 181 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | less(C,f4(A,C,D)).  [resolve(67,a,64,a)].

given #92 (I,wt=20): 182 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | open(f4(A,C,D),A).  [resolve(67,a,65,a)].

given #93 (I,wt=18): 183 in2 = A | in1 = A | -enter(succ(f11(B,C,D,E,A,F,V6)),F,V6).  [resolve(68,a,69,b)].

given #94 (I,wt=9): 184 in2 = A | in1 = A | -open(B,A).  [resolve(68,a,70,b)].

given #95 (I,wt=3): 185 less(A,A).  [factor(73,a,b)].

given #96 (A,wt=9): 186 less(A,B) | -less(C,B) | less(C,A).  [resolve(73,a,72,b)].

given #97 (T,wt=4): 196 less(pred(A),A).  [para(77(a,1),74(a,2))].

given #98 (T,wt=6): 202 less(f8(c1,c2,c3),c1).  [resolve(168,a,84,a)].

given #99 (T,wt=6): 204 less(c1,f7(c1,c2,c3)).  [resolve(168,a,82,a)].

given #100 (T,wt=6): 212 at(c1,f1(c1,c3),c3).  [resolve(174,b,168,a)].

given #101 (A,wt=7): 187 -less(A,B) | less(A,succ(B)).  [resolve(74,a,72,b)].

given #102 (T,wt=5): 255 less(pred(A),succ(A)).  [resolve(187,a,196,a)].

given #103 (T,wt=5): 257 less(A,succ(succ(A))).  [resolve(187,a,74,a)].

given #104 (T,wt=5): 263 less(pred(pred(A)),A).  [para(77(a,1),255(a,2))].

given #105 (T,wt=6): 258 less(pred(A),succ(succ(A))).  [resolve(255,a,187,a)].

given #106 (A,wt=7): 188 -less(succ(A),B) | less(A,B).  [resolve(74,a,72,a)].

given #107 (T,wt=6): 264 less(A,succ(succ(succ(A)))).  [resolve(257,a,187,a)].

given #108 (T,wt=6): 269 less(pred(pred(A)),succ(A)).  [resolve(263,a,187,a)].

given #109 (T,wt=6): 289 less(pred(pred(pred(A))),A).  [para(77(a,1),269(a,2))].

given #110 (T,wt=7): 197 less(A,pred(B)) | less(B,A).  [para(77(a,1),75(b,1))].

given #111 (A,wt=8): 189 -less(succ(A),A) | succ(A) = A.  [resolve(74,a,71,b),flip(b)].

given #112 (T,wt=7): 201 -at(c1,A,c3) | c2 = A.  [resolve(168,a,85,b)].

given #113 (T,wt=5): 303 f1(c1,c3) = c2.  [resolve(201,a,212,a),flip(a)].

given #114 (T,wt=7): 205 -at(c1,c2,A) | c3 = A.  [resolve(168,a,78,b)].

given #115 (T,wt=7): 228 less(A,succ(B)) | less(B,A).  [resolve(186,b,74,a)].

given #116 (A,wt=10): 190 less(succ(A),B) | -less(C,B) | less(C,A).  [resolve(75,a,72,b)].

given #117 (T,wt=7): 230 less(A,B) | less(pred(B),A).  [resolve(196,a,186,b)].

given #118 (T,wt=7): 231 -less(A,pred(B)) | less(A,B).  [resolve(196,a,72,b)].

given #119 (T,wt=7): 232 -less(A,B) | less(pred(A),B).  [resolve(196,a,72,a)].

given #120 (T,wt=7): 253 less(c1,succ(f7(c1,c2,c3))).  [resolve(187,a,204,a)].

given #121 (A,wt=10): 191 less(succ(A),B) | -less(A,C) | less(B,C).  [resolve(75,a,72,a)].

given #122 (T,wt=7): 254 less(f8(c1,c2,c3),succ(c1)).  [resolve(187,a,202,a)].

given #123 (T,wt=7): 274 less(pred(A),succ(succ(succ(A)))).  [resolve(258,a,187,a)].

given #124 (T,wt=7): 279 less(A,succ(succ(succ(succ(A))))).  [resolve(264,a,188,a)].

given #125 (T,wt=7): 284 less(pred(pred(A)),succ(succ(A))).  [resolve(269,a,187,a)].

given #126 (A,wt=10): 192 less(succ(A),B) | -less(A,B) | B = A.  [resolve(75,a,71,b)].

given #127 (T,wt=7): 290 less(pred(pred(pred(A))),succ(A)).  [resolve(289,a,187,a)].

given #128 (T,wt=7): 331 less(pred(pred(pred(pred(A)))),A).  [resolve(231,a,289,a)].

given #129 (T,wt=7): 334 less(pred(c1),f7(c1,c2,c3)).  [resolve(232,a,204,a)].

given #130 (T,wt=7): 335 less(pred(f8(c1,c2,c3)),c1).  [resolve(232,a,202,a)].

given #131 (A,wt=10): 193 less(succ(A),B) | -less(A,B) | A = B.  [resolve(75,a,71,a)].

given #132 (T,wt=8): 206 -at(succ(c1),A,c3) | c2 = A.  [resolve(171,a,85,b)].

given #133 (T,wt=8): 207 less(f8(succ(c1),c2,c3),succ(c1)).  [resolve(171,a,84,a)].

given #134 (T,wt=8): 209 less(succ(c1),f7(succ(c1),c2,c3)).  [resolve(171,a,82,a)].

given #135 (T,wt=7): 417 less(c1,f7(succ(c1),c2,c3)).  [resolve(209,a,232,a),rewrite([76(3)])].

given #136 (A,wt=10): 194 less(A,B) | -less(C,succ(B)) | less(C,A).  [resolve(75,b,72,b)].

given #137 (T,wt=8): 210 -at(succ(c1),c2,A) | c3 = A.  [resolve(171,a,78,b)].

given #138 (T,wt=8): 211 at(succ(c1),f1(succ(c1),c3),c3).  [resolve(174,b,171,a)].

given #139 (T,wt=6): 434 f1(succ(c1),c3) = c2.  [resolve(211,a,206,a),flip(a)].

given #140 (T,wt=8): 233 -less(A,pred(A)) | pred(A) = A.  [resolve(196,a,71,b)].

given #141 (A,wt=11): 195 less(A,B) | -less(A,succ(B)) | succ(B) = A.  [resolve(75,b,71,b)].

given #142 (T,wt=8): 256 less(succ(A),succ(B)) | less(B,A).  [resolve(187,a,75,b)].

given #143 (T,wt=8): 259 less(A,succ(B)) | less(pred(B),A).  [resolve(255,a,186,b)].

given #144 (T,wt=8): 260 -less(A,pred(B)) | less(A,succ(B)).  [resolve(255,a,72,b)].

given #145 (T,wt=8): 261 -less(succ(A),B) | less(pred(A),B).  [resolve(255,a,72,a)].

given #146 (A,wt=12): 198 gate(A) = out1 | open(B,in2) | -path_free(B,A,in2,out2).  [para(91(a,1),133(b,4))].

given #147 (T,wt=8): 265 less(A,succ(succ(B))) | less(B,A).  [resolve(257,a,186,b)].

given #148 (T,wt=8): 266 -less(A,B) | less(A,succ(succ(B))).  [resolve(257,a,72,b)].

given #149 (T,wt=8): 267 -less(succ(succ(A)),B) | less(A,B).  [resolve(257,a,72,a)].

given #150 (T,wt=8): 270 less(A,B) | less(pred(pred(B)),A).  [resolve(263,a,186,b)].

given #151 (A,wt=12): 199 gate(A) = out1 | open(B,in1) | -path_free(B,A,in1,out2).  [para(91(a,1),135(b,4))].

given #152 (T,wt=8): 271 -less(A,pred(pred(B))) | less(A,B).  [resolve(263,a,72,b)].

given #153 (T,wt=8): 272 -less(A,B) | less(pred(pred(A)),B).  [resolve(263,a,72,a)].

given #154 (T,wt=8): 295 less(A,succ(B)) | less(B,pred(A)).  [resolve(197,a,188,a)].

given #155 (T,wt=8): 304 less(A,succ(B)) | less(B,succ(A)).  [resolve(228,a,188,a)].

given #156 (A,wt=18): 200 c3 = out2 | c3 = out1 | c3 = in2 | c3 = in1 | c3 = s1 | c3 = s2.  [resolve(168,a,90,a),flip(a),flip(b),flip(c),flip(d),flip(e),flip(f)].

given #157 (T,wt=8): 322 less(succ(A),B) | less(pred(B),A).  [resolve(190,b,196,a)].

given #158 (T,wt=8): 325 less(pred(A),succ(B)) | less(B,A).  [resolve(230,a,188,a)].

given #159 (T,wt=8): 332 less(pred(A),B) | less(pred(B),A).  [resolve(231,a,230,b)].

given #160 (T,wt=8): 333 less(A,B) | less(pred(B),pred(A)).  [resolve(231,a,197,b)].

given #161 (A,wt=10): 203 enter(f8(c1,c2,c3),c2,f9(c1,c2,c3)).  [resolve(168,a,83,a)].

given #162 (F,wt=7): 597 -at(f8(c1,c2,c3),c2,A).  [resolve(203,a,79,b)].

given #163 (F,wt=10): 596 -at(f8(c1,c2,c3),A,f9(c1,c2,c3)).  [resolve(203,a,80,b)].

given #164 (T,wt=8): 336 less(pred(c1),succ(f7(c1,c2,c3))).  [resolve(253,a,232,a)].

given #165 (T,wt=8): 338 less(c1,succ(succ(f7(c1,c2,c3)))).  [resolve(253,a,187,a)].

given #166 (T,wt=8): 348 less(pred(f8(c1,c2,c3)),succ(c1)).  [resolve(254,a,232,a)].

given #167 (T,wt=8): 351 less(f8(c1,c2,c3),succ(succ(c1))).  [resolve(254,a,187,a)].

given #168 (A,wt=12): 208 enter(f8(succ(c1),c2,c3),c2,f9(succ(c1),c2,c3)).  [resolve(171,a,83,a)].

given #169 (F,wt=8): 642 -at(f8(succ(c1),c2,c3),c2,A).  [resolve(208,a,79,b)].

given #170 (F,wt=12): 641 -at(f8(succ(c1),c2,c3),A,f9(succ(c1),c2,c3)).  [resolve(208,a,80,b)].

given #171 (T,wt=8): 356 less(pred(pred(A)),succ(succ(succ(A)))).  [resolve(274,a,232,a)].

given #172 (T,wt=8): 358 less(pred(A),succ(succ(succ(succ(A))))).  [resolve(274,a,187,a)].

given #173 (T,wt=8): 364 less(A,succ(succ(succ(succ(succ(A)))))).  [resolve(279,a,188,a)].

given #174 (T,wt=8): 369 less(pred(pred(pred(A))),succ(succ(A))).  [resolve(284,a,232,a)].

given #175 (A,wt=13): 213 switch(succ(succ(c1)),c3) != A | switch(succ(c1),c3) = A.  [resolve(175,c,171,a)].

given #176 (T,wt=8): 383 less(pred(pred(pred(pred(A)))),succ(A)).  [resolve(290,a,232,a)].

given #177 (T,wt=8): 389 less(pred(pred(pred(pred(pred(A))))),A).  [resolve(331,a,232,a)].

given #178 (T,wt=8): 395 less(pred(pred(c1)),f7(c1,c2,c3)).  [resolve(334,a,232,a)].

given #179 (T,wt=8): 401 less(pred(pred(f8(c1,c2,c3))),c1).  [resolve(335,a,232,a)].

given #180 (A,wt=11): 214 switch(succ(c1),c3) != A | switch(c1,c3) = A.  [resolve(175,c,168,a)].

============================== PROOF =================================

% Proof 1 at 0.04 (+ 0.01) seconds.
% Length of proof is 15.
% Level of proof is 4.
% Maximum clause weight is 15.000.
% Given clauses 180.

5 (all X (pred(succ(X)) = X & succ(pred(X)) = X)) # label(pred) # label(axiom) # label(non_clause).  [assumption].
10 (all T all N (empty(T,N) <-> (all Train -at(T,Train,N)))) # label(node_empty) # label(axiom) # label(non_clause).  [assumption].
16 (all T all N1 all N2 (switch(succ(T),N1) = N2 & -empty(T,N1) -> switch(T,N1) = N2)) # label(switch_restr) # label(axiom) # label(non_clause).  [assumption].
54 (all T all Train all N1 all N2 (at(T,Train,N1) & switch(T,N1) = N2 -> -(at(succ(T),Train,N1) & switch(succ(T),N1) != N2))) # label(switch_critical) # label(conjecture) # label(non_clause) # label(goal).  [goal].
56 -empty(A,B) | -at(A,C,B) # label(node_empty) # label(axiom).  [clausify(10)].
57 switch(succ(A),B) != C | empty(A,B) | switch(A,B) = C # label(switch_restr) # label(axiom).  [clausify(16)].
77 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
168 at(c1,c2,c3) # label(switch_critical) # label(conjecture).  [deny(54)].
169 switch(c1,c3) = c4 # label(switch_critical) # label(conjecture).  [deny(54)].
170 c4 = switch(c1,c3).  [copy(169),flip(a)].
172 switch(succ(c1),c3) != c4 # label(switch_critical) # label(conjecture).  [deny(54)].
173 switch(succ(c1),c3) != switch(c1,c3).  [copy(172),rewrite([170(5)])].
175 switch(succ(A),B) != C | switch(A,B) = C | -at(A,D,B).  [resolve(57,b,56,a)].
214 switch(succ(c1),c3) != A | switch(c1,c3) = A.  [resolve(175,c,168,a)].
702 $F.  [resolve(214,a,77,a(flip)),rewrite([77(9)]),flip(a),unit_del(a,173)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=180. Generated=1666. Kept=615. proofs=1.
Usable=177. Sos=420. Demods=8. Limbo=0, Disabled=138. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=1050. Back_subsumed=4.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=8 (0 lex), Back_demodulated=14. Back_unit_deleted=0.
Demod_attempts=12275. Demod_rewrites=248.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=8283. Nonunit_bsub_feature_tests=1254.
Megabytes=1.84.
User_CPU=0.04, System_CPU=0.01, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 16075 exit (max_proofs) Sat Jul  8 18:25:34 2017
