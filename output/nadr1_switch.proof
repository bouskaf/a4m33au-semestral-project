============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 60636 was started by mac on Filip-MacBook-Pro.local,
Thu Jul  6 16:07:27 2017
The command was "./prover9".
============================== end of head ===========================

============================== INPUT =================================
set(prolog_style_variables).

formulas(assumptions).
(all X all Y (less(X,Y) & less(Y,X) -> X = Y)) # label(antisymmetry) # label(axiom).
(all X all Y all Z (less(X,Y) & less(Y,Z) -> less(X,Z))) # label(transitivity) # label(axiom).
(all X all Y (less(X,Y) | less(Y,X))) # label(totality) # label(axiom).
(all X (less(X,succ(X)) & (all Y (less(Y,X) | less(succ(X),Y))))) # label(succ) # label(axiom).
(all X (pred(succ(X)) = X & succ(pred(X)) = X)) # label(pred) # label(axiom).
(all T all Train all N1 all N2 (at(T,Train,N1) & at(T,Train,N2) -> N1 = N2)) # label(at_uniq) # label(axiom).
(all T all Train all N all OtherN (at(T,Train,N) -> -enter(T,Train,OtherN))) # label(at_nondup) # label(axiom).
(all T all Train all OtherTrain all N (at(T,Train,N) -> -enter(T,OtherTrain,N))) # label(input_nocol) # label(axiom).
(all T all Train all OtherTrain all N (enter(T,Train,N) & enter(T,OtherTrain,N) -> Train = OtherTrain)) # label(enter_uniq) # label(axiom).
(all T all Train all N (at(T,Train,N) -> occupied(T,Train,N))) # label(occupied) # label(axiom).
(all T all N (empty(T,N) <-> (all Train -at(T,Train,N)))) # label(node_empty) # label(axiom).
(all T all N (safe(T,N) <-> (all Train all OtherTrain (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)))) # label(node_safe) # label(axiom).
(all N (notBlocked(N) <-> (all T1 all Train (at(T1,Train,N) & -open(T1,N) -> (exists T2 (less(T1,T2) & open(T2,N))))))) # label(not_blocked) # label(axiom).
(all T1 all Train all N (at(T1,Train,N) -> (exists T2 (move(T2,Train) & less(T1,T2))))) # label(train_will_move) # label(axiom).
(all T1 all Train all N1 (at(T1,Train,N1) -> (exists T2 exists N2 (enter(T2,Train,N2) & less(T2,T1))))) # label(train_entered) # label(axiom).
(all T all Train all OtherTrain all N (occupied(T,Train,N) & occupied(T,OtherTrain,N) -> Train = OtherTrain)) # label(occupied_only_once) # label(axiom).
(all T all N1 all N2 (-empty(T,N1) & switch(T,N1) = N2 -> switch(succ(T),N1) = N2)) # label(switch_restr) # label(axiom).
(all T all Train move(T,Train)) # label(train_moves) # label(axiom).
(exists Train exists N1 all T1 all T2 all N2 (-at(T1,Train,N2) & -at(T2,Train,N2) & -enter(T2,Train,N2) & empty(T2,N1) & input(N1) & less(T1,T2))) -> enter(succ(T2),Train,N1) # label(train_enters) # label(axiom).
(all T all Train all N (at(T,Train,N) -> N = out2 | N = out1 | N = in2 | N = in1 | N = s1 | N = s2)) # label(at_restr) # label(axiom).
(all T all N (open(T,N) -> input(N))) # label(open_restr) # label(axiom).
(all N (input(N) -> N = in2 | N = in1)) # label(input) # label(axiom).
(all Train (gate(Train) = out2 | gate(Train) = out1)) # label(gate_restr) # label(axiom).
out2 != out1 & out2 != in2 & out2 != in1 & out2 != s1 & out2 != s2 & out1 != in2 & out1 != in1 & out1 != s1 & out1 != s2 & in2 != in1 & in2 != s1 & in2 != s2 & in1 != s1 & in1 != s2 & s1 != s2 # label(distinct_nodes) # label(axiom).
(all T all Train all N (occupied(T,Train,N) -> N = out2 | N = out1 | N = in2 | N = in1 | N = s1 | N = s2)) # label(occupied_values) # label(axiom).
(all T all Train all N (enter(T,Train,N) -> N = in2 | N = in1)) # label(enter_values) # label(axiom).
(all T switch(T,in2) = s2) # label(switch_in2_values) # label(axiom).
(all T switch(T,in1) = s1) # label(switch_in1_values) # label(axiom).
(all T (switch(T,s1) = out1 | switch(T,s1) = out2)) # label(switch_s1_values) # label(axiom).
(all T (switch(T,s2) = out1 | switch(T,s2) = out2)) # label(switch_s2_values) # label(axiom).
(all T all Train (occupied(T,Train,in2) & gate(Train) = out2 -> switch(T,in2) = s2)) # label(switch_in2_with_gate_out2) # label(axiom).
(all T all Train (occupied(T,Train,s2) & gate(Train) = out2 -> switch(T,s2) = out2)) # label(switch_s2_with_gate_out2) # label(axiom).
(all T all Train (occupied(T,Train,in2) & gate(Train) = out1 -> switch(T,in2) = s2)) # label(switch_in2_with_gate_out1) # label(axiom).
(all T all Train (occupied(T,Train,s2) & gate(Train) = out1 -> switch(T,s2) = out1)) # label(switch_s2_with_gate_out1) # label(axiom).
(all T all Train (occupied(T,Train,in1) & gate(Train) = out2 -> switch(T,in1) = s1)) # label(switch_in1_with_gate_out2) # label(axiom).
(all T all Train (occupied(T,Train,s1) & gate(Train) = out2 -> switch(T,s1) = out2)) # label(switch_s1_with_gate_out2) # label(axiom).
(all T all Train (occupied(T,Train,in1) & gate(Train) = out1 -> switch(T,in1) = s1)) # label(switch_in1_with_gate_out1) # label(axiom).
(all T all Train (occupied(T,Train,s1) & gate(Train) = out1 -> switch(T,s1) = out1)) # label(switch_s1_with_gate_out1) # label(axiom).
(all T all Train (enter(T,Train,in2) | at(T,Train,in2) & -open(T,in2))) -> at(succ(T),Train,in2) # label(enter_or_wait_at_in2) # label(axiom).
(all T all Train ((at(T,Train,in2) & open(T,in2) & move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,in2) & open(T,in2) & -move(T,Train) -> at(succ(T),Train,in2)))) # label(move_or_stay_from_in2_to_s2) # label(axiom).
(all T all Train (enter(T,Train,in1) | at(T,Train,in1) & -open(T,in1))) -> at(succ(T),Train,in1) # label(enter_or_wait_at_in1) # label(axiom).
(all T all Train ((at(T,Train,in1) & open(T,in1) & move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,in1) & open(T,in1) & -move(T,Train) -> at(succ(T),Train,in1)))) # label(move_or_stay_from_in1_to_s1) # label(axiom).
(all T all Train ((at(T,Train,out2) & -move(T,Train) -> at(succ(T),Train,out2)) | (at(T,Train,out2) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out2) # label(axiom).
(all T all Train ((at(T,Train,out1) & -move(T,Train) -> at(succ(T),Train,out1)) | (at(T,Train,out1) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out1) # label(axiom).
(all T all Train ((at(T,Train,s1) & switch(T,s1) = out1 & -move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,s1) & switch(T,s1) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s1_to_out1) # label(axiom).
(all T all Train ((at(T,Train,s1) & switch(T,s1) = out2 & -move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,s1) & switch(T,s1) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s1_to_out2) # label(axiom).
(all T all Train ((at(T,Train,s2) & switch(T,s2) = out1 & -move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,s2) & switch(T,s2) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s2_to_out1) # label(axiom).
(all T all Train ((at(T,Train,s2) & switch(T,s2) = out2 & -move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,s2) & switch(T,s2) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s2_to_out2) # label(axiom).
(all T all Train (occupied(succ(T),Train,out2) <-> occupied(T,Train,out2) & -(at(T,Train,out2) & -at(succ(T),Train,out2)) | at(T,Train,in2) & gate(Train) = out2 & open(T,in2) | at(T,Train,in1) & gate(Train) = out2 & open(T,in1))) # label(out2_occupied) # label(axiom).
(all T all Train (occupied(succ(T),Train,out1) <-> occupied(T,Train,out1) & -(at(T,Train,out1) & -at(succ(T),Train,out1)) | at(T,Train,in2) & gate(Train) = out1 & open(T,in2) | at(T,Train,in1) & gate(Train) = out1 & open(T,in1))) # label(out1_occupied) # label(axiom).
(all T all Train (occupied(succ(T),Train,s1) <-> occupied(T,Train,s1) & -(at(T,Train,s1) & -at(succ(T),Train,s1)) | at(T,Train,in1) & gate(Train) = out2 & open(T,in1) | at(T,Train,in1) & gate(Train) = out1 & open(T,in1))) # label(s1_occupied) # label(axiom).
(all T all Train (occupied(succ(T),Train,s2) <-> occupied(T,Train,s2) & -(at(T,Train,s2) & -at(succ(T),Train,s2)) | at(T,Train,in2) & gate(Train) = out2 & open(T,in2) | at(T,Train,in2) & gate(Train) = out1 & open(T,in2))) # label(s2_occupied) # label(axiom).
(all T all Train all N1 all N2 (path_free(T,Train,N1,N2) -> N1 = in2 & N2 = out2 | N1 = in2 & N2 = out1 | N1 = in1 & N2 = out2 | N1 = in1 & N2 = out1)) # label(path_from_to_values) # label(axiom).
(all T (open(T,in2) <-> (exists Train path_free(T,Train,in2,gate(Train))))) # label(open_in2) # label(axiom).
(all T (open(T,in1) <-> (exists Train path_free(T,Train,in1,gate(Train))))) # label(open_in1) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in2,out2) <-> at(T,Train,in2) & gate(Train) = out2 & (-occupied(T,OtherTrain,in2) | Train = OtherTrain) & (-occupied(T,OtherTrain,s2) | Train = OtherTrain) & (-occupied(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in2_to_out2) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in2,out1) <-> at(T,Train,in2) & gate(Train) = out1 & (-occupied(T,OtherTrain,in2) | Train = OtherTrain) & (-occupied(T,OtherTrain,s2) | Train = OtherTrain) & (-occupied(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in2_to_out1) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in1,out2) <-> at(T,Train,in1) & gate(Train) = out2 & (-occupied(T,OtherTrain,in1) | Train = OtherTrain) & (-occupied(T,OtherTrain,s1) | Train = OtherTrain) & (-occupied(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in1_to_out2) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in1,out1) <-> at(T,Train,in1) & gate(Train) = out1 & (-occupied(T,OtherTrain,in1) | Train = OtherTrain) & (-occupied(T,OtherTrain,s1) | Train = OtherTrain) & (-occupied(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in1_to_out1) # label(axiom).
end_of_list.

formulas(goals).
(all T all Train all N1 all N2 (at(T,Train,N1) & switch(T,N1) = N2 -> -(at(succ(T),Train,N1) & switch(succ(T),N1) != N2))) # label(switch_critical) # label(conjecture).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all X all Y (less(X,Y) & less(Y,X) -> X = Y)) # label(antisymmetry) # label(axiom) # label(non_clause).  [assumption].
2 (all X all Y all Z (less(X,Y) & less(Y,Z) -> less(X,Z))) # label(transitivity) # label(axiom) # label(non_clause).  [assumption].
3 (all X all Y (less(X,Y) | less(Y,X))) # label(totality) # label(axiom) # label(non_clause).  [assumption].
4 (all X (less(X,succ(X)) & (all Y (less(Y,X) | less(succ(X),Y))))) # label(succ) # label(axiom) # label(non_clause).  [assumption].
5 (all X (pred(succ(X)) = X & succ(pred(X)) = X)) # label(pred) # label(axiom) # label(non_clause).  [assumption].
6 (all T all Train all N1 all N2 (at(T,Train,N1) & at(T,Train,N2) -> N1 = N2)) # label(at_uniq) # label(axiom) # label(non_clause).  [assumption].
7 (all T all Train all N all OtherN (at(T,Train,N) -> -enter(T,Train,OtherN))) # label(at_nondup) # label(axiom) # label(non_clause).  [assumption].
8 (all T all Train all OtherTrain all N (at(T,Train,N) -> -enter(T,OtherTrain,N))) # label(input_nocol) # label(axiom) # label(non_clause).  [assumption].
9 (all T all Train all OtherTrain all N (enter(T,Train,N) & enter(T,OtherTrain,N) -> Train = OtherTrain)) # label(enter_uniq) # label(axiom) # label(non_clause).  [assumption].
10 (all T all Train all N (at(T,Train,N) -> occupied(T,Train,N))) # label(occupied) # label(axiom) # label(non_clause).  [assumption].
11 (all T all N (empty(T,N) <-> (all Train -at(T,Train,N)))) # label(node_empty) # label(axiom) # label(non_clause).  [assumption].
12 (all T all N (safe(T,N) <-> (all Train all OtherTrain (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)))) # label(node_safe) # label(axiom) # label(non_clause).  [assumption].
13 (all N (notBlocked(N) <-> (all T1 all Train (at(T1,Train,N) & -open(T1,N) -> (exists T2 (less(T1,T2) & open(T2,N))))))) # label(not_blocked) # label(axiom) # label(non_clause).  [assumption].
14 (all T1 all Train all N (at(T1,Train,N) -> (exists T2 (move(T2,Train) & less(T1,T2))))) # label(train_will_move) # label(axiom) # label(non_clause).  [assumption].
15 (all T1 all Train all N1 (at(T1,Train,N1) -> (exists T2 exists N2 (enter(T2,Train,N2) & less(T2,T1))))) # label(train_entered) # label(axiom) # label(non_clause).  [assumption].
16 (all T all Train all OtherTrain all N (occupied(T,Train,N) & occupied(T,OtherTrain,N) -> Train = OtherTrain)) # label(occupied_only_once) # label(axiom) # label(non_clause).  [assumption].
17 (all T all N1 all N2 (-empty(T,N1) & switch(T,N1) = N2 -> switch(succ(T),N1) = N2)) # label(switch_restr) # label(axiom) # label(non_clause).  [assumption].
18 (all T all Train move(T,Train)) # label(train_moves) # label(axiom) # label(non_clause).  [assumption].
19 (exists Train exists N1 all T1 all T2 all N2 (-at(T1,Train,N2) & -at(T2,Train,N2) & -enter(T2,Train,N2) & empty(T2,N1) & input(N1) & less(T1,T2))) -> enter(succ(T2),Train,N1) # label(train_enters) # label(axiom) # label(non_clause).  [assumption].
20 (all T all Train all N (at(T,Train,N) -> N = out2 | N = out1 | N = in2 | N = in1 | N = s1 | N = s2)) # label(at_restr) # label(axiom) # label(non_clause).  [assumption].
21 (all T all N (open(T,N) -> input(N))) # label(open_restr) # label(axiom) # label(non_clause).  [assumption].
22 (all N (input(N) -> N = in2 | N = in1)) # label(input) # label(axiom) # label(non_clause).  [assumption].
23 (all Train (gate(Train) = out2 | gate(Train) = out1)) # label(gate_restr) # label(axiom) # label(non_clause).  [assumption].
24 out2 != out1 & out2 != in2 & out2 != in1 & out2 != s1 & out2 != s2 & out1 != in2 & out1 != in1 & out1 != s1 & out1 != s2 & in2 != in1 & in2 != s1 & in2 != s2 & in1 != s1 & in1 != s2 & s1 != s2 # label(distinct_nodes) # label(axiom) # label(non_clause).  [assumption].
25 (all T all Train all N (occupied(T,Train,N) -> N = out2 | N = out1 | N = in2 | N = in1 | N = s1 | N = s2)) # label(occupied_values) # label(axiom) # label(non_clause).  [assumption].
26 (all T all Train all N (enter(T,Train,N) -> N = in2 | N = in1)) # label(enter_values) # label(axiom) # label(non_clause).  [assumption].
27 (all T switch(T,in2) = s2) # label(switch_in2_values) # label(axiom) # label(non_clause).  [assumption].
28 (all T switch(T,in1) = s1) # label(switch_in1_values) # label(axiom) # label(non_clause).  [assumption].
29 (all T (switch(T,s1) = out1 | switch(T,s1) = out2)) # label(switch_s1_values) # label(axiom) # label(non_clause).  [assumption].
30 (all T (switch(T,s2) = out1 | switch(T,s2) = out2)) # label(switch_s2_values) # label(axiom) # label(non_clause).  [assumption].
31 (all T all Train (occupied(T,Train,in2) & gate(Train) = out2 -> switch(T,in2) = s2)) # label(switch_in2_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
32 (all T all Train (occupied(T,Train,s2) & gate(Train) = out2 -> switch(T,s2) = out2)) # label(switch_s2_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
33 (all T all Train (occupied(T,Train,in2) & gate(Train) = out1 -> switch(T,in2) = s2)) # label(switch_in2_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
34 (all T all Train (occupied(T,Train,s2) & gate(Train) = out1 -> switch(T,s2) = out1)) # label(switch_s2_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
35 (all T all Train (occupied(T,Train,in1) & gate(Train) = out2 -> switch(T,in1) = s1)) # label(switch_in1_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
36 (all T all Train (occupied(T,Train,s1) & gate(Train) = out2 -> switch(T,s1) = out2)) # label(switch_s1_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
37 (all T all Train (occupied(T,Train,in1) & gate(Train) = out1 -> switch(T,in1) = s1)) # label(switch_in1_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
38 (all T all Train (occupied(T,Train,s1) & gate(Train) = out1 -> switch(T,s1) = out1)) # label(switch_s1_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
39 (all T all Train (enter(T,Train,in2) | at(T,Train,in2) & -open(T,in2))) -> at(succ(T),Train,in2) # label(enter_or_wait_at_in2) # label(axiom) # label(non_clause).  [assumption].
40 (all T all Train ((at(T,Train,in2) & open(T,in2) & move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,in2) & open(T,in2) & -move(T,Train) -> at(succ(T),Train,in2)))) # label(move_or_stay_from_in2_to_s2) # label(axiom) # label(non_clause).  [assumption].
41 (all T all Train (enter(T,Train,in1) | at(T,Train,in1) & -open(T,in1))) -> at(succ(T),Train,in1) # label(enter_or_wait_at_in1) # label(axiom) # label(non_clause).  [assumption].
42 (all T all Train ((at(T,Train,in1) & open(T,in1) & move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,in1) & open(T,in1) & -move(T,Train) -> at(succ(T),Train,in1)))) # label(move_or_stay_from_in1_to_s1) # label(axiom) # label(non_clause).  [assumption].
43 (all T all Train ((at(T,Train,out2) & -move(T,Train) -> at(succ(T),Train,out2)) | (at(T,Train,out2) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out2) # label(axiom) # label(non_clause).  [assumption].
44 (all T all Train ((at(T,Train,out1) & -move(T,Train) -> at(succ(T),Train,out1)) | (at(T,Train,out1) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out1) # label(axiom) # label(non_clause).  [assumption].
45 (all T all Train ((at(T,Train,s1) & switch(T,s1) = out1 & -move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,s1) & switch(T,s1) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s1_to_out1) # label(axiom) # label(non_clause).  [assumption].
46 (all T all Train ((at(T,Train,s1) & switch(T,s1) = out2 & -move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,s1) & switch(T,s1) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s1_to_out2) # label(axiom) # label(non_clause).  [assumption].
47 (all T all Train ((at(T,Train,s2) & switch(T,s2) = out1 & -move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,s2) & switch(T,s2) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s2_to_out1) # label(axiom) # label(non_clause).  [assumption].
48 (all T all Train ((at(T,Train,s2) & switch(T,s2) = out2 & -move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,s2) & switch(T,s2) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s2_to_out2) # label(axiom) # label(non_clause).  [assumption].
49 (all T all Train (occupied(succ(T),Train,out2) <-> occupied(T,Train,out2) & -(at(T,Train,out2) & -at(succ(T),Train,out2)) | at(T,Train,in2) & gate(Train) = out2 & open(T,in2) | at(T,Train,in1) & gate(Train) = out2 & open(T,in1))) # label(out2_occupied) # label(axiom) # label(non_clause).  [assumption].
50 (all T all Train (occupied(succ(T),Train,out1) <-> occupied(T,Train,out1) & -(at(T,Train,out1) & -at(succ(T),Train,out1)) | at(T,Train,in2) & gate(Train) = out1 & open(T,in2) | at(T,Train,in1) & gate(Train) = out1 & open(T,in1))) # label(out1_occupied) # label(axiom) # label(non_clause).  [assumption].
51 (all T all Train (occupied(succ(T),Train,s1) <-> occupied(T,Train,s1) & -(at(T,Train,s1) & -at(succ(T),Train,s1)) | at(T,Train,in1) & gate(Train) = out2 & open(T,in1) | at(T,Train,in1) & gate(Train) = out1 & open(T,in1))) # label(s1_occupied) # label(axiom) # label(non_clause).  [assumption].
52 (all T all Train (occupied(succ(T),Train,s2) <-> occupied(T,Train,s2) & -(at(T,Train,s2) & -at(succ(T),Train,s2)) | at(T,Train,in2) & gate(Train) = out2 & open(T,in2) | at(T,Train,in2) & gate(Train) = out1 & open(T,in2))) # label(s2_occupied) # label(axiom) # label(non_clause).  [assumption].
53 (all T all Train all N1 all N2 (path_free(T,Train,N1,N2) -> N1 = in2 & N2 = out2 | N1 = in2 & N2 = out1 | N1 = in1 & N2 = out2 | N1 = in1 & N2 = out1)) # label(path_from_to_values) # label(axiom) # label(non_clause).  [assumption].
54 (all T (open(T,in2) <-> (exists Train path_free(T,Train,in2,gate(Train))))) # label(open_in2) # label(axiom) # label(non_clause).  [assumption].
55 (all T (open(T,in1) <-> (exists Train path_free(T,Train,in1,gate(Train))))) # label(open_in1) # label(axiom) # label(non_clause).  [assumption].
56 (all T all Train all OtherTrain (path_free(T,Train,in2,out2) <-> at(T,Train,in2) & gate(Train) = out2 & (-occupied(T,OtherTrain,in2) | Train = OtherTrain) & (-occupied(T,OtherTrain,s2) | Train = OtherTrain) & (-occupied(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in2_to_out2) # label(axiom) # label(non_clause).  [assumption].
57 (all T all Train all OtherTrain (path_free(T,Train,in2,out1) <-> at(T,Train,in2) & gate(Train) = out1 & (-occupied(T,OtherTrain,in2) | Train = OtherTrain) & (-occupied(T,OtherTrain,s2) | Train = OtherTrain) & (-occupied(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in2_to_out1) # label(axiom) # label(non_clause).  [assumption].
58 (all T all Train all OtherTrain (path_free(T,Train,in1,out2) <-> at(T,Train,in1) & gate(Train) = out2 & (-occupied(T,OtherTrain,in1) | Train = OtherTrain) & (-occupied(T,OtherTrain,s1) | Train = OtherTrain) & (-occupied(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in1_to_out2) # label(axiom) # label(non_clause).  [assumption].
59 (all T all Train all OtherTrain (path_free(T,Train,in1,out1) <-> at(T,Train,in1) & gate(Train) = out1 & (-occupied(T,OtherTrain,in1) | Train = OtherTrain) & (-occupied(T,OtherTrain,s1) | Train = OtherTrain) & (-occupied(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in1_to_out1) # label(axiom) # label(non_clause).  [assumption].
60 (all T all Train all N1 all N2 (at(T,Train,N1) & switch(T,N1) = N2 -> -(at(succ(T),Train,N1) & switch(succ(T),N1) != N2))) # label(switch_critical) # label(conjecture) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
-less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].
-less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].
less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].
less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].
less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].
pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
-at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].
-at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].
-at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].
-enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].
-at(A,B,C) | occupied(A,B,C) # label(occupied) # label(axiom).  [clausify(10)].
-empty(A,B) | -at(A,C,B) # label(node_empty) # label(axiom).  [clausify(11)].
empty(A,B) | at(A,f1(A,B),B) # label(node_empty) # label(axiom).  [clausify(11)].
-safe(A,B) | -at(A,C,B) | -at(A,D,B) | D = C # label(node_safe) # label(axiom).  [clausify(12)].
safe(A,B) | at(A,f2(A,B),B) # label(node_safe) # label(axiom).  [clausify(12)].
safe(A,B) | at(A,f3(A,B),B) # label(node_safe) # label(axiom).  [clausify(12)].
safe(A,B) | f3(A,B) != f2(A,B) # label(node_safe) # label(axiom).  [clausify(12)].
-notBlocked(A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)) # label(not_blocked) # label(axiom).  [clausify(13)].
-notBlocked(A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A) # label(not_blocked) # label(axiom).  [clausify(13)].
notBlocked(A) | at(f5(A),f6(A),A) # label(not_blocked) # label(axiom).  [clausify(13)].
notBlocked(A) | -open(f5(A),A) # label(not_blocked) # label(axiom).  [clausify(13)].
notBlocked(A) | -less(f5(A),B) | -open(B,A) # label(not_blocked) # label(axiom).  [clausify(13)].
-at(A,B,C) | move(f7(A,B,C),B) # label(train_will_move) # label(axiom).  [clausify(14)].
-at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(14)].
-at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(15)].
-at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(15)].
-occupied(A,B,C) | -occupied(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(16)].
empty(A,B) | switch(A,B) != C | switch(succ(A),B) = C # label(switch_restr) # label(axiom).  [clausify(17)].
move(A,B) # label(train_moves) # label(axiom).  [clausify(18)].
at(f10(A,B,C,D,E),D,f12(A,B,C,D,E)) | at(f11(A,B,C,D,E),D,f12(A,B,C,D,E)) | enter(f11(A,B,C,D,E),D,f12(A,B,C,D,E)) | -empty(f11(A,B,C,D,E),E) | -input(E) | -less(f10(A,B,C,D,E),f11(A,B,C,D,E)) | enter(succ(A),B,C) # label(train_enters) # label(axiom).  [clausify(19)].
-at(A,B,C) | out2 = C | out1 = C | in2 = C | in1 = C | s1 = C | s2 = C # label(at_restr) # label(axiom).  [clausify(20)].
-open(A,B) | input(B) # label(open_restr) # label(axiom).  [clausify(21)].
-input(A) | in2 = A | in1 = A # label(input) # label(axiom).  [clausify(22)].
gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(23)].
out1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
in2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
in1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
s1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
s2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
in2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
in1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
s1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
s2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
in1 != in2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
s1 != in2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
s2 != in2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
s1 != in1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
s2 != in1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
s2 != s1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
-occupied(A,B,C) | out2 = C | out1 = C | in2 = C | in1 = C | s1 = C | s2 = C # label(occupied_values) # label(axiom).  [clausify(25)].
-enter(A,B,C) | in2 = C | in1 = C # label(enter_values) # label(axiom).  [clausify(26)].
switch(A,in2) = s2 # label(switch_in2_values) # label(axiom).  [clausify(27)].
switch(A,in1) = s1 # label(switch_in1_values) # label(axiom).  [clausify(28)].
switch(A,s1) = out1 | switch(A,s1) = out2 # label(switch_s1_values) # label(axiom).  [clausify(29)].
switch(A,s2) = out1 | switch(A,s2) = out2 # label(switch_s2_values) # label(axiom).  [clausify(30)].
-occupied(A,B,in2) | gate(B) != out2 | switch(A,in2) = s2 # label(switch_in2_with_gate_out2) # label(axiom).  [clausify(31)].
-occupied(A,B,s2) | gate(B) != out2 | switch(A,s2) = out2 # label(switch_s2_with_gate_out2) # label(axiom).  [clausify(32)].
-occupied(A,B,in2) | gate(B) != out1 | switch(A,in2) = s2 # label(switch_in2_with_gate_out1) # label(axiom).  [clausify(33)].
-occupied(A,B,s2) | gate(B) != out1 | switch(A,s2) = out1 # label(switch_s2_with_gate_out1) # label(axiom).  [clausify(34)].
-occupied(A,B,in1) | gate(B) != out2 | switch(A,in1) = s1 # label(switch_in1_with_gate_out2) # label(axiom).  [clausify(35)].
-occupied(A,B,s1) | gate(B) != out2 | switch(A,s1) = out2 # label(switch_s1_with_gate_out2) # label(axiom).  [clausify(36)].
-occupied(A,B,in1) | gate(B) != out1 | switch(A,in1) = s1 # label(switch_in1_with_gate_out1) # label(axiom).  [clausify(37)].
-occupied(A,B,s1) | gate(B) != out1 | switch(A,s1) = out1 # label(switch_s1_with_gate_out1) # label(axiom).  [clausify(38)].
-enter(f13(A,B),f14(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(39)].
-at(f13(A,B),f14(A,B),in2) | open(f13(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(39)].
-enter(f15(A,B),f16(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(41)].
-at(f15(A,B),f16(A,B),in1) | open(f15(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(41)].
-occupied(succ(A),B,out2) | occupied(A,B,out2) | at(A,B,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
-occupied(succ(A),B,out2) | occupied(A,B,out2) | at(A,B,in2) | open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
-occupied(succ(A),B,out2) | occupied(A,B,out2) | gate(B) = out2 # label(out2_occupied) # label(axiom).  [clausify(49)].
-occupied(succ(A),B,out2) | occupied(A,B,out2) | open(A,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
-occupied(succ(A),B,out2) | occupied(A,B,out2) | open(A,in2) | open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
-occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | at(A,B,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
-occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | at(A,B,in2) | open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
-occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | gate(B) = out2 # label(out2_occupied) # label(axiom).  [clausify(49)].
-occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | open(A,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
-occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | open(A,in2) | open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
occupied(succ(A),B,out2) | -occupied(A,B,out2) | at(A,B,out2) # label(out2_occupied) # label(axiom).  [clausify(49)].
occupied(succ(A),B,out2) | -occupied(A,B,out2) | -at(succ(A),B,out2) # label(out2_occupied) # label(axiom).  [clausify(49)].
occupied(succ(A),B,out2) | -at(A,B,in2) | gate(B) != out2 | -open(A,in2) # label(out2_occupied) # label(axiom).  [clausify(49)].
occupied(succ(A),B,out2) | -at(A,B,in1) | gate(B) != out2 | -open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
-occupied(succ(A),B,out1) | occupied(A,B,out1) | at(A,B,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
-occupied(succ(A),B,out1) | occupied(A,B,out1) | at(A,B,in2) | open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
-occupied(succ(A),B,out1) | occupied(A,B,out1) | gate(B) = out1 # label(out1_occupied) # label(axiom).  [clausify(50)].
-occupied(succ(A),B,out1) | occupied(A,B,out1) | open(A,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
-occupied(succ(A),B,out1) | occupied(A,B,out1) | open(A,in2) | open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
-occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | at(A,B,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
-occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | at(A,B,in2) | open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
-occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | gate(B) = out1 # label(out1_occupied) # label(axiom).  [clausify(50)].
-occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | open(A,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
-occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | open(A,in2) | open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
occupied(succ(A),B,out1) | -occupied(A,B,out1) | at(A,B,out1) # label(out1_occupied) # label(axiom).  [clausify(50)].
occupied(succ(A),B,out1) | -occupied(A,B,out1) | -at(succ(A),B,out1) # label(out1_occupied) # label(axiom).  [clausify(50)].
occupied(succ(A),B,out1) | -at(A,B,in2) | gate(B) != out1 | -open(A,in2) # label(out1_occupied) # label(axiom).  [clausify(50)].
occupied(succ(A),B,out1) | -at(A,B,in1) | gate(B) != out1 | -open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
-occupied(succ(A),B,s1) | occupied(A,B,s1) | at(A,B,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].
-occupied(succ(A),B,s1) | occupied(A,B,s1) | gate(B) = out2 | gate(B) = out1 # label(s1_occupied) # label(axiom).  [clausify(51)].
-occupied(succ(A),B,s1) | occupied(A,B,s1) | open(A,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].
-occupied(succ(A),B,s1) | -at(A,B,s1) | at(succ(A),B,s1) | at(A,B,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].
-occupied(succ(A),B,s1) | -at(A,B,s1) | at(succ(A),B,s1) | gate(B) = out2 | gate(B) = out1 # label(s1_occupied) # label(axiom).  [clausify(51)].
-occupied(succ(A),B,s1) | -at(A,B,s1) | at(succ(A),B,s1) | open(A,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].
occupied(succ(A),B,s1) | -occupied(A,B,s1) | at(A,B,s1) # label(s1_occupied) # label(axiom).  [clausify(51)].
occupied(succ(A),B,s1) | -occupied(A,B,s1) | -at(succ(A),B,s1) # label(s1_occupied) # label(axiom).  [clausify(51)].
occupied(succ(A),B,s1) | -at(A,B,in1) | gate(B) != out2 | -open(A,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].
occupied(succ(A),B,s1) | -at(A,B,in1) | gate(B) != out1 | -open(A,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].
-occupied(succ(A),B,s2) | occupied(A,B,s2) | at(A,B,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].
-occupied(succ(A),B,s2) | occupied(A,B,s2) | gate(B) = out2 | gate(B) = out1 # label(s2_occupied) # label(axiom).  [clausify(52)].
-occupied(succ(A),B,s2) | occupied(A,B,s2) | open(A,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].
-occupied(succ(A),B,s2) | -at(A,B,s2) | at(succ(A),B,s2) | at(A,B,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].
-occupied(succ(A),B,s2) | -at(A,B,s2) | at(succ(A),B,s2) | gate(B) = out2 | gate(B) = out1 # label(s2_occupied) # label(axiom).  [clausify(52)].
-occupied(succ(A),B,s2) | -at(A,B,s2) | at(succ(A),B,s2) | open(A,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].
occupied(succ(A),B,s2) | -occupied(A,B,s2) | at(A,B,s2) # label(s2_occupied) # label(axiom).  [clausify(52)].
occupied(succ(A),B,s2) | -occupied(A,B,s2) | -at(succ(A),B,s2) # label(s2_occupied) # label(axiom).  [clausify(52)].
occupied(succ(A),B,s2) | -at(A,B,in2) | gate(B) != out2 | -open(A,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].
occupied(succ(A),B,s2) | -at(A,B,in2) | gate(B) != out1 | -open(A,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].
-path_free(A,B,C,D) | in2 = C | in1 = C # label(path_from_to_values) # label(axiom).  [clausify(53)].
-path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(53)].
-open(A,in2) | path_free(A,f17(A),in2,gate(f17(A))) # label(open_in2) # label(axiom).  [clausify(54)].
open(A,in2) | -path_free(A,B,in2,gate(B)) # label(open_in2) # label(axiom).  [clausify(54)].
-open(A,in1) | path_free(A,f18(A),in1,gate(f18(A))) # label(open_in1) # label(axiom).  [clausify(55)].
open(A,in1) | -path_free(A,B,in1,gate(B)) # label(open_in1) # label(axiom).  [clausify(55)].
-path_free(A,B,in2,out2) | at(A,B,in2) # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
-path_free(A,B,in2,out2) | gate(B) = out2 # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
-path_free(A,B,in2,out2) | -occupied(A,C,in2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
-path_free(A,B,in2,out2) | -occupied(A,C,s2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
-path_free(A,B,in2,out2) | -occupied(A,C,out2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2 | occupied(A,C,in2) | occupied(A,C,s2) | occupied(A,C,out2) # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2 | C != B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
-path_free(A,B,in2,out1) | at(A,B,in2) # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
-path_free(A,B,in2,out1) | gate(B) = out1 # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
-path_free(A,B,in2,out1) | -occupied(A,C,in2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
-path_free(A,B,in2,out1) | -occupied(A,C,s2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
-path_free(A,B,in2,out1) | -occupied(A,C,out1) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1 | occupied(A,C,in2) | occupied(A,C,s2) | occupied(A,C,out1) # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1 | C != B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
-path_free(A,B,in1,out2) | at(A,B,in1) # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
-path_free(A,B,in1,out2) | gate(B) = out2 # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
-path_free(A,B,in1,out2) | -occupied(A,C,in1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
-path_free(A,B,in1,out2) | -occupied(A,C,s1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
-path_free(A,B,in1,out2) | -occupied(A,C,out2) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2 | occupied(A,C,in1) | occupied(A,C,s1) | occupied(A,C,out2) # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2 | C != B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
-path_free(A,B,in1,out1) | at(A,B,in1) # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
-path_free(A,B,in1,out1) | gate(B) = out1 # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
-path_free(A,B,in1,out1) | -occupied(A,C,in1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
-path_free(A,B,in1,out1) | -occupied(A,C,s1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
-path_free(A,B,in1,out1) | -occupied(A,C,out1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1 | occupied(A,C,in1) | occupied(A,C,s1) | occupied(A,C,out1) # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1 | C != B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
at(c1,c2,c3) # label(switch_critical) # label(conjecture).  [deny(60)].
switch(c1,c3) = c4 # label(switch_critical) # label(conjecture).  [deny(60)].
at(succ(c1),c2,c3) # label(switch_critical) # label(conjecture).  [deny(60)].
switch(succ(c1),c3) != c4 # label(switch_critical) # label(conjecture).  [deny(60)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating safe/2
61 safe(A,B) | at(A,f2(A,B),B) # label(node_safe) # label(axiom).  [clausify(12)].
62 -safe(A,B) | -at(A,C,B) | -at(A,D,B) | D = C # label(node_safe) # label(axiom).  [clausify(12)].
Derived: at(A,f2(A,B),B) | -at(A,C,B) | -at(A,D,B) | D = C.  [resolve(61,a,62,a)].
63 safe(A,B) | at(A,f3(A,B),B) # label(node_safe) # label(axiom).  [clausify(12)].
Derived: at(A,f3(A,B),B) | -at(A,C,B) | -at(A,D,B) | D = C.  [resolve(63,a,62,a)].
64 safe(A,B) | f3(A,B) != f2(A,B) # label(node_safe) # label(axiom).  [clausify(12)].
Derived: f3(A,B) != f2(A,B) | -at(A,C,B) | -at(A,D,B) | D = C.  [resolve(64,a,62,a)].

Eliminating notBlocked/1
65 notBlocked(A) | at(f5(A),f6(A),A) # label(not_blocked) # label(axiom).  [clausify(13)].
66 -notBlocked(A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)) # label(not_blocked) # label(axiom).  [clausify(13)].
67 -notBlocked(A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A) # label(not_blocked) # label(axiom).  [clausify(13)].
Derived: at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(65,a,66,a)].
Derived: at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(65,a,67,a)].
68 notBlocked(A) | -open(f5(A),A) # label(not_blocked) # label(axiom).  [clausify(13)].
Derived: -open(f5(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(68,a,66,a)].
Derived: -open(f5(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(68,a,67,a)].
69 notBlocked(A) | -less(f5(A),B) | -open(B,A) # label(not_blocked) # label(axiom).  [clausify(13)].
Derived: -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | less(C,f4(A,C,D)).  [resolve(69,a,66,a)].
Derived: -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | open(f4(A,C,D),A).  [resolve(69,a,67,a)].

Eliminating move/2

Eliminating input/1
70 -open(A,B) | input(B) # label(open_restr) # label(axiom).  [clausify(21)].
71 at(f10(A,B,C,D,E),D,f12(A,B,C,D,E)) | at(f11(A,B,C,D,E),D,f12(A,B,C,D,E)) | enter(f11(A,B,C,D,E),D,f12(A,B,C,D,E)) | -empty(f11(A,B,C,D,E),E) | -input(E) | -less(f10(A,B,C,D,E),f11(A,B,C,D,E)) | enter(succ(A),B,C) # label(train_enters) # label(axiom).  [clausify(19)].
Derived: -open(A,B) | at(f10(C,D,E,F,B),F,f12(C,D,E,F,B)) | at(f11(C,D,E,F,B),F,f12(C,D,E,F,B)) | enter(f11(C,D,E,F,B),F,f12(C,D,E,F,B)) | -empty(f11(C,D,E,F,B),B) | -less(f10(C,D,E,F,B),f11(C,D,E,F,B)) | enter(succ(C),D,E).  [resolve(70,b,71,e)].
72 -input(A) | in2 = A | in1 = A # label(input) # label(axiom).  [clausify(22)].
Derived: in2 = A | in1 = A | -open(B,A).  [resolve(72,a,70,b)].

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, open, less, empty, at, occupied, enter, path_free ]).
Function symbol precedence:  function_order([ out1, out2, in1, in2, s1, s2, c1, c2, c3, c4, switch, f1, f2, f3, f13, f14, f15, f16, succ, gate, pred, f5, f6, f17, f18, f4, f7, f8, f9, f10, f11, f12 ]).
After inverse_order:  (no changes).
Unfolding symbols: c4/0.

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      73 -less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].
kept:      74 -less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].
kept:      75 less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].
kept:      76 less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].
kept:      77 less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].
kept:      78 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
kept:      79 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
kept:      80 -at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].
kept:      81 -at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].
kept:      82 -at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].
kept:      83 -enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].
kept:      84 -at(A,B,C) | occupied(A,B,C) # label(occupied) # label(axiom).  [clausify(10)].
kept:      85 -empty(A,B) | -at(A,C,B) # label(node_empty) # label(axiom).  [clausify(11)].
kept:      86 empty(A,B) | at(A,f1(A,B),B) # label(node_empty) # label(axiom).  [clausify(11)].
kept:      87 -at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(14)].
kept:      88 -at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(15)].
kept:      89 -at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(15)].
kept:      90 -occupied(A,B,C) | -occupied(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(16)].
kept:      91 empty(A,B) | switch(A,B) != C | switch(succ(A),B) = C # label(switch_restr) # label(axiom).  [clausify(17)].
kept:      92 -at(A,B,C) | out2 = C | out1 = C | in2 = C | in1 = C | s1 = C | s2 = C # label(at_restr) # label(axiom).  [clausify(20)].
kept:      93 gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(23)].
           94 out1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
kept:      95 out2 != out1.  [copy(94),flip(a)].
kept:      96 in2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
kept:      97 in1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
kept:      98 s1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
kept:      99 s2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
kept:      100 in2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
kept:      101 in1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
kept:      102 s1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
kept:      103 s2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
           104 in1 != in2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
kept:      105 in2 != in1.  [copy(104),flip(a)].
kept:      106 s1 != in2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
kept:      107 s2 != in2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
kept:      108 s1 != in1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
kept:      109 s2 != in1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
kept:      110 s2 != s1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
kept:      111 -occupied(A,B,C) | out2 = C | out1 = C | in2 = C | in1 = C | s1 = C | s2 = C # label(occupied_values) # label(axiom).  [clausify(25)].
kept:      112 -enter(A,B,C) | in2 = C | in1 = C # label(enter_values) # label(axiom).  [clausify(26)].
kept:      113 switch(A,in2) = s2 # label(switch_in2_values) # label(axiom).  [clausify(27)].
kept:      114 switch(A,in1) = s1 # label(switch_in1_values) # label(axiom).  [clausify(28)].
kept:      115 switch(A,s1) = out1 | switch(A,s1) = out2 # label(switch_s1_values) # label(axiom).  [clausify(29)].
kept:      116 switch(A,s2) = out1 | switch(A,s2) = out2 # label(switch_s2_values) # label(axiom).  [clausify(30)].
           117 -occupied(A,B,in2) | gate(B) != out2 | switch(A,in2) = s2 # label(switch_in2_with_gate_out2) # label(axiom).  [clausify(31)].
kept:      118 -occupied(A,B,s2) | gate(B) != out2 | switch(A,s2) = out2 # label(switch_s2_with_gate_out2) # label(axiom).  [clausify(32)].
           119 -occupied(A,B,in2) | gate(B) != out1 | switch(A,in2) = s2 # label(switch_in2_with_gate_out1) # label(axiom).  [clausify(33)].
kept:      120 -occupied(A,B,s2) | gate(B) != out1 | switch(A,s2) = out1 # label(switch_s2_with_gate_out1) # label(axiom).  [clausify(34)].
           121 -occupied(A,B,in1) | gate(B) != out2 | switch(A,in1) = s1 # label(switch_in1_with_gate_out2) # label(axiom).  [clausify(35)].
kept:      122 -occupied(A,B,s1) | gate(B) != out2 | switch(A,s1) = out2 # label(switch_s1_with_gate_out2) # label(axiom).  [clausify(36)].
           123 -occupied(A,B,in1) | gate(B) != out1 | switch(A,in1) = s1 # label(switch_in1_with_gate_out1) # label(axiom).  [clausify(37)].
kept:      124 -occupied(A,B,s1) | gate(B) != out1 | switch(A,s1) = out1 # label(switch_s1_with_gate_out1) # label(axiom).  [clausify(38)].
kept:      125 -enter(f13(A,B),f14(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(39)].
kept:      126 -at(f13(A,B),f14(A,B),in2) | open(f13(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(39)].
kept:      127 -enter(f15(A,B),f16(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(41)].
kept:      128 -at(f15(A,B),f16(A,B),in1) | open(f15(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(41)].
kept:      129 -occupied(succ(A),B,out2) | occupied(A,B,out2) | at(A,B,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
kept:      130 -occupied(succ(A),B,out2) | occupied(A,B,out2) | at(A,B,in2) | open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
kept:      131 -occupied(succ(A),B,out2) | occupied(A,B,out2) | gate(B) = out2 # label(out2_occupied) # label(axiom).  [clausify(49)].
kept:      132 -occupied(succ(A),B,out2) | occupied(A,B,out2) | open(A,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
kept:      133 -occupied(succ(A),B,out2) | occupied(A,B,out2) | open(A,in2) | open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
kept:      134 -occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | at(A,B,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
kept:      135 -occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | at(A,B,in2) | open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
kept:      136 -occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | gate(B) = out2 # label(out2_occupied) # label(axiom).  [clausify(49)].
kept:      137 -occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | open(A,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
kept:      138 -occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | open(A,in2) | open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
kept:      139 occupied(succ(A),B,out2) | -occupied(A,B,out2) | at(A,B,out2) # label(out2_occupied) # label(axiom).  [clausify(49)].
kept:      140 occupied(succ(A),B,out2) | -at(A,B,in2) | gate(B) != out2 | -open(A,in2) # label(out2_occupied) # label(axiom).  [clausify(49)].
kept:      141 occupied(succ(A),B,out2) | -at(A,B,in1) | gate(B) != out2 | -open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
kept:      142 -occupied(succ(A),B,out1) | occupied(A,B,out1) | at(A,B,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
kept:      143 -occupied(succ(A),B,out1) | occupied(A,B,out1) | at(A,B,in2) | open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
kept:      144 -occupied(succ(A),B,out1) | occupied(A,B,out1) | gate(B) = out1 # label(out1_occupied) # label(axiom).  [clausify(50)].
kept:      145 -occupied(succ(A),B,out1) | occupied(A,B,out1) | open(A,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
kept:      146 -occupied(succ(A),B,out1) | occupied(A,B,out1) | open(A,in2) | open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
kept:      147 -occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | at(A,B,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
kept:      148 -occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | at(A,B,in2) | open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
kept:      149 -occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | gate(B) = out1 # label(out1_occupied) # label(axiom).  [clausify(50)].
kept:      150 -occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | open(A,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
kept:      151 -occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | open(A,in2) | open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
kept:      152 occupied(succ(A),B,out1) | -occupied(A,B,out1) | at(A,B,out1) # label(out1_occupied) # label(axiom).  [clausify(50)].
kept:      153 occupied(succ(A),B,out1) | -at(A,B,in2) | gate(B) != out1 | -open(A,in2) # label(out1_occupied) # label(axiom).  [clausify(50)].
kept:      154 occupied(succ(A),B,out1) | -at(A,B,in1) | gate(B) != out1 | -open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
kept:      155 -occupied(succ(A),B,s1) | occupied(A,B,s1) | at(A,B,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].
kept:      156 -occupied(succ(A),B,s1) | occupied(A,B,s1) | open(A,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].
kept:      157 -occupied(succ(A),B,s1) | -at(A,B,s1) | at(succ(A),B,s1) | at(A,B,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].
kept:      158 -occupied(succ(A),B,s1) | -at(A,B,s1) | at(succ(A),B,s1) | open(A,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].
kept:      159 occupied(succ(A),B,s1) | -occupied(A,B,s1) | at(A,B,s1) # label(s1_occupied) # label(axiom).  [clausify(51)].
kept:      160 occupied(succ(A),B,s1) | -at(A,B,in1) | gate(B) != out2 | -open(A,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].
kept:      161 occupied(succ(A),B,s1) | -at(A,B,in1) | gate(B) != out1 | -open(A,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].
kept:      162 -occupied(succ(A),B,s2) | occupied(A,B,s2) | at(A,B,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].
kept:      163 -occupied(succ(A),B,s2) | occupied(A,B,s2) | open(A,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].
kept:      164 -occupied(succ(A),B,s2) | -at(A,B,s2) | at(succ(A),B,s2) | at(A,B,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].
kept:      165 -occupied(succ(A),B,s2) | -at(A,B,s2) | at(succ(A),B,s2) | open(A,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].
kept:      166 occupied(succ(A),B,s2) | -occupied(A,B,s2) | at(A,B,s2) # label(s2_occupied) # label(axiom).  [clausify(52)].
kept:      167 occupied(succ(A),B,s2) | -at(A,B,in2) | gate(B) != out2 | -open(A,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].
kept:      168 occupied(succ(A),B,s2) | -at(A,B,in2) | gate(B) != out1 | -open(A,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].
kept:      169 -path_free(A,B,C,D) | in2 = C | in1 = C # label(path_from_to_values) # label(axiom).  [clausify(53)].
kept:      170 -path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(53)].
kept:      171 -open(A,in2) | path_free(A,f17(A),in2,gate(f17(A))) # label(open_in2) # label(axiom).  [clausify(54)].
kept:      172 open(A,in2) | -path_free(A,B,in2,gate(B)) # label(open_in2) # label(axiom).  [clausify(54)].
kept:      173 -open(A,in1) | path_free(A,f18(A),in1,gate(f18(A))) # label(open_in1) # label(axiom).  [clausify(55)].
kept:      174 open(A,in1) | -path_free(A,B,in1,gate(B)) # label(open_in1) # label(axiom).  [clausify(55)].
kept:      175 -path_free(A,B,in2,out2) | at(A,B,in2) # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
kept:      176 -path_free(A,B,in2,out2) | gate(B) = out2 # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
kept:      177 -path_free(A,B,in2,out2) | -occupied(A,C,in2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
kept:      178 -path_free(A,B,in2,out2) | -occupied(A,C,s2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
kept:      179 -path_free(A,B,in2,out2) | -occupied(A,C,out2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
kept:      180 path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2 | occupied(A,C,in2) | occupied(A,C,s2) | occupied(A,C,out2) # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
           181 path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2 | C != B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
kept:      182 path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2.  [copy(181),xx(d)].
kept:      183 -path_free(A,B,in2,out1) | at(A,B,in2) # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
kept:      184 -path_free(A,B,in2,out1) | gate(B) = out1 # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
kept:      185 -path_free(A,B,in2,out1) | -occupied(A,C,in2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
kept:      186 -path_free(A,B,in2,out1) | -occupied(A,C,s2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
kept:      187 -path_free(A,B,in2,out1) | -occupied(A,C,out1) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
kept:      188 path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1 | occupied(A,C,in2) | occupied(A,C,s2) | occupied(A,C,out1) # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
           189 path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1 | C != B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
kept:      190 path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1.  [copy(189),xx(d)].
kept:      191 -path_free(A,B,in1,out2) | at(A,B,in1) # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
kept:      192 -path_free(A,B,in1,out2) | gate(B) = out2 # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
kept:      193 -path_free(A,B,in1,out2) | -occupied(A,C,in1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
kept:      194 -path_free(A,B,in1,out2) | -occupied(A,C,s1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
kept:      195 -path_free(A,B,in1,out2) | -occupied(A,C,out2) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
kept:      196 path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2 | occupied(A,C,in1) | occupied(A,C,s1) | occupied(A,C,out2) # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
           197 path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2 | C != B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
kept:      198 path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2.  [copy(197),xx(d)].
kept:      199 -path_free(A,B,in1,out1) | at(A,B,in1) # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
kept:      200 -path_free(A,B,in1,out1) | gate(B) = out1 # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
kept:      201 -path_free(A,B,in1,out1) | -occupied(A,C,in1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
kept:      202 -path_free(A,B,in1,out1) | -occupied(A,C,s1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
kept:      203 -path_free(A,B,in1,out1) | -occupied(A,C,out1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
kept:      204 path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1 | occupied(A,C,in1) | occupied(A,C,s1) | occupied(A,C,out1) # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
           205 path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1 | C != B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
kept:      206 path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1.  [copy(205),xx(d)].
kept:      207 at(c1,c2,c3) # label(switch_critical) # label(conjecture).  [deny(60)].
           208 switch(c1,c3) = c4 # label(switch_critical) # label(conjecture).  [deny(60)].
kept:      209 c4 = switch(c1,c3).  [copy(208),flip(a)].
kept:      210 at(succ(c1),c2,c3) # label(switch_critical) # label(conjecture).  [deny(60)].
           211 switch(succ(c1),c3) != c4 # label(switch_critical) # label(conjecture).  [deny(60)].
kept:      212 switch(succ(c1),c3) != switch(c1,c3).  [copy(211),rewrite([209(5)])].
kept:      213 at(A,f2(A,B),B) | -at(A,C,B) | -at(A,D,B) | D = C.  [resolve(61,a,62,a)].
kept:      214 at(A,f3(A,B),B) | -at(A,C,B) | -at(A,D,B) | D = C.  [resolve(63,a,62,a)].
kept:      215 f3(A,B) != f2(A,B) | -at(A,C,B) | -at(A,D,B) | D = C.  [resolve(64,a,62,a)].
kept:      216 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(65,a,66,a)].
kept:      217 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(65,a,67,a)].
kept:      218 -open(f5(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(68,a,66,a)].
kept:      219 -open(f5(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(68,a,67,a)].
kept:      220 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | less(C,f4(A,C,D)).  [resolve(69,a,66,a)].
kept:      221 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | open(f4(A,C,D),A).  [resolve(69,a,67,a)].
kept:      222 -open(A,B) | at(f10(C,D,E,F,B),F,f12(C,D,E,F,B)) | at(f11(C,D,E,F,B),F,f12(C,D,E,F,B)) | enter(f11(C,D,E,F,B),F,f12(C,D,E,F,B)) | -empty(f11(C,D,E,F,B),B) | -less(f10(C,D,E,F,B),f11(C,D,E,F,B)) | enter(succ(C),D,E).  [resolve(70,b,71,e)].
kept:      223 in2 = A | in1 = A | -open(B,A).  [resolve(72,a,70,b)].
kept:      224 less(A,A).  [factor(75,a,b)].

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

% Clauses after input processing:

formulas(usable).
end_of_list.

formulas(sos).
73 -less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].
74 -less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].
75 less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].
76 less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].
77 less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].
78 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
79 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
80 -at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].
81 -at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].
82 -at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].
83 -enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].
84 -at(A,B,C) | occupied(A,B,C) # label(occupied) # label(axiom).  [clausify(10)].
85 -empty(A,B) | -at(A,C,B) # label(node_empty) # label(axiom).  [clausify(11)].
86 empty(A,B) | at(A,f1(A,B),B) # label(node_empty) # label(axiom).  [clausify(11)].
87 -at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(14)].
88 -at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(15)].
89 -at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(15)].
90 -occupied(A,B,C) | -occupied(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(16)].
91 empty(A,B) | switch(A,B) != C | switch(succ(A),B) = C # label(switch_restr) # label(axiom).  [clausify(17)].
92 -at(A,B,C) | out2 = C | out1 = C | in2 = C | in1 = C | s1 = C | s2 = C # label(at_restr) # label(axiom).  [clausify(20)].
93 gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(23)].
95 out2 != out1.  [copy(94),flip(a)].
96 in2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
97 in1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
98 s1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
99 s2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
100 in2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
101 in1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
102 s1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
103 s2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
105 in2 != in1.  [copy(104),flip(a)].
106 s1 != in2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
107 s2 != in2 # label(distinct_nodes) # label(axiom).  [clausify(24)].
108 s1 != in1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
109 s2 != in1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
110 s2 != s1 # label(distinct_nodes) # label(axiom).  [clausify(24)].
111 -occupied(A,B,C) | out2 = C | out1 = C | in2 = C | in1 = C | s1 = C | s2 = C # label(occupied_values) # label(axiom).  [clausify(25)].
112 -enter(A,B,C) | in2 = C | in1 = C # label(enter_values) # label(axiom).  [clausify(26)].
113 switch(A,in2) = s2 # label(switch_in2_values) # label(axiom).  [clausify(27)].
114 switch(A,in1) = s1 # label(switch_in1_values) # label(axiom).  [clausify(28)].
115 switch(A,s1) = out1 | switch(A,s1) = out2 # label(switch_s1_values) # label(axiom).  [clausify(29)].
116 switch(A,s2) = out1 | switch(A,s2) = out2 # label(switch_s2_values) # label(axiom).  [clausify(30)].
118 -occupied(A,B,s2) | gate(B) != out2 | switch(A,s2) = out2 # label(switch_s2_with_gate_out2) # label(axiom).  [clausify(32)].
120 -occupied(A,B,s2) | gate(B) != out1 | switch(A,s2) = out1 # label(switch_s2_with_gate_out1) # label(axiom).  [clausify(34)].
122 -occupied(A,B,s1) | gate(B) != out2 | switch(A,s1) = out2 # label(switch_s1_with_gate_out2) # label(axiom).  [clausify(36)].
124 -occupied(A,B,s1) | gate(B) != out1 | switch(A,s1) = out1 # label(switch_s1_with_gate_out1) # label(axiom).  [clausify(38)].
125 -enter(f13(A,B),f14(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(39)].
126 -at(f13(A,B),f14(A,B),in2) | open(f13(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(39)].
127 -enter(f15(A,B),f16(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(41)].
128 -at(f15(A,B),f16(A,B),in1) | open(f15(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(41)].
129 -occupied(succ(A),B,out2) | occupied(A,B,out2) | at(A,B,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
130 -occupied(succ(A),B,out2) | occupied(A,B,out2) | at(A,B,in2) | open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
131 -occupied(succ(A),B,out2) | occupied(A,B,out2) | gate(B) = out2 # label(out2_occupied) # label(axiom).  [clausify(49)].
132 -occupied(succ(A),B,out2) | occupied(A,B,out2) | open(A,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
133 -occupied(succ(A),B,out2) | occupied(A,B,out2) | open(A,in2) | open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
134 -occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | at(A,B,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
135 -occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | at(A,B,in2) | open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
136 -occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | gate(B) = out2 # label(out2_occupied) # label(axiom).  [clausify(49)].
137 -occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | open(A,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
138 -occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | open(A,in2) | open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
139 occupied(succ(A),B,out2) | -occupied(A,B,out2) | at(A,B,out2) # label(out2_occupied) # label(axiom).  [clausify(49)].
140 occupied(succ(A),B,out2) | -at(A,B,in2) | gate(B) != out2 | -open(A,in2) # label(out2_occupied) # label(axiom).  [clausify(49)].
141 occupied(succ(A),B,out2) | -at(A,B,in1) | gate(B) != out2 | -open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].
142 -occupied(succ(A),B,out1) | occupied(A,B,out1) | at(A,B,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
143 -occupied(succ(A),B,out1) | occupied(A,B,out1) | at(A,B,in2) | open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
144 -occupied(succ(A),B,out1) | occupied(A,B,out1) | gate(B) = out1 # label(out1_occupied) # label(axiom).  [clausify(50)].
145 -occupied(succ(A),B,out1) | occupied(A,B,out1) | open(A,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
146 -occupied(succ(A),B,out1) | occupied(A,B,out1) | open(A,in2) | open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
147 -occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | at(A,B,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
148 -occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | at(A,B,in2) | open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
149 -occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | gate(B) = out1 # label(out1_occupied) # label(axiom).  [clausify(50)].
150 -occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | open(A,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
151 -occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | open(A,in2) | open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
152 occupied(succ(A),B,out1) | -occupied(A,B,out1) | at(A,B,out1) # label(out1_occupied) # label(axiom).  [clausify(50)].
153 occupied(succ(A),B,out1) | -at(A,B,in2) | gate(B) != out1 | -open(A,in2) # label(out1_occupied) # label(axiom).  [clausify(50)].
154 occupied(succ(A),B,out1) | -at(A,B,in1) | gate(B) != out1 | -open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].
155 -occupied(succ(A),B,s1) | occupied(A,B,s1) | at(A,B,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].
156 -occupied(succ(A),B,s1) | occupied(A,B,s1) | open(A,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].
157 -occupied(succ(A),B,s1) | -at(A,B,s1) | at(succ(A),B,s1) | at(A,B,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].
158 -occupied(succ(A),B,s1) | -at(A,B,s1) | at(succ(A),B,s1) | open(A,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].
159 occupied(succ(A),B,s1) | -occupied(A,B,s1) | at(A,B,s1) # label(s1_occupied) # label(axiom).  [clausify(51)].
160 occupied(succ(A),B,s1) | -at(A,B,in1) | gate(B) != out2 | -open(A,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].
161 occupied(succ(A),B,s1) | -at(A,B,in1) | gate(B) != out1 | -open(A,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].
162 -occupied(succ(A),B,s2) | occupied(A,B,s2) | at(A,B,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].
163 -occupied(succ(A),B,s2) | occupied(A,B,s2) | open(A,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].
164 -occupied(succ(A),B,s2) | -at(A,B,s2) | at(succ(A),B,s2) | at(A,B,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].
165 -occupied(succ(A),B,s2) | -at(A,B,s2) | at(succ(A),B,s2) | open(A,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].
166 occupied(succ(A),B,s2) | -occupied(A,B,s2) | at(A,B,s2) # label(s2_occupied) # label(axiom).  [clausify(52)].
167 occupied(succ(A),B,s2) | -at(A,B,in2) | gate(B) != out2 | -open(A,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].
168 occupied(succ(A),B,s2) | -at(A,B,in2) | gate(B) != out1 | -open(A,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].
169 -path_free(A,B,C,D) | in2 = C | in1 = C # label(path_from_to_values) # label(axiom).  [clausify(53)].
170 -path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(53)].
171 -open(A,in2) | path_free(A,f17(A),in2,gate(f17(A))) # label(open_in2) # label(axiom).  [clausify(54)].
172 open(A,in2) | -path_free(A,B,in2,gate(B)) # label(open_in2) # label(axiom).  [clausify(54)].
173 -open(A,in1) | path_free(A,f18(A),in1,gate(f18(A))) # label(open_in1) # label(axiom).  [clausify(55)].
174 open(A,in1) | -path_free(A,B,in1,gate(B)) # label(open_in1) # label(axiom).  [clausify(55)].
175 -path_free(A,B,in2,out2) | at(A,B,in2) # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
176 -path_free(A,B,in2,out2) | gate(B) = out2 # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
177 -path_free(A,B,in2,out2) | -occupied(A,C,in2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
178 -path_free(A,B,in2,out2) | -occupied(A,C,s2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
179 -path_free(A,B,in2,out2) | -occupied(A,C,out2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].
182 path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2.  [copy(181),xx(d)].
183 -path_free(A,B,in2,out1) | at(A,B,in2) # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
184 -path_free(A,B,in2,out1) | gate(B) = out1 # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
185 -path_free(A,B,in2,out1) | -occupied(A,C,in2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
186 -path_free(A,B,in2,out1) | -occupied(A,C,s2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
187 -path_free(A,B,in2,out1) | -occupied(A,C,out1) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].
190 path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1.  [copy(189),xx(d)].
191 -path_free(A,B,in1,out2) | at(A,B,in1) # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
192 -path_free(A,B,in1,out2) | gate(B) = out2 # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
193 -path_free(A,B,in1,out2) | -occupied(A,C,in1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
194 -path_free(A,B,in1,out2) | -occupied(A,C,s1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
195 -path_free(A,B,in1,out2) | -occupied(A,C,out2) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].
198 path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2.  [copy(197),xx(d)].
199 -path_free(A,B,in1,out1) | at(A,B,in1) # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
200 -path_free(A,B,in1,out1) | gate(B) = out1 # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
201 -path_free(A,B,in1,out1) | -occupied(A,C,in1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
202 -path_free(A,B,in1,out1) | -occupied(A,C,s1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
203 -path_free(A,B,in1,out1) | -occupied(A,C,out1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].
206 path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1.  [copy(205),xx(d)].
207 at(c1,c2,c3) # label(switch_critical) # label(conjecture).  [deny(60)].
209 c4 = switch(c1,c3).  [copy(208),flip(a)].
210 at(succ(c1),c2,c3) # label(switch_critical) # label(conjecture).  [deny(60)].
212 switch(succ(c1),c3) != switch(c1,c3).  [copy(211),rewrite([209(5)])].
213 at(A,f2(A,B),B) | -at(A,C,B) | -at(A,D,B) | D = C.  [resolve(61,a,62,a)].
214 at(A,f3(A,B),B) | -at(A,C,B) | -at(A,D,B) | D = C.  [resolve(63,a,62,a)].
215 f3(A,B) != f2(A,B) | -at(A,C,B) | -at(A,D,B) | D = C.  [resolve(64,a,62,a)].
216 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(65,a,66,a)].
217 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(65,a,67,a)].
218 -open(f5(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(68,a,66,a)].
219 -open(f5(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(68,a,67,a)].
220 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | less(C,f4(A,C,D)).  [resolve(69,a,66,a)].
221 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | open(f4(A,C,D),A).  [resolve(69,a,67,a)].
222 -open(A,B) | at(f10(C,D,E,F,B),F,f12(C,D,E,F,B)) | at(f11(C,D,E,F,B),F,f12(C,D,E,F,B)) | enter(f11(C,D,E,F,B),F,f12(C,D,E,F,B)) | -empty(f11(C,D,E,F,B),B) | -less(f10(C,D,E,F,B),f11(C,D,E,F,B)) | enter(succ(C),D,E).  [resolve(70,b,71,e)].
223 in2 = A | in1 = A | -open(B,A).  [resolve(72,a,70,b)].
224 less(A,A).  [factor(75,a,b)].
end_of_list.

formulas(demodulators).
78 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
79 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
113 switch(A,in2) = s2 # label(switch_in2_values) # label(axiom).  [clausify(27)].
114 switch(A,in1) = s1 # label(switch_in1_values) # label(axiom).  [clausify(28)].
209 c4 = switch(c1,c3).  [copy(208),flip(a)].
end_of_list.

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.02 seconds.

given #1 (I,wt=9): 73 -less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].

given #2 (I,wt=9): 74 -less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].

given #3 (I,wt=6): 75 less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].

given #4 (I,wt=4): 76 less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].

given #5 (I,wt=7): 77 less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].

given #6 (I,wt=5): 78 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].

given #7 (I,wt=5): 79 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].

given #8 (I,wt=11): 80 -at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].

given #9 (I,wt=8): 81 -at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].

given #10 (I,wt=8): 82 -at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].

given #11 (I,wt=11): 83 -enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].

given #12 (I,wt=8): 84 -at(A,B,C) | occupied(A,B,C) # label(occupied) # label(axiom).  [clausify(10)].

given #13 (I,wt=7): 85 -empty(A,B) | -at(A,C,B) # label(node_empty) # label(axiom).  [clausify(11)].

given #14 (I,wt=9): 86 empty(A,B) | at(A,f1(A,B),B) # label(node_empty) # label(axiom).  [clausify(11)].

given #15 (I,wt=10): 87 -at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(14)].

given #16 (I,wt=14): 88 -at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(15)].

given #17 (I,wt=10): 89 -at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(15)].

given #18 (I,wt=11): 90 -occupied(A,B,C) | -occupied(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(16)].

given #19 (I,wt=14): 91 empty(A,B) | switch(A,B) != C | switch(succ(A),B) = C # label(switch_restr) # label(axiom).  [clausify(17)].

given #20 (I,wt=22): 92 -at(A,B,C) | out2 = C | out1 = C | in2 = C | in1 = C | s1 = C | s2 = C # label(at_restr) # label(axiom).  [clausify(20)].

given #21 (I,wt=8): 93 gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(23)].

given #22 (I,wt=3): 95 out2 != out1.  [copy(94),flip(a)].

given #23 (I,wt=3): 96 in2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(24)].

given #24 (I,wt=3): 97 in1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(24)].

given #25 (I,wt=3): 98 s1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(24)].

given #26 (I,wt=3): 99 s2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(24)].

given #27 (I,wt=3): 100 in2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(24)].

given #28 (I,wt=3): 101 in1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(24)].

given #29 (I,wt=3): 102 s1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(24)].

given #30 (I,wt=3): 103 s2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(24)].

given #31 (I,wt=3): 105 in2 != in1.  [copy(104),flip(a)].

given #32 (I,wt=3): 106 s1 != in2 # label(distinct_nodes) # label(axiom).  [clausify(24)].

given #33 (I,wt=3): 107 s2 != in2 # label(distinct_nodes) # label(axiom).  [clausify(24)].

given #34 (I,wt=3): 108 s1 != in1 # label(distinct_nodes) # label(axiom).  [clausify(24)].

given #35 (I,wt=3): 109 s2 != in1 # label(distinct_nodes) # label(axiom).  [clausify(24)].

given #36 (I,wt=3): 110 s2 != s1 # label(distinct_nodes) # label(axiom).  [clausify(24)].

given #37 (I,wt=22): 111 -occupied(A,B,C) | out2 = C | out1 = C | in2 = C | in1 = C | s1 = C | s2 = C # label(occupied_values) # label(axiom).  [clausify(25)].

given #38 (I,wt=10): 112 -enter(A,B,C) | in2 = C | in1 = C # label(enter_values) # label(axiom).  [clausify(26)].

given #39 (I,wt=5): 113 switch(A,in2) = s2 # label(switch_in2_values) # label(axiom).  [clausify(27)].

given #40 (I,wt=5): 114 switch(A,in1) = s1 # label(switch_in1_values) # label(axiom).  [clausify(28)].

given #41 (I,wt=10): 115 switch(A,s1) = out1 | switch(A,s1) = out2 # label(switch_s1_values) # label(axiom).  [clausify(29)].

given #42 (I,wt=10): 116 switch(A,s2) = out1 | switch(A,s2) = out2 # label(switch_s2_values) # label(axiom).  [clausify(30)].

given #43 (I,wt=13): 118 -occupied(A,B,s2) | gate(B) != out2 | switch(A,s2) = out2 # label(switch_s2_with_gate_out2) # label(axiom).  [clausify(32)].

given #44 (I,wt=13): 120 -occupied(A,B,s2) | gate(B) != out1 | switch(A,s2) = out1 # label(switch_s2_with_gate_out1) # label(axiom).  [clausify(34)].

given #45 (I,wt=13): 122 -occupied(A,B,s1) | gate(B) != out2 | switch(A,s1) = out2 # label(switch_s1_with_gate_out2) # label(axiom).  [clausify(36)].

given #46 (I,wt=13): 124 -occupied(A,B,s1) | gate(B) != out1 | switch(A,s1) = out1 # label(switch_s1_with_gate_out1) # label(axiom).  [clausify(38)].

given #47 (I,wt=13): 125 -enter(f13(A,B),f14(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(39)].

given #48 (I,wt=18): 126 -at(f13(A,B),f14(A,B),in2) | open(f13(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(39)].

given #49 (I,wt=13): 127 -enter(f15(A,B),f16(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(41)].

given #50 (I,wt=18): 128 -at(f15(A,B),f16(A,B),in1) | open(f15(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(41)].

given #51 (I,wt=17): 129 -occupied(succ(A),B,out2) | occupied(A,B,out2) | at(A,B,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].

given #52 (I,wt=16): 130 -occupied(succ(A),B,out2) | occupied(A,B,out2) | at(A,B,in2) | open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].

given #53 (I,wt=13): 131 -occupied(succ(A),B,out2) | occupied(A,B,out2) | gate(B) = out2 # label(out2_occupied) # label(axiom).  [clausify(49)].

given #54 (I,wt=16): 132 -occupied(succ(A),B,out2) | occupied(A,B,out2) | open(A,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].

given #55 (I,wt=15): 133 -occupied(succ(A),B,out2) | occupied(A,B,out2) | open(A,in2) | open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].

given #56 (I,wt=22): 134 -occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | at(A,B,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].

given #57 (I,wt=21): 135 -occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | at(A,B,in2) | open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].

given #58 (I,wt=18): 136 -occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | gate(B) = out2 # label(out2_occupied) # label(axiom).  [clausify(49)].

given #59 (I,wt=21): 137 -occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | open(A,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].

given #60 (I,wt=20): 138 -occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | open(A,in2) | open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].

given #61 (I,wt=13): 139 occupied(succ(A),B,out2) | -occupied(A,B,out2) | at(A,B,out2) # label(out2_occupied) # label(axiom).  [clausify(49)].

given #62 (I,wt=16): 140 occupied(succ(A),B,out2) | -at(A,B,in2) | gate(B) != out2 | -open(A,in2) # label(out2_occupied) # label(axiom).  [clausify(49)].

given #63 (I,wt=16): 141 occupied(succ(A),B,out2) | -at(A,B,in1) | gate(B) != out2 | -open(A,in1) # label(out2_occupied) # label(axiom).  [clausify(49)].

given #64 (I,wt=17): 142 -occupied(succ(A),B,out1) | occupied(A,B,out1) | at(A,B,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].

given #65 (I,wt=16): 143 -occupied(succ(A),B,out1) | occupied(A,B,out1) | at(A,B,in2) | open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].

given #66 (I,wt=13): 144 -occupied(succ(A),B,out1) | occupied(A,B,out1) | gate(B) = out1 # label(out1_occupied) # label(axiom).  [clausify(50)].

given #67 (I,wt=16): 145 -occupied(succ(A),B,out1) | occupied(A,B,out1) | open(A,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].

given #68 (I,wt=15): 146 -occupied(succ(A),B,out1) | occupied(A,B,out1) | open(A,in2) | open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].

given #69 (I,wt=22): 147 -occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | at(A,B,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].

given #70 (I,wt=21): 148 -occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | at(A,B,in2) | open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].

given #71 (I,wt=18): 149 -occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | gate(B) = out1 # label(out1_occupied) # label(axiom).  [clausify(50)].

given #72 (I,wt=21): 150 -occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | open(A,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].

given #73 (I,wt=20): 151 -occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | open(A,in2) | open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].

given #74 (I,wt=13): 152 occupied(succ(A),B,out1) | -occupied(A,B,out1) | at(A,B,out1) # label(out1_occupied) # label(axiom).  [clausify(50)].

given #75 (I,wt=16): 153 occupied(succ(A),B,out1) | -at(A,B,in2) | gate(B) != out1 | -open(A,in2) # label(out1_occupied) # label(axiom).  [clausify(50)].

given #76 (I,wt=16): 154 occupied(succ(A),B,out1) | -at(A,B,in1) | gate(B) != out1 | -open(A,in1) # label(out1_occupied) # label(axiom).  [clausify(50)].

given #77 (I,wt=13): 155 -occupied(succ(A),B,s1) | occupied(A,B,s1) | at(A,B,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].

given #78 (I,wt=12): 156 -occupied(succ(A),B,s1) | occupied(A,B,s1) | open(A,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].

given #79 (I,wt=18): 157 -occupied(succ(A),B,s1) | -at(A,B,s1) | at(succ(A),B,s1) | at(A,B,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].

given #80 (I,wt=17): 158 -occupied(succ(A),B,s1) | -at(A,B,s1) | at(succ(A),B,s1) | open(A,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].

given #81 (I,wt=13): 159 occupied(succ(A),B,s1) | -occupied(A,B,s1) | at(A,B,s1) # label(s1_occupied) # label(axiom).  [clausify(51)].

given #82 (I,wt=16): 160 occupied(succ(A),B,s1) | -at(A,B,in1) | gate(B) != out2 | -open(A,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].

given #83 (I,wt=16): 161 occupied(succ(A),B,s1) | -at(A,B,in1) | gate(B) != out1 | -open(A,in1) # label(s1_occupied) # label(axiom).  [clausify(51)].

given #84 (I,wt=13): 162 -occupied(succ(A),B,s2) | occupied(A,B,s2) | at(A,B,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].

given #85 (I,wt=12): 163 -occupied(succ(A),B,s2) | occupied(A,B,s2) | open(A,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].

given #86 (I,wt=18): 164 -occupied(succ(A),B,s2) | -at(A,B,s2) | at(succ(A),B,s2) | at(A,B,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].

given #87 (I,wt=17): 165 -occupied(succ(A),B,s2) | -at(A,B,s2) | at(succ(A),B,s2) | open(A,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].

given #88 (I,wt=13): 166 occupied(succ(A),B,s2) | -occupied(A,B,s2) | at(A,B,s2) # label(s2_occupied) # label(axiom).  [clausify(52)].

given #89 (I,wt=16): 167 occupied(succ(A),B,s2) | -at(A,B,in2) | gate(B) != out2 | -open(A,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].

given #90 (I,wt=16): 168 occupied(succ(A),B,s2) | -at(A,B,in2) | gate(B) != out1 | -open(A,in2) # label(s2_occupied) # label(axiom).  [clausify(52)].

given #91 (I,wt=11): 169 -path_free(A,B,C,D) | in2 = C | in1 = C # label(path_from_to_values) # label(axiom).  [clausify(53)].

given #92 (I,wt=11): 170 -path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(53)].

given #93 (I,wt=11): 171 -open(A,in2) | path_free(A,f17(A),in2,gate(f17(A))) # label(open_in2) # label(axiom).  [clausify(54)].

given #94 (I,wt=9): 172 open(A,in2) | -path_free(A,B,in2,gate(B)) # label(open_in2) # label(axiom).  [clausify(54)].

given #95 (I,wt=11): 173 -open(A,in1) | path_free(A,f18(A),in1,gate(f18(A))) # label(open_in1) # label(axiom).  [clausify(55)].

given #96 (I,wt=9): 174 open(A,in1) | -path_free(A,B,in1,gate(B)) # label(open_in1) # label(axiom).  [clausify(55)].

given #97 (I,wt=9): 175 -path_free(A,B,in2,out2) | at(A,B,in2) # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].

given #98 (I,wt=9): 176 -path_free(A,B,in2,out2) | gate(B) = out2 # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].

given #99 (I,wt=12): 177 -path_free(A,B,in2,out2) | -occupied(A,C,in2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].

given #100 (I,wt=12): 178 -path_free(A,B,in2,out2) | -occupied(A,C,s2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].

given #101 (I,wt=12): 179 -path_free(A,B,in2,out2) | -occupied(A,C,out2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(56)].

given #102 (I,wt=13): 182 path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2.  [copy(181),xx(d)].

given #103 (I,wt=9): 183 -path_free(A,B,in2,out1) | at(A,B,in2) # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].

given #104 (I,wt=9): 184 -path_free(A,B,in2,out1) | gate(B) = out1 # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].

given #105 (I,wt=12): 185 -path_free(A,B,in2,out1) | -occupied(A,C,in2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].

given #106 (I,wt=12): 186 -path_free(A,B,in2,out1) | -occupied(A,C,s2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].

given #107 (I,wt=12): 187 -path_free(A,B,in2,out1) | -occupied(A,C,out1) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(57)].

given #108 (I,wt=13): 190 path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1.  [copy(189),xx(d)].

given #109 (I,wt=9): 191 -path_free(A,B,in1,out2) | at(A,B,in1) # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].

given #110 (I,wt=9): 192 -path_free(A,B,in1,out2) | gate(B) = out2 # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].

given #111 (I,wt=12): 193 -path_free(A,B,in1,out2) | -occupied(A,C,in1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].

given #112 (I,wt=12): 194 -path_free(A,B,in1,out2) | -occupied(A,C,s1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].

given #113 (I,wt=12): 195 -path_free(A,B,in1,out2) | -occupied(A,C,out2) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(58)].

given #114 (I,wt=13): 198 path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2.  [copy(197),xx(d)].

given #115 (I,wt=9): 199 -path_free(A,B,in1,out1) | at(A,B,in1) # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].

given #116 (I,wt=9): 200 -path_free(A,B,in1,out1) | gate(B) = out1 # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].

given #117 (I,wt=12): 201 -path_free(A,B,in1,out1) | -occupied(A,C,in1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].

given #118 (I,wt=12): 202 -path_free(A,B,in1,out1) | -occupied(A,C,s1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].

given #119 (I,wt=12): 203 -path_free(A,B,in1,out1) | -occupied(A,C,out1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(59)].

given #120 (I,wt=13): 206 path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1.  [copy(205),xx(d)].

given #121 (I,wt=4): 207 at(c1,c2,c3) # label(switch_critical) # label(conjecture).  [deny(60)].

given #122 (I,wt=5): 209 c4 = switch(c1,c3).  [copy(208),flip(a)].

============================== PROOF =================================

% Proof 1 at 0.02 (+ 0.00) seconds.
% Length of proof is 12.
% Level of proof is 4.
% Maximum clause weight is 14.000.
% Given clauses 122.

11 (all T all N (empty(T,N) <-> (all Train -at(T,Train,N)))) # label(node_empty) # label(axiom) # label(non_clause).  [assumption].
17 (all T all N1 all N2 (-empty(T,N1) & switch(T,N1) = N2 -> switch(succ(T),N1) = N2)) # label(switch_restr) # label(axiom) # label(non_clause).  [assumption].
60 (all T all Train all N1 all N2 (at(T,Train,N1) & switch(T,N1) = N2 -> -(at(succ(T),Train,N1) & switch(succ(T),N1) != N2))) # label(switch_critical) # label(conjecture) # label(non_clause) # label(goal).  [goal].
85 -empty(A,B) | -at(A,C,B) # label(node_empty) # label(axiom).  [clausify(11)].
91 empty(A,B) | switch(A,B) != C | switch(succ(A),B) = C # label(switch_restr) # label(axiom).  [clausify(17)].
207 at(c1,c2,c3) # label(switch_critical) # label(conjecture).  [deny(60)].
208 switch(c1,c3) = c4 # label(switch_critical) # label(conjecture).  [deny(60)].
209 c4 = switch(c1,c3).  [copy(208),flip(a)].
211 switch(succ(c1),c3) != c4 # label(switch_critical) # label(conjecture).  [deny(60)].
212 switch(succ(c1),c3) != switch(c1,c3).  [copy(211),rewrite([209(5)])].
295 -empty(c1,c3).  [resolve(207,a,85,b)].
298 $F.  [resolve(209,a,91,b(flip)),rewrite([209(8)]),unit_del(a,295),unit_del(b,212)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=122. Generated=265. Kept=213. proofs=1.
Usable=122. Sos=87. Demods=5. Limbo=0, Disabled=169. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=51. Back_subsumed=4.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=5 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=2956. Demod_rewrites=26.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=94. Nonunit_bsub_feature_tests=256.
Megabytes=1.06.
User_CPU=0.02, System_CPU=0.00, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 60636 exit (max_proofs) Thu Jul  6 16:07:27 2017
