============================== Mace4 =================================
Mace4 (64) version 2009-11A, November 2009.
Process 60886 was started by mac on Filip-MacBook-Pro.local,
Thu Jul  6 16:14:32 2017
The command was "./mace4".
============================== end of head ===========================

============================== INPUT =================================
set(prolog_style_variables).

formulas(assumptions).
(all X all Y (less(X,Y) & less(Y,X) -> X = Y)) # label(antisymmetry) # label(axiom).
(all X all Y all Z (less(X,Y) & less(Y,Z) -> less(X,Z))) # label(transitivity) # label(axiom).
(all X all Y (less(X,Y) | less(Y,X))) # label(totality) # label(axiom).
(all X (less(X,succ(X)) & (all Y (less(Y,X) | less(succ(X),Y))))) # label(succ) # label(axiom).
(all X (pred(succ(X)) = X & succ(pred(X)) = X)) # label(pred) # label(axiom).
(all T all Train all N1 all N2 (at(T,Train,N1) & at(T,Train,N2) -> N1 = N2)) # label(at_uniq) # label(axiom).
(all T all Train all N all OtherN (at(T,Train,N) -> -enter(T,Train,OtherN))) # label(at_nondup) # label(axiom).
(all T all Train all OtherTrain all N (at(T,Train,N) -> -enter(T,OtherTrain,N))) # label(input_nocol) # label(axiom).
(all T all Train all OtherTrain all N (enter(T,Train,N) & enter(T,OtherTrain,N) -> Train = OtherTrain)) # label(enter_uniq) # label(axiom).
(all T all Train all N (at(T,Train,N) -> occupied(T,Train,N))) # label(occupied) # label(axiom).
(all T all N (empty(T,N) <-> (all Train -at(T,Train,N)))) # label(node_empty) # label(axiom).
(all T all N (safe(T,N) <-> (all Train all OtherTrain (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)))) # label(node_safe) # label(axiom).
(all N (notBlocked(N) <-> (all T1 all Train (at(T1,Train,N) & -open(T1,N) -> (exists T2 (less(T1,T2) & open(T2,N))))))) # label(not_blocked) # label(axiom).
(all T1 all Train all N (at(T1,Train,N) -> (exists T2 (move(T2,Train) & less(T1,T2))))) # label(train_will_move) # label(axiom).
(all T1 all Train all N1 (at(T1,Train,N1) -> (exists T2 exists N2 (enter(T2,Train,N2) & less(T2,T1))))) # label(train_entered) # label(axiom).
(all T all Train all OtherTrain all N (occupied(T,Train,N) & occupied(T,OtherTrain,N) -> Train = OtherTrain)) # label(occupied_only_once) # label(axiom).
(all T all N1 all N2 (-empty(T,N1) & switch(T,N1) = N2 -> switch(succ(T),N1) = N2)) # label(switch_restr) # label(axiom).
(all T all Train move(T,Train)) # label(train_moves) # label(axiom).
(exists Train exists N1 all T1 all T2 all N2 (-at(T1,Train,N2) & -at(T2,Train,N2) & -enter(T2,Train,N2) & empty(T2,N1) & input(N1) & less(T1,T2))) -> enter(succ(T2),Train,N1) # label(train_enters) # label(axiom).
(all T all Train all N (at(T,Train,N) -> N = out2 | N = out1 | N = in2 | N = in1 | N = s1 | N = s2)) # label(at_restr) # label(axiom).
(all T all N (open(T,N) -> input(N))) # label(open_restr) # label(axiom).
(all N (input(N) -> N = in2 | N = in1)) # label(input) # label(axiom).
(all Train (gate(Train) = out2 | gate(Train) = out1)) # label(gate_restr) # label(axiom).
out2 != out1 & out2 != in2 & out2 != in1 & out2 != s1 & out2 != s2 & out1 != in2 & out1 != in1 & out1 != s1 & out1 != s2 & in2 != in1 & in2 != s1 & in2 != s2 & in1 != s1 & in1 != s2 & s1 != s2 # label(distinct_nodes) # label(axiom).
(all T all Train all N (occupied(T,Train,N) -> N = out2 | N = out1 | N = in2 | N = in1 | N = s1 | N = s2)) # label(occupied_values) # label(axiom).
(all T all Train all N (enter(T,Train,N) -> N = in2 | N = in1)) # label(enter_values) # label(axiom).
(all T switch(T,in2) = s2) # label(switch_in2_values) # label(axiom).
(all T switch(T,in1) = s1) # label(switch_in1_values) # label(axiom).
(all T (switch(T,s1) = out1 | switch(T,s1) = out2)) # label(switch_s1_values) # label(axiom).
(all T (switch(T,s2) = out1 | switch(T,s2) = out2)) # label(switch_s2_values) # label(axiom).
(all T all Train (occupied(T,Train,in2) & gate(Train) = out2 -> switch(T,in2) = s2)) # label(switch_in2_with_gate_out2) # label(axiom).
(all T all Train (occupied(T,Train,s2) & gate(Train) = out2 -> switch(T,s2) = out2)) # label(switch_s2_with_gate_out2) # label(axiom).
(all T all Train (occupied(T,Train,in2) & gate(Train) = out1 -> switch(T,in2) = s2)) # label(switch_in2_with_gate_out1) # label(axiom).
(all T all Train (occupied(T,Train,s2) & gate(Train) = out1 -> switch(T,s2) = out1)) # label(switch_s2_with_gate_out1) # label(axiom).
(all T all Train (occupied(T,Train,in1) & gate(Train) = out2 -> switch(T,in1) = s1)) # label(switch_in1_with_gate_out2) # label(axiom).
(all T all Train (occupied(T,Train,s1) & gate(Train) = out2 -> switch(T,s1) = out2)) # label(switch_s1_with_gate_out2) # label(axiom).
(all T all Train (occupied(T,Train,in1) & gate(Train) = out1 -> switch(T,in1) = s1)) # label(switch_in1_with_gate_out1) # label(axiom).
(all T all Train (occupied(T,Train,s1) & gate(Train) = out1 -> switch(T,s1) = out1)) # label(switch_s1_with_gate_out1) # label(axiom).
(all T all Train (enter(T,Train,in2) | at(T,Train,in2) & -open(T,in2))) -> at(succ(T),Train,in2) # label(enter_or_wait_at_in2) # label(axiom).
(all T all Train ((at(T,Train,in2) & open(T,in2) & move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,in2) & open(T,in2) & -move(T,Train) -> at(succ(T),Train,in2)))) # label(move_or_stay_from_in2_to_s2) # label(axiom).
(all T all Train (enter(T,Train,in1) | at(T,Train,in1) & -open(T,in1))) -> at(succ(T),Train,in1) # label(enter_or_wait_at_in1) # label(axiom).
(all T all Train ((at(T,Train,in1) & open(T,in1) & move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,in1) & open(T,in1) & -move(T,Train) -> at(succ(T),Train,in1)))) # label(move_or_stay_from_in1_to_s1) # label(axiom).
(all T all Train ((at(T,Train,out2) & -move(T,Train) -> at(succ(T),Train,out2)) | (at(T,Train,out2) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out2) # label(axiom).
(all T all Train ((at(T,Train,out1) & -move(T,Train) -> at(succ(T),Train,out1)) | (at(T,Train,out1) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out1) # label(axiom).
(all T all Train ((at(T,Train,s1) & switch(T,s1) = out1 & -move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,s1) & switch(T,s1) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s1_to_out1) # label(axiom).
(all T all Train ((at(T,Train,s1) & switch(T,s1) = out2 & -move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,s1) & switch(T,s1) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s1_to_out2) # label(axiom).
(all T all Train ((at(T,Train,s2) & switch(T,s2) = out1 & -move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,s2) & switch(T,s2) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s2_to_out1) # label(axiom).
(all T all Train ((at(T,Train,s2) & switch(T,s2) = out2 & -move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,s2) & switch(T,s2) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s2_to_out2) # label(axiom).
(all T all Train (occupied(succ(T),Train,out2) <-> occupied(T,Train,out2) & -(at(T,Train,out2) & -at(succ(T),Train,out2)) | at(T,Train,in2) & gate(Train) = out2 & open(T,in2) | at(T,Train,in1) & gate(Train) = out2 & open(T,in1))) # label(out2_occupied) # label(axiom).
(all T all Train (occupied(succ(T),Train,out1) <-> occupied(T,Train,out1) & -(at(T,Train,out1) & -at(succ(T),Train,out1)) | at(T,Train,in2) & gate(Train) = out1 & open(T,in2) | at(T,Train,in1) & gate(Train) = out1 & open(T,in1))) # label(out1_occupied) # label(axiom).
(all T all Train (occupied(succ(T),Train,s1) <-> occupied(T,Train,s1) & -(at(T,Train,s1) & -at(succ(T),Train,s1)) | at(T,Train,in1) & gate(Train) = out2 & open(T,in1) | at(T,Train,in1) & gate(Train) = out1 & open(T,in1))) # label(s1_occupied) # label(axiom).
(all T all Train (occupied(succ(T),Train,s2) <-> occupied(T,Train,s2) & -(at(T,Train,s2) & -at(succ(T),Train,s2)) | at(T,Train,in2) & gate(Train) = out2 & open(T,in2) | at(T,Train,in2) & gate(Train) = out1 & open(T,in2))) # label(s2_occupied) # label(axiom).
(all T all Train all N1 all N2 (path_free(T,Train,N1,N2) -> N1 = in2 & N2 = out2 | N1 = in2 & N2 = out1 | N1 = in1 & N2 = out2 | N1 = in1 & N2 = out1)) # label(path_from_to_values) # label(axiom).
(all T (open(T,in2) <-> (exists Train path_free(T,Train,in2,gate(Train))))) # label(open_in2) # label(axiom).
(all T (open(T,in1) <-> (exists Train path_free(T,Train,in1,gate(Train))))) # label(open_in1) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in2,out2) <-> at(T,Train,in2) & gate(Train) = out2 & (-occupied(T,OtherTrain,in2) | Train = OtherTrain) & (-occupied(T,OtherTrain,s2) | Train = OtherTrain) & (-occupied(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in2_to_out2) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in2,out1) <-> at(T,Train,in2) & gate(Train) = out1 & (-occupied(T,OtherTrain,in2) | Train = OtherTrain) & (-occupied(T,OtherTrain,s2) | Train = OtherTrain) & (-occupied(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in2_to_out1) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in1,out2) <-> at(T,Train,in1) & gate(Train) = out2 & (-occupied(T,OtherTrain,in1) | Train = OtherTrain) & (-occupied(T,OtherTrain,s1) | Train = OtherTrain) & (-occupied(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in1_to_out2) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in1,out1) <-> at(T,Train,in1) & gate(Train) = out1 & (-occupied(T,OtherTrain,in1) | Train = OtherTrain) & (-occupied(T,OtherTrain,s1) | Train = OtherTrain) & (-occupied(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in1_to_out1) # label(axiom).
end_of_list.

formulas(goals).
(all T all Train all N1 all N2 (at(T,Train,N1) & switch(T,N1) = N2 -> -(at(succ(T),Train,N1) & switch(succ(T),N1) != N2))) # label(switch_critical) # label(conjecture).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all X all Y (less(X,Y) & less(Y,X) -> X = Y)) # label(antisymmetry) # label(axiom) # label(non_clause).  [assumption].
2 (all X all Y all Z (less(X,Y) & less(Y,Z) -> less(X,Z))) # label(transitivity) # label(axiom) # label(non_clause).  [assumption].
3 (all X all Y (less(X,Y) | less(Y,X))) # label(totality) # label(axiom) # label(non_clause).  [assumption].
4 (all X (less(X,succ(X)) & (all Y (less(Y,X) | less(succ(X),Y))))) # label(succ) # label(axiom) # label(non_clause).  [assumption].
5 (all X (pred(succ(X)) = X & succ(pred(X)) = X)) # label(pred) # label(axiom) # label(non_clause).  [assumption].
6 (all T all Train all N1 all N2 (at(T,Train,N1) & at(T,Train,N2) -> N1 = N2)) # label(at_uniq) # label(axiom) # label(non_clause).  [assumption].
7 (all T all Train all N all OtherN (at(T,Train,N) -> -enter(T,Train,OtherN))) # label(at_nondup) # label(axiom) # label(non_clause).  [assumption].
8 (all T all Train all OtherTrain all N (at(T,Train,N) -> -enter(T,OtherTrain,N))) # label(input_nocol) # label(axiom) # label(non_clause).  [assumption].
9 (all T all Train all OtherTrain all N (enter(T,Train,N) & enter(T,OtherTrain,N) -> Train = OtherTrain)) # label(enter_uniq) # label(axiom) # label(non_clause).  [assumption].
10 (all T all Train all N (at(T,Train,N) -> occupied(T,Train,N))) # label(occupied) # label(axiom) # label(non_clause).  [assumption].
11 (all T all N (empty(T,N) <-> (all Train -at(T,Train,N)))) # label(node_empty) # label(axiom) # label(non_clause).  [assumption].
12 (all T all N (safe(T,N) <-> (all Train all OtherTrain (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)))) # label(node_safe) # label(axiom) # label(non_clause).  [assumption].
13 (all N (notBlocked(N) <-> (all T1 all Train (at(T1,Train,N) & -open(T1,N) -> (exists T2 (less(T1,T2) & open(T2,N))))))) # label(not_blocked) # label(axiom) # label(non_clause).  [assumption].
14 (all T1 all Train all N (at(T1,Train,N) -> (exists T2 (move(T2,Train) & less(T1,T2))))) # label(train_will_move) # label(axiom) # label(non_clause).  [assumption].
15 (all T1 all Train all N1 (at(T1,Train,N1) -> (exists T2 exists N2 (enter(T2,Train,N2) & less(T2,T1))))) # label(train_entered) # label(axiom) # label(non_clause).  [assumption].
16 (all T all Train all OtherTrain all N (occupied(T,Train,N) & occupied(T,OtherTrain,N) -> Train = OtherTrain)) # label(occupied_only_once) # label(axiom) # label(non_clause).  [assumption].
17 (all T all N1 all N2 (-empty(T,N1) & switch(T,N1) = N2 -> switch(succ(T),N1) = N2)) # label(switch_restr) # label(axiom) # label(non_clause).  [assumption].
18 (all T all Train move(T,Train)) # label(train_moves) # label(axiom) # label(non_clause).  [assumption].
19 (exists Train exists N1 all T1 all T2 all N2 (-at(T1,Train,N2) & -at(T2,Train,N2) & -enter(T2,Train,N2) & empty(T2,N1) & input(N1) & less(T1,T2))) -> enter(succ(T2),Train,N1) # label(train_enters) # label(axiom) # label(non_clause).  [assumption].
20 (all T all Train all N (at(T,Train,N) -> N = out2 | N = out1 | N = in2 | N = in1 | N = s1 | N = s2)) # label(at_restr) # label(axiom) # label(non_clause).  [assumption].
21 (all T all N (open(T,N) -> input(N))) # label(open_restr) # label(axiom) # label(non_clause).  [assumption].
22 (all N (input(N) -> N = in2 | N = in1)) # label(input) # label(axiom) # label(non_clause).  [assumption].
23 (all Train (gate(Train) = out2 | gate(Train) = out1)) # label(gate_restr) # label(axiom) # label(non_clause).  [assumption].
24 out2 != out1 & out2 != in2 & out2 != in1 & out2 != s1 & out2 != s2 & out1 != in2 & out1 != in1 & out1 != s1 & out1 != s2 & in2 != in1 & in2 != s1 & in2 != s2 & in1 != s1 & in1 != s2 & s1 != s2 # label(distinct_nodes) # label(axiom) # label(non_clause).  [assumption].
25 (all T all Train all N (occupied(T,Train,N) -> N = out2 | N = out1 | N = in2 | N = in1 | N = s1 | N = s2)) # label(occupied_values) # label(axiom) # label(non_clause).  [assumption].
26 (all T all Train all N (enter(T,Train,N) -> N = in2 | N = in1)) # label(enter_values) # label(axiom) # label(non_clause).  [assumption].
27 (all T switch(T,in2) = s2) # label(switch_in2_values) # label(axiom) # label(non_clause).  [assumption].
28 (all T switch(T,in1) = s1) # label(switch_in1_values) # label(axiom) # label(non_clause).  [assumption].
29 (all T (switch(T,s1) = out1 | switch(T,s1) = out2)) # label(switch_s1_values) # label(axiom) # label(non_clause).  [assumption].
30 (all T (switch(T,s2) = out1 | switch(T,s2) = out2)) # label(switch_s2_values) # label(axiom) # label(non_clause).  [assumption].
31 (all T all Train (occupied(T,Train,in2) & gate(Train) = out2 -> switch(T,in2) = s2)) # label(switch_in2_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
32 (all T all Train (occupied(T,Train,s2) & gate(Train) = out2 -> switch(T,s2) = out2)) # label(switch_s2_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
33 (all T all Train (occupied(T,Train,in2) & gate(Train) = out1 -> switch(T,in2) = s2)) # label(switch_in2_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
34 (all T all Train (occupied(T,Train,s2) & gate(Train) = out1 -> switch(T,s2) = out1)) # label(switch_s2_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
35 (all T all Train (occupied(T,Train,in1) & gate(Train) = out2 -> switch(T,in1) = s1)) # label(switch_in1_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
36 (all T all Train (occupied(T,Train,s1) & gate(Train) = out2 -> switch(T,s1) = out2)) # label(switch_s1_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
37 (all T all Train (occupied(T,Train,in1) & gate(Train) = out1 -> switch(T,in1) = s1)) # label(switch_in1_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
38 (all T all Train (occupied(T,Train,s1) & gate(Train) = out1 -> switch(T,s1) = out1)) # label(switch_s1_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
39 (all T all Train (enter(T,Train,in2) | at(T,Train,in2) & -open(T,in2))) -> at(succ(T),Train,in2) # label(enter_or_wait_at_in2) # label(axiom) # label(non_clause).  [assumption].
40 (all T all Train ((at(T,Train,in2) & open(T,in2) & move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,in2) & open(T,in2) & -move(T,Train) -> at(succ(T),Train,in2)))) # label(move_or_stay_from_in2_to_s2) # label(axiom) # label(non_clause).  [assumption].
41 (all T all Train (enter(T,Train,in1) | at(T,Train,in1) & -open(T,in1))) -> at(succ(T),Train,in1) # label(enter_or_wait_at_in1) # label(axiom) # label(non_clause).  [assumption].
42 (all T all Train ((at(T,Train,in1) & open(T,in1) & move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,in1) & open(T,in1) & -move(T,Train) -> at(succ(T),Train,in1)))) # label(move_or_stay_from_in1_to_s1) # label(axiom) # label(non_clause).  [assumption].
43 (all T all Train ((at(T,Train,out2) & -move(T,Train) -> at(succ(T),Train,out2)) | (at(T,Train,out2) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out2) # label(axiom) # label(non_clause).  [assumption].
44 (all T all Train ((at(T,Train,out1) & -move(T,Train) -> at(succ(T),Train,out1)) | (at(T,Train,out1) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out1) # label(axiom) # label(non_clause).  [assumption].
45 (all T all Train ((at(T,Train,s1) & switch(T,s1) = out1 & -move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,s1) & switch(T,s1) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s1_to_out1) # label(axiom) # label(non_clause).  [assumption].
46 (all T all Train ((at(T,Train,s1) & switch(T,s1) = out2 & -move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,s1) & switch(T,s1) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s1_to_out2) # label(axiom) # label(non_clause).  [assumption].
47 (all T all Train ((at(T,Train,s2) & switch(T,s2) = out1 & -move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,s2) & switch(T,s2) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s2_to_out1) # label(axiom) # label(non_clause).  [assumption].
48 (all T all Train ((at(T,Train,s2) & switch(T,s2) = out2 & -move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,s2) & switch(T,s2) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s2_to_out2) # label(axiom) # label(non_clause).  [assumption].
49 (all T all Train (occupied(succ(T),Train,out2) <-> occupied(T,Train,out2) & -(at(T,Train,out2) & -at(succ(T),Train,out2)) | at(T,Train,in2) & gate(Train) = out2 & open(T,in2) | at(T,Train,in1) & gate(Train) = out2 & open(T,in1))) # label(out2_occupied) # label(axiom) # label(non_clause).  [assumption].
50 (all T all Train (occupied(succ(T),Train,out1) <-> occupied(T,Train,out1) & -(at(T,Train,out1) & -at(succ(T),Train,out1)) | at(T,Train,in2) & gate(Train) = out1 & open(T,in2) | at(T,Train,in1) & gate(Train) = out1 & open(T,in1))) # label(out1_occupied) # label(axiom) # label(non_clause).  [assumption].
51 (all T all Train (occupied(succ(T),Train,s1) <-> occupied(T,Train,s1) & -(at(T,Train,s1) & -at(succ(T),Train,s1)) | at(T,Train,in1) & gate(Train) = out2 & open(T,in1) | at(T,Train,in1) & gate(Train) = out1 & open(T,in1))) # label(s1_occupied) # label(axiom) # label(non_clause).  [assumption].
52 (all T all Train (occupied(succ(T),Train,s2) <-> occupied(T,Train,s2) & -(at(T,Train,s2) & -at(succ(T),Train,s2)) | at(T,Train,in2) & gate(Train) = out2 & open(T,in2) | at(T,Train,in2) & gate(Train) = out1 & open(T,in2))) # label(s2_occupied) # label(axiom) # label(non_clause).  [assumption].
53 (all T all Train all N1 all N2 (path_free(T,Train,N1,N2) -> N1 = in2 & N2 = out2 | N1 = in2 & N2 = out1 | N1 = in1 & N2 = out2 | N1 = in1 & N2 = out1)) # label(path_from_to_values) # label(axiom) # label(non_clause).  [assumption].
54 (all T (open(T,in2) <-> (exists Train path_free(T,Train,in2,gate(Train))))) # label(open_in2) # label(axiom) # label(non_clause).  [assumption].
55 (all T (open(T,in1) <-> (exists Train path_free(T,Train,in1,gate(Train))))) # label(open_in1) # label(axiom) # label(non_clause).  [assumption].
56 (all T all Train all OtherTrain (path_free(T,Train,in2,out2) <-> at(T,Train,in2) & gate(Train) = out2 & (-occupied(T,OtherTrain,in2) | Train = OtherTrain) & (-occupied(T,OtherTrain,s2) | Train = OtherTrain) & (-occupied(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in2_to_out2) # label(axiom) # label(non_clause).  [assumption].
57 (all T all Train all OtherTrain (path_free(T,Train,in2,out1) <-> at(T,Train,in2) & gate(Train) = out1 & (-occupied(T,OtherTrain,in2) | Train = OtherTrain) & (-occupied(T,OtherTrain,s2) | Train = OtherTrain) & (-occupied(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in2_to_out1) # label(axiom) # label(non_clause).  [assumption].
58 (all T all Train all OtherTrain (path_free(T,Train,in1,out2) <-> at(T,Train,in1) & gate(Train) = out2 & (-occupied(T,OtherTrain,in1) | Train = OtherTrain) & (-occupied(T,OtherTrain,s1) | Train = OtherTrain) & (-occupied(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in1_to_out2) # label(axiom) # label(non_clause).  [assumption].
59 (all T all Train all OtherTrain (path_free(T,Train,in1,out1) <-> at(T,Train,in1) & gate(Train) = out1 & (-occupied(T,OtherTrain,in1) | Train = OtherTrain) & (-occupied(T,OtherTrain,s1) | Train = OtherTrain) & (-occupied(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in1_to_out1) # label(axiom) # label(non_clause).  [assumption].
60 (all T all Train all N1 all N2 (at(T,Train,N1) & switch(T,N1) = N2 -> -(at(succ(T),Train,N1) & switch(succ(T),N1) != N2))) # label(switch_critical) # label(conjecture) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
-less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).
-less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).
less(A,B) | less(B,A) # label(totality) # label(axiom).
less(A,succ(A)) # label(succ) # label(axiom).
less(A,B) | less(succ(B),A) # label(succ) # label(axiom).
pred(succ(A)) = A # label(pred) # label(axiom).
succ(pred(A)) = A # label(pred) # label(axiom).
-at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).
-at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).
-at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).
-enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).
-at(A,B,C) | occupied(A,B,C) # label(occupied) # label(axiom).
-empty(A,B) | -at(A,C,B) # label(node_empty) # label(axiom).
empty(A,B) | at(A,f1(A,B),B) # label(node_empty) # label(axiom).
-safe(A,B) | -at(A,C,B) | -at(A,D,B) | D = C # label(node_safe) # label(axiom).
safe(A,B) | at(A,f2(A,B),B) # label(node_safe) # label(axiom).
safe(A,B) | at(A,f3(A,B),B) # label(node_safe) # label(axiom).
safe(A,B) | f3(A,B) != f2(A,B) # label(node_safe) # label(axiom).
-notBlocked(A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)) # label(not_blocked) # label(axiom).
-notBlocked(A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A) # label(not_blocked) # label(axiom).
notBlocked(A) | at(f5(A),f6(A),A) # label(not_blocked) # label(axiom).
notBlocked(A) | -open(f5(A),A) # label(not_blocked) # label(axiom).
notBlocked(A) | -less(f5(A),B) | -open(B,A) # label(not_blocked) # label(axiom).
-at(A,B,C) | move(f7(A,B,C),B) # label(train_will_move) # label(axiom).
-at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).
-at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).
-at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).
-occupied(A,B,C) | -occupied(A,D,C) | D = B # label(occupied_only_once) # label(axiom).
empty(A,B) | switch(A,B) != C | switch(succ(A),B) = C # label(switch_restr) # label(axiom).
move(A,B) # label(train_moves) # label(axiom).
at(f10(A,B,C,D,E),D,f12(A,B,C,D,E)) | at(f11(A,B,C,D,E),D,f12(A,B,C,D,E)) | enter(f11(A,B,C,D,E),D,f12(A,B,C,D,E)) | -empty(f11(A,B,C,D,E),E) | -input(E) | -less(f10(A,B,C,D,E),f11(A,B,C,D,E)) | enter(succ(A),B,C) # label(train_enters) # label(axiom).
-at(A,B,C) | out2 = C | out1 = C | in2 = C | in1 = C | s1 = C | s2 = C # label(at_restr) # label(axiom).
-open(A,B) | input(B) # label(open_restr) # label(axiom).
-input(A) | in2 = A | in1 = A # label(input) # label(axiom).
gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).
out1 != out2 # label(distinct_nodes) # label(axiom).
in2 != out2 # label(distinct_nodes) # label(axiom).
in1 != out2 # label(distinct_nodes) # label(axiom).
s1 != out2 # label(distinct_nodes) # label(axiom).
s2 != out2 # label(distinct_nodes) # label(axiom).
in2 != out1 # label(distinct_nodes) # label(axiom).
in1 != out1 # label(distinct_nodes) # label(axiom).
s1 != out1 # label(distinct_nodes) # label(axiom).
s2 != out1 # label(distinct_nodes) # label(axiom).
in1 != in2 # label(distinct_nodes) # label(axiom).
s1 != in2 # label(distinct_nodes) # label(axiom).
s2 != in2 # label(distinct_nodes) # label(axiom).
s1 != in1 # label(distinct_nodes) # label(axiom).
s2 != in1 # label(distinct_nodes) # label(axiom).
s2 != s1 # label(distinct_nodes) # label(axiom).
-occupied(A,B,C) | out2 = C | out1 = C | in2 = C | in1 = C | s1 = C | s2 = C # label(occupied_values) # label(axiom).
-enter(A,B,C) | in2 = C | in1 = C # label(enter_values) # label(axiom).
switch(A,in2) = s2 # label(switch_in2_values) # label(axiom).
switch(A,in1) = s1 # label(switch_in1_values) # label(axiom).
switch(A,s1) = out1 | switch(A,s1) = out2 # label(switch_s1_values) # label(axiom).
switch(A,s2) = out1 | switch(A,s2) = out2 # label(switch_s2_values) # label(axiom).
-occupied(A,B,in2) | gate(B) != out2 | switch(A,in2) = s2 # label(switch_in2_with_gate_out2) # label(axiom).
-occupied(A,B,s2) | gate(B) != out2 | switch(A,s2) = out2 # label(switch_s2_with_gate_out2) # label(axiom).
-occupied(A,B,in2) | gate(B) != out1 | switch(A,in2) = s2 # label(switch_in2_with_gate_out1) # label(axiom).
-occupied(A,B,s2) | gate(B) != out1 | switch(A,s2) = out1 # label(switch_s2_with_gate_out1) # label(axiom).
-occupied(A,B,in1) | gate(B) != out2 | switch(A,in1) = s1 # label(switch_in1_with_gate_out2) # label(axiom).
-occupied(A,B,s1) | gate(B) != out2 | switch(A,s1) = out2 # label(switch_s1_with_gate_out2) # label(axiom).
-occupied(A,B,in1) | gate(B) != out1 | switch(A,in1) = s1 # label(switch_in1_with_gate_out1) # label(axiom).
-occupied(A,B,s1) | gate(B) != out1 | switch(A,s1) = out1 # label(switch_s1_with_gate_out1) # label(axiom).
-enter(f13(A,B),f14(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).
-at(f13(A,B),f14(A,B),in2) | open(f13(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).
-enter(f15(A,B),f16(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).
-at(f15(A,B),f16(A,B),in1) | open(f15(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).
-occupied(succ(A),B,out2) | occupied(A,B,out2) | at(A,B,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).
-occupied(succ(A),B,out2) | occupied(A,B,out2) | at(A,B,in2) | open(A,in1) # label(out2_occupied) # label(axiom).
-occupied(succ(A),B,out2) | occupied(A,B,out2) | gate(B) = out2 # label(out2_occupied) # label(axiom).
-occupied(succ(A),B,out2) | occupied(A,B,out2) | open(A,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).
-occupied(succ(A),B,out2) | occupied(A,B,out2) | open(A,in2) | open(A,in1) # label(out2_occupied) # label(axiom).
-occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | at(A,B,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).
-occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | at(A,B,in2) | open(A,in1) # label(out2_occupied) # label(axiom).
-occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | gate(B) = out2 # label(out2_occupied) # label(axiom).
-occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | open(A,in2) | at(A,B,in1) # label(out2_occupied) # label(axiom).
-occupied(succ(A),B,out2) | -at(A,B,out2) | at(succ(A),B,out2) | open(A,in2) | open(A,in1) # label(out2_occupied) # label(axiom).
occupied(succ(A),B,out2) | -occupied(A,B,out2) | at(A,B,out2) # label(out2_occupied) # label(axiom).
occupied(succ(A),B,out2) | -occupied(A,B,out2) | -at(succ(A),B,out2) # label(out2_occupied) # label(axiom).
occupied(succ(A),B,out2) | -at(A,B,in2) | gate(B) != out2 | -open(A,in2) # label(out2_occupied) # label(axiom).
occupied(succ(A),B,out2) | -at(A,B,in1) | gate(B) != out2 | -open(A,in1) # label(out2_occupied) # label(axiom).
-occupied(succ(A),B,out1) | occupied(A,B,out1) | at(A,B,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).
-occupied(succ(A),B,out1) | occupied(A,B,out1) | at(A,B,in2) | open(A,in1) # label(out1_occupied) # label(axiom).
-occupied(succ(A),B,out1) | occupied(A,B,out1) | gate(B) = out1 # label(out1_occupied) # label(axiom).
-occupied(succ(A),B,out1) | occupied(A,B,out1) | open(A,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).
-occupied(succ(A),B,out1) | occupied(A,B,out1) | open(A,in2) | open(A,in1) # label(out1_occupied) # label(axiom).
-occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | at(A,B,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).
-occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | at(A,B,in2) | open(A,in1) # label(out1_occupied) # label(axiom).
-occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | gate(B) = out1 # label(out1_occupied) # label(axiom).
-occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | open(A,in2) | at(A,B,in1) # label(out1_occupied) # label(axiom).
-occupied(succ(A),B,out1) | -at(A,B,out1) | at(succ(A),B,out1) | open(A,in2) | open(A,in1) # label(out1_occupied) # label(axiom).
occupied(succ(A),B,out1) | -occupied(A,B,out1) | at(A,B,out1) # label(out1_occupied) # label(axiom).
occupied(succ(A),B,out1) | -occupied(A,B,out1) | -at(succ(A),B,out1) # label(out1_occupied) # label(axiom).
occupied(succ(A),B,out1) | -at(A,B,in2) | gate(B) != out1 | -open(A,in2) # label(out1_occupied) # label(axiom).
occupied(succ(A),B,out1) | -at(A,B,in1) | gate(B) != out1 | -open(A,in1) # label(out1_occupied) # label(axiom).
-occupied(succ(A),B,s1) | occupied(A,B,s1) | at(A,B,in1) # label(s1_occupied) # label(axiom).
-occupied(succ(A),B,s1) | occupied(A,B,s1) | gate(B) = out2 | gate(B) = out1 # label(s1_occupied) # label(axiom).
-occupied(succ(A),B,s1) | occupied(A,B,s1) | open(A,in1) # label(s1_occupied) # label(axiom).
-occupied(succ(A),B,s1) | -at(A,B,s1) | at(succ(A),B,s1) | at(A,B,in1) # label(s1_occupied) # label(axiom).
-occupied(succ(A),B,s1) | -at(A,B,s1) | at(succ(A),B,s1) | gate(B) = out2 | gate(B) = out1 # label(s1_occupied) # label(axiom).
-occupied(succ(A),B,s1) | -at(A,B,s1) | at(succ(A),B,s1) | open(A,in1) # label(s1_occupied) # label(axiom).
occupied(succ(A),B,s1) | -occupied(A,B,s1) | at(A,B,s1) # label(s1_occupied) # label(axiom).
occupied(succ(A),B,s1) | -occupied(A,B,s1) | -at(succ(A),B,s1) # label(s1_occupied) # label(axiom).
occupied(succ(A),B,s1) | -at(A,B,in1) | gate(B) != out2 | -open(A,in1) # label(s1_occupied) # label(axiom).
occupied(succ(A),B,s1) | -at(A,B,in1) | gate(B) != out1 | -open(A,in1) # label(s1_occupied) # label(axiom).
-occupied(succ(A),B,s2) | occupied(A,B,s2) | at(A,B,in2) # label(s2_occupied) # label(axiom).
-occupied(succ(A),B,s2) | occupied(A,B,s2) | gate(B) = out2 | gate(B) = out1 # label(s2_occupied) # label(axiom).
-occupied(succ(A),B,s2) | occupied(A,B,s2) | open(A,in2) # label(s2_occupied) # label(axiom).
-occupied(succ(A),B,s2) | -at(A,B,s2) | at(succ(A),B,s2) | at(A,B,in2) # label(s2_occupied) # label(axiom).
-occupied(succ(A),B,s2) | -at(A,B,s2) | at(succ(A),B,s2) | gate(B) = out2 | gate(B) = out1 # label(s2_occupied) # label(axiom).
-occupied(succ(A),B,s2) | -at(A,B,s2) | at(succ(A),B,s2) | open(A,in2) # label(s2_occupied) # label(axiom).
occupied(succ(A),B,s2) | -occupied(A,B,s2) | at(A,B,s2) # label(s2_occupied) # label(axiom).
occupied(succ(A),B,s2) | -occupied(A,B,s2) | -at(succ(A),B,s2) # label(s2_occupied) # label(axiom).
occupied(succ(A),B,s2) | -at(A,B,in2) | gate(B) != out2 | -open(A,in2) # label(s2_occupied) # label(axiom).
occupied(succ(A),B,s2) | -at(A,B,in2) | gate(B) != out1 | -open(A,in2) # label(s2_occupied) # label(axiom).
-path_free(A,B,C,D) | in2 = C | in1 = C # label(path_from_to_values) # label(axiom).
-path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).
-open(A,in2) | path_free(A,f17(A),in2,gate(f17(A))) # label(open_in2) # label(axiom).
open(A,in2) | -path_free(A,B,in2,gate(B)) # label(open_in2) # label(axiom).
-open(A,in1) | path_free(A,f18(A),in1,gate(f18(A))) # label(open_in1) # label(axiom).
open(A,in1) | -path_free(A,B,in1,gate(B)) # label(open_in1) # label(axiom).
-path_free(A,B,in2,out2) | at(A,B,in2) # label(path_free_from_in2_to_out2) # label(axiom).
-path_free(A,B,in2,out2) | gate(B) = out2 # label(path_free_from_in2_to_out2) # label(axiom).
-path_free(A,B,in2,out2) | -occupied(A,C,in2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).
-path_free(A,B,in2,out2) | -occupied(A,C,s2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).
-path_free(A,B,in2,out2) | -occupied(A,C,out2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).
path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2 | occupied(A,C,in2) | occupied(A,C,s2) | occupied(A,C,out2) # label(path_free_from_in2_to_out2) # label(axiom).
path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2 | C != B # label(path_free_from_in2_to_out2) # label(axiom).
-path_free(A,B,in2,out1) | at(A,B,in2) # label(path_free_from_in2_to_out1) # label(axiom).
-path_free(A,B,in2,out1) | gate(B) = out1 # label(path_free_from_in2_to_out1) # label(axiom).
-path_free(A,B,in2,out1) | -occupied(A,C,in2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).
-path_free(A,B,in2,out1) | -occupied(A,C,s2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).
-path_free(A,B,in2,out1) | -occupied(A,C,out1) | C = B # label(path_free_from_in2_to_out1) # label(axiom).
path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1 | occupied(A,C,in2) | occupied(A,C,s2) | occupied(A,C,out1) # label(path_free_from_in2_to_out1) # label(axiom).
path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1 | C != B # label(path_free_from_in2_to_out1) # label(axiom).
-path_free(A,B,in1,out2) | at(A,B,in1) # label(path_free_from_in1_to_out2) # label(axiom).
-path_free(A,B,in1,out2) | gate(B) = out2 # label(path_free_from_in1_to_out2) # label(axiom).
-path_free(A,B,in1,out2) | -occupied(A,C,in1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).
-path_free(A,B,in1,out2) | -occupied(A,C,s1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).
-path_free(A,B,in1,out2) | -occupied(A,C,out2) | C = B # label(path_free_from_in1_to_out2) # label(axiom).
path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2 | occupied(A,C,in1) | occupied(A,C,s1) | occupied(A,C,out2) # label(path_free_from_in1_to_out2) # label(axiom).
path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2 | C != B # label(path_free_from_in1_to_out2) # label(axiom).
-path_free(A,B,in1,out1) | at(A,B,in1) # label(path_free_from_in1_to_out1) # label(axiom).
-path_free(A,B,in1,out1) | gate(B) = out1 # label(path_free_from_in1_to_out1) # label(axiom).
-path_free(A,B,in1,out1) | -occupied(A,C,in1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).
-path_free(A,B,in1,out1) | -occupied(A,C,s1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).
-path_free(A,B,in1,out1) | -occupied(A,C,out1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).
path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1 | occupied(A,C,in1) | occupied(A,C,s1) | occupied(A,C,out1) # label(path_free_from_in1_to_out1) # label(axiom).
path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1 | C != B # label(path_free_from_in1_to_out1) # label(axiom).
at(c1,c2,c3) # label(switch_critical) # label(conjecture).
switch(c1,c3) = c4 # label(switch_critical) # label(conjecture).
at(succ(c1),c2,c3) # label(switch_critical) # label(conjecture).
switch(succ(c1),c3) != c4 # label(switch_critical) # label(conjecture).
end_of_list.

============================== end of clauses for search =============

% There are no natural numbers in the input.

============================== DOMAIN SIZE 2 =========================

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.01 seconds).
Ground clauses: seen=789, kept=689.
Selections=1, assignments=1, propagations=11, current_models=0.
Rewrite_terms=674, rewrite_bools=76, indexes=300.
Rules_from_neg_clauses=5, cross_offs=5.

============================== end of statistics =====================

============================== DOMAIN SIZE 3 =========================

============================== STATISTICS ============================

For domain size 3.

Current CPU time: 0.00 seconds (total CPU time: 0.02 seconds).
Ground clauses: seen=2560, kept=2266.
Selections=2, assignments=3, propagations=128, current_models=0.
Rewrite_terms=3698, rewrite_bools=599, indexes=1872.
Rules_from_neg_clauses=4, cross_offs=9.

============================== end of statistics =====================

============================== DOMAIN SIZE 4 =========================

============================== STATISTICS ============================

For domain size 4.

Current CPU time: 0.00 seconds (total CPU time: 0.04 seconds).
Ground clauses: seen=6535, kept=5887.
Selections=3, assignments=6, propagations=497, current_models=0.
Rewrite_terms=14234, rewrite_bools=3012, indexes=6632.
Rules_from_neg_clauses=3, cross_offs=12.

============================== end of statistics =====================

============================== DOMAIN SIZE 5 =========================

============================== STATISTICS ============================

For domain size 5.

Current CPU time: 0.00 seconds (total CPU time: 0.08 seconds).
Ground clauses: seen=14334, kept=13124.
Selections=4, assignments=10, propagations=1755, current_models=0.
Rewrite_terms=39368, rewrite_bools=8693, indexes=18115.
Rules_from_neg_clauses=2, cross_offs=14.

============================== end of statistics =====================

============================== DOMAIN SIZE 6 =========================

============================== STATISTICS ============================

For domain size 6.

Current CPU time: 0.00 seconds (total CPU time: 42.24 seconds).
Ground clauses: seen=28249, kept=26221.
Selections=21012, assignments=126057, propagations=778799, current_models=0.
Rewrite_terms=230316260, rewrite_bools=44133996, indexes=113173440.
Rules_from_neg_clauses=46369, cross_offs=523071.

============================== end of statistics =====================

============================== DOMAIN SIZE 7 =========================

============================== STATISTICS ============================

For domain size 7.

Current CPU time: 0.00 seconds (total CPU time: 635.45 seconds).
Ground clauses: seen=51364, kept=48214.
Selections=134435, assignments=941024, propagations=5732158, current_models=0.
Rewrite_terms=2593191404, rewrite_bools=482826573, indexes=1060601318.
Rules_from_neg_clauses=317912, cross_offs=3371852.

============================== end of statistics =====================

============================== DOMAIN SIZE 8 =========================

============================== STATISTICS ============================

For domain size 8.

Current CPU time: 0.00 seconds (total CPU time: 3610.91 seconds).
Ground clauses: seen=87675, kept=83051.
Selections=397336, assignments=3126550, propagations=19782830, current_models=0.
Rewrite_terms=148769859, rewrite_bools=2305086483, indexes=195354246.
Rules_from_neg_clauses=829840, cross_offs=10274475.

============================== end of statistics =====================

============================== DOMAIN SIZE 9 =========================
