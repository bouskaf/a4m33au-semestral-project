============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 16143 was started by mac on Filip-MacBook-Pro.local,
Sat Jul  8 18:29:46 2017
The command was "./prover9".
============================== end of head ===========================

============================== INPUT =================================
set(prolog_style_variables).

formulas(assumptions).
(all X all Y (less(X,Y) & less(Y,X) -> X = Y)) # label(antisymmetry) # label(axiom).
(all X all Y all Z (less(X,Y) & less(Y,Z) -> less(X,Z))) # label(transitivity) # label(axiom).
(all X all Y (less(X,Y) | less(Y,X))) # label(totality) # label(axiom).
(all X (less(X,succ(X)) & (all Y (less(Y,X) | less(succ(X),Y))))) # label(succ) # label(axiom).
(all X (pred(succ(X)) = X & succ(pred(X)) = X)) # label(pred) # label(axiom).
(all T all Train all N1 all N2 (at(T,Train,N1) & at(T,Train,N2) -> N1 = N2)) # label(at_uniq) # label(axiom).
(all T all Train all N all OtherN (at(T,Train,N) -> -enter(T,Train,OtherN))) # label(at_nondup) # label(axiom).
(all T all Train all OtherTrain all N (at(T,Train,N) -> -enter(T,OtherTrain,N))) # label(input_nocol) # label(axiom).
(all T all Train all OtherTrain all N (enter(T,Train,N) & enter(T,OtherTrain,N) -> Train = OtherTrain)) # label(enter_uniq) # label(axiom).
(all T all N (empty(T,N) <-> (all Train -at(T,Train,N)))) # label(node_empty) # label(axiom).
(all T all N (safe(T,N) <-> (all Train all OtherTrain (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)))) # label(node_safe) # label(axiom).
(all N (notBlocked(N) <-> (all T1 all Train (at(T1,Train,N) & -open(T1,N) -> (exists T2 (less(T1,T2) & open(T2,N))))))) # label(not_blocked) # label(axiom).
(all T1 all Train all N (at(T1,Train,N) -> (exists T2 (move(T2,Train) & less(T1,T2))))) # label(train_will_move) # label(axiom).
(all T1 all Train all N1 (at(T1,Train,N1) -> (exists T2 exists N2 (enter(T2,Train,N2) & less(T2,T1))))) # label(train_entered) # label(axiom).
(all T all Train all OtherTrain all N (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)) # label(occupied_only_once) # label(axiom).
(all T all N1 all N2 (switch(succ(T),N1) = N2 & -empty(T,N1) -> switch(T,N1) = N2)) # label(switch_restr) # label(axiom).
(all T all Train move(T,Train)) # label(train_moves) # label(axiom).
(exists Train exists N1 all T1 all T2 all N2 enter(succ(T2),Train,N1)) -> -at(T1,Train,N2) & -at(T2,Train,N2) & -enter(T2,Train,N2) & empty(T2,N1) & input(N1) & less(T1,T2) # label(train_enters) # label(axiom).
(all T all Train all N (at(T,Train,N) -> N = out2 | N = s | N = in | N = out1)) # label(at_restr) # label(axiom).
(all T all N (open(T,N) -> input(N))) # label(open_restr) # label(axiom).
(all N (input(N) -> N = in)) # label(input) # label(axiom).
(all Train (gate(Train) = out2 | gate(Train) = out1)) # label(gate_restr) # label(axiom).
out2 != s & out2 != in & out2 != out1 & s != in & s != out1 & in != out1 # label(distinct_nodes) # label(axiom).
(all T all Train all N (enter(T,Train,N) -> N = in)) # label(enter_values) # label(axiom).
(all T (switch(T,s) = out1 | switch(T,s) = out2)) # label(switch_s_values) # label(axiom).
(all T switch(T,in) = s) # label(switch_in_values) # label(axiom).
(all T all Train (at(T,Train,in) & gate(Train) = out2 -> switch(T,in) = s)) # label(switch_in_with_gate_out2) # label(axiom).
(all T all Train (at(T,Train,s) & gate(Train) = out2 -> switch(T,s) = out2)) # label(switch_s_with_gate_out2) # label(axiom).
(all T all Train (at(T,Train,in) & gate(Train) = out1 -> switch(T,in) = s)) # label(switch_in_with_gate_out1) # label(axiom).
(all T all Train (at(T,Train,s) & gate(Train) = out1 -> switch(T,s) = out1)) # label(switch_s_with_gate_out1) # label(axiom).
(all T all Train (enter(T,Train,in) | at(T,Train,in) & -open(T,in))) -> at(succ(T),Train,in) # label(enter_or_wait_at_in) # label(axiom).
(all T all Train ((at(T,Train,in) & open(T,in) & move(T,Train) -> at(succ(T),Train,s)) | (at(T,Train,in) & open(T,in) & -move(T,Train) -> at(succ(T),Train,in)))) # label(move_or_stay_from_in_to_s) # label(axiom).
(all T all Train ((at(T,Train,out2) & -move(T,Train) -> at(succ(T),Train,out2)) | (at(T,Train,out2) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out2) # label(axiom).
(all T all Train ((at(T,Train,out1) & -move(T,Train) -> at(succ(T),Train,out1)) | (at(T,Train,out1) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out1) # label(axiom).
(all T all Train ((at(T,Train,s) & switch(T,s) = out1 & -move(T,Train) -> at(succ(T),Train,s)) | (at(T,Train,s) & switch(T,s) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s_to_out1) # label(axiom).
(all T all Train ((at(T,Train,s) & switch(T,s) = out2 & -move(T,Train) -> at(succ(T),Train,s)) | (at(T,Train,s) & switch(T,s) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s_to_out2) # label(axiom).
(all T all Train all N1 all N2 (path_free(T,Train,N1,N2) -> N1 = in & N2 = out2 | N1 = in & N2 = out1)) # label(path_from_to_values) # label(axiom).
(all T (open(T,in) <-> (exists Train path_free(T,Train,in,gate(Train))))) # label(open_in) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in,out2) <-> at(T,Train,in) & gate(Train) = out2 & (-at(T,OtherTrain,in) | Train = OtherTrain) & (-at(T,OtherTrain,s) | Train = OtherTrain) & (-at(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in_to_out2) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in,out1) <-> at(T,Train,in) & gate(Train) = out1 & (-at(T,OtherTrain,in) | Train = OtherTrain) & (-at(T,OtherTrain,s) | Train = OtherTrain) & (-at(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in_to_out1) # label(axiom).
end_of_list.

formulas(goals).
(all T all N safe(T,N)) # label(collision_critical) # label(conjecture).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all X all Y (less(X,Y) & less(Y,X) -> X = Y)) # label(antisymmetry) # label(axiom) # label(non_clause).  [assumption].
2 (all X all Y all Z (less(X,Y) & less(Y,Z) -> less(X,Z))) # label(transitivity) # label(axiom) # label(non_clause).  [assumption].
3 (all X all Y (less(X,Y) | less(Y,X))) # label(totality) # label(axiom) # label(non_clause).  [assumption].
4 (all X (less(X,succ(X)) & (all Y (less(Y,X) | less(succ(X),Y))))) # label(succ) # label(axiom) # label(non_clause).  [assumption].
5 (all X (pred(succ(X)) = X & succ(pred(X)) = X)) # label(pred) # label(axiom) # label(non_clause).  [assumption].
6 (all T all Train all N1 all N2 (at(T,Train,N1) & at(T,Train,N2) -> N1 = N2)) # label(at_uniq) # label(axiom) # label(non_clause).  [assumption].
7 (all T all Train all N all OtherN (at(T,Train,N) -> -enter(T,Train,OtherN))) # label(at_nondup) # label(axiom) # label(non_clause).  [assumption].
8 (all T all Train all OtherTrain all N (at(T,Train,N) -> -enter(T,OtherTrain,N))) # label(input_nocol) # label(axiom) # label(non_clause).  [assumption].
9 (all T all Train all OtherTrain all N (enter(T,Train,N) & enter(T,OtherTrain,N) -> Train = OtherTrain)) # label(enter_uniq) # label(axiom) # label(non_clause).  [assumption].
10 (all T all N (empty(T,N) <-> (all Train -at(T,Train,N)))) # label(node_empty) # label(axiom) # label(non_clause).  [assumption].
11 (all T all N (safe(T,N) <-> (all Train all OtherTrain (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)))) # label(node_safe) # label(axiom) # label(non_clause).  [assumption].
12 (all N (notBlocked(N) <-> (all T1 all Train (at(T1,Train,N) & -open(T1,N) -> (exists T2 (less(T1,T2) & open(T2,N))))))) # label(not_blocked) # label(axiom) # label(non_clause).  [assumption].
13 (all T1 all Train all N (at(T1,Train,N) -> (exists T2 (move(T2,Train) & less(T1,T2))))) # label(train_will_move) # label(axiom) # label(non_clause).  [assumption].
14 (all T1 all Train all N1 (at(T1,Train,N1) -> (exists T2 exists N2 (enter(T2,Train,N2) & less(T2,T1))))) # label(train_entered) # label(axiom) # label(non_clause).  [assumption].
15 (all T all Train all OtherTrain all N (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)) # label(occupied_only_once) # label(axiom) # label(non_clause).  [assumption].
16 (all T all N1 all N2 (switch(succ(T),N1) = N2 & -empty(T,N1) -> switch(T,N1) = N2)) # label(switch_restr) # label(axiom) # label(non_clause).  [assumption].
17 (all T all Train move(T,Train)) # label(train_moves) # label(axiom) # label(non_clause).  [assumption].
18 (exists Train exists N1 all T1 all T2 all N2 enter(succ(T2),Train,N1)) -> -at(T1,Train,N2) & -at(T2,Train,N2) & -enter(T2,Train,N2) & empty(T2,N1) & input(N1) & less(T1,T2) # label(train_enters) # label(axiom) # label(non_clause).  [assumption].
19 (all T all Train all N (at(T,Train,N) -> N = out2 | N = s | N = in | N = out1)) # label(at_restr) # label(axiom) # label(non_clause).  [assumption].
20 (all T all N (open(T,N) -> input(N))) # label(open_restr) # label(axiom) # label(non_clause).  [assumption].
21 (all N (input(N) -> N = in)) # label(input) # label(axiom) # label(non_clause).  [assumption].
22 (all Train (gate(Train) = out2 | gate(Train) = out1)) # label(gate_restr) # label(axiom) # label(non_clause).  [assumption].
23 out2 != s & out2 != in & out2 != out1 & s != in & s != out1 & in != out1 # label(distinct_nodes) # label(axiom) # label(non_clause).  [assumption].
24 (all T all Train all N (enter(T,Train,N) -> N = in)) # label(enter_values) # label(axiom) # label(non_clause).  [assumption].
25 (all T (switch(T,s) = out1 | switch(T,s) = out2)) # label(switch_s_values) # label(axiom) # label(non_clause).  [assumption].
26 (all T switch(T,in) = s) # label(switch_in_values) # label(axiom) # label(non_clause).  [assumption].
27 (all T all Train (at(T,Train,in) & gate(Train) = out2 -> switch(T,in) = s)) # label(switch_in_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
28 (all T all Train (at(T,Train,s) & gate(Train) = out2 -> switch(T,s) = out2)) # label(switch_s_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
29 (all T all Train (at(T,Train,in) & gate(Train) = out1 -> switch(T,in) = s)) # label(switch_in_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
30 (all T all Train (at(T,Train,s) & gate(Train) = out1 -> switch(T,s) = out1)) # label(switch_s_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
31 (all T all Train (enter(T,Train,in) | at(T,Train,in) & -open(T,in))) -> at(succ(T),Train,in) # label(enter_or_wait_at_in) # label(axiom) # label(non_clause).  [assumption].
32 (all T all Train ((at(T,Train,in) & open(T,in) & move(T,Train) -> at(succ(T),Train,s)) | (at(T,Train,in) & open(T,in) & -move(T,Train) -> at(succ(T),Train,in)))) # label(move_or_stay_from_in_to_s) # label(axiom) # label(non_clause).  [assumption].
33 (all T all Train ((at(T,Train,out2) & -move(T,Train) -> at(succ(T),Train,out2)) | (at(T,Train,out2) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out2) # label(axiom) # label(non_clause).  [assumption].
34 (all T all Train ((at(T,Train,out1) & -move(T,Train) -> at(succ(T),Train,out1)) | (at(T,Train,out1) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out1) # label(axiom) # label(non_clause).  [assumption].
35 (all T all Train ((at(T,Train,s) & switch(T,s) = out1 & -move(T,Train) -> at(succ(T),Train,s)) | (at(T,Train,s) & switch(T,s) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s_to_out1) # label(axiom) # label(non_clause).  [assumption].
36 (all T all Train ((at(T,Train,s) & switch(T,s) = out2 & -move(T,Train) -> at(succ(T),Train,s)) | (at(T,Train,s) & switch(T,s) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s_to_out2) # label(axiom) # label(non_clause).  [assumption].
37 (all T all Train all N1 all N2 (path_free(T,Train,N1,N2) -> N1 = in & N2 = out2 | N1 = in & N2 = out1)) # label(path_from_to_values) # label(axiom) # label(non_clause).  [assumption].
38 (all T (open(T,in) <-> (exists Train path_free(T,Train,in,gate(Train))))) # label(open_in) # label(axiom) # label(non_clause).  [assumption].
39 (all T all Train all OtherTrain (path_free(T,Train,in,out2) <-> at(T,Train,in) & gate(Train) = out2 & (-at(T,OtherTrain,in) | Train = OtherTrain) & (-at(T,OtherTrain,s) | Train = OtherTrain) & (-at(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in_to_out2) # label(axiom) # label(non_clause).  [assumption].
40 (all T all Train all OtherTrain (path_free(T,Train,in,out1) <-> at(T,Train,in) & gate(Train) = out1 & (-at(T,OtherTrain,in) | Train = OtherTrain) & (-at(T,OtherTrain,s) | Train = OtherTrain) & (-at(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in_to_out1) # label(axiom) # label(non_clause).  [assumption].
41 (all T all N safe(T,N)) # label(collision_critical) # label(conjecture) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
-less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].
-less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].
less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].
less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].
less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].
pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
-at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].
-at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].
-at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].
-enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].
-empty(A,B) | -at(A,C,B) # label(node_empty) # label(axiom).  [clausify(10)].
empty(A,B) | at(A,f1(A,B),B) # label(node_empty) # label(axiom).  [clausify(10)].
-safe(A,B) | -at(A,C,B) | -at(A,D,B) | D = C # label(node_safe) # label(axiom).  [clausify(11)].
safe(A,B) | at(A,f2(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
safe(A,B) | at(A,f3(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
safe(A,B) | f3(A,B) != f2(A,B) # label(node_safe) # label(axiom).  [clausify(11)].
-notBlocked(A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)) # label(not_blocked) # label(axiom).  [clausify(12)].
-notBlocked(A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A) # label(not_blocked) # label(axiom).  [clausify(12)].
notBlocked(A) | at(f5(A),f6(A),A) # label(not_blocked) # label(axiom).  [clausify(12)].
notBlocked(A) | -open(f5(A),A) # label(not_blocked) # label(axiom).  [clausify(12)].
notBlocked(A) | -less(f5(A),B) | -open(B,A) # label(not_blocked) # label(axiom).  [clausify(12)].
-at(A,B,C) | move(f7(A,B,C),B) # label(train_will_move) # label(axiom).  [clausify(13)].
-at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(13)].
-at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(14)].
-at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(14)].
-at(A,B,C) | -at(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(15)].
switch(succ(A),B) != C | empty(A,B) | switch(A,B) = C # label(switch_restr) # label(axiom).  [clausify(16)].
move(A,B) # label(train_moves) # label(axiom).  [clausify(17)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(A,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -enter(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | empty(D,E) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | input(E) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | less(A,D) # label(train_enters) # label(axiom).  [clausify(18)].
-at(A,B,C) | out2 = C | s = C | in = C | out1 = C # label(at_restr) # label(axiom).  [clausify(19)].
-open(A,B) | input(B) # label(open_restr) # label(axiom).  [clausify(20)].
-input(A) | in = A # label(input) # label(axiom).  [clausify(21)].
gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(22)].
s != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
in != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
out1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
in != s # label(distinct_nodes) # label(axiom).  [clausify(23)].
out1 != s # label(distinct_nodes) # label(axiom).  [clausify(23)].
out1 != in # label(distinct_nodes) # label(axiom).  [clausify(23)].
-enter(A,B,C) | in = C # label(enter_values) # label(axiom).  [clausify(24)].
switch(A,s) = out1 | switch(A,s) = out2 # label(switch_s_values) # label(axiom).  [clausify(25)].
switch(A,in) = s # label(switch_in_values) # label(axiom).  [clausify(26)].
-at(A,B,in) | gate(B) != out2 | switch(A,in) = s # label(switch_in_with_gate_out2) # label(axiom).  [clausify(27)].
-at(A,B,s) | gate(B) != out2 | switch(A,s) = out2 # label(switch_s_with_gate_out2) # label(axiom).  [clausify(28)].
-at(A,B,in) | gate(B) != out1 | switch(A,in) = s # label(switch_in_with_gate_out1) # label(axiom).  [clausify(29)].
-at(A,B,s) | gate(B) != out1 | switch(A,s) = out1 # label(switch_s_with_gate_out1) # label(axiom).  [clausify(30)].
-enter(f13(A,B),f14(A,B),in) | at(succ(A),B,in) # label(enter_or_wait_at_in) # label(axiom).  [clausify(31)].
-at(f13(A,B),f14(A,B),in) | open(f13(A,B),in) | at(succ(A),B,in) # label(enter_or_wait_at_in) # label(axiom).  [clausify(31)].
-path_free(A,B,C,D) | in = C # label(path_from_to_values) # label(axiom).  [clausify(37)].
-path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(37)].
-open(A,in) | path_free(A,f15(A),in,gate(f15(A))) # label(open_in) # label(axiom).  [clausify(38)].
open(A,in) | -path_free(A,B,in,gate(B)) # label(open_in) # label(axiom).  [clausify(38)].
-path_free(A,B,in,out2) | at(A,B,in) # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
-path_free(A,B,in,out2) | gate(B) = out2 # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
-path_free(A,B,in,out2) | -at(A,C,in) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
-path_free(A,B,in,out2) | -at(A,C,s) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
-path_free(A,B,in,out2) | -at(A,C,out2) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
path_free(A,B,in,out2) | -at(A,B,in) | gate(B) != out2 | at(A,C,in) | at(A,C,s) | at(A,C,out2) # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
path_free(A,B,in,out2) | -at(A,B,in) | gate(B) != out2 | C != B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
-path_free(A,B,in,out1) | at(A,B,in) # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
-path_free(A,B,in,out1) | gate(B) = out1 # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
-path_free(A,B,in,out1) | -at(A,C,in) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
-path_free(A,B,in,out1) | -at(A,C,s) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
-path_free(A,B,in,out1) | -at(A,C,out1) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
path_free(A,B,in,out1) | -at(A,B,in) | gate(B) != out1 | at(A,C,in) | at(A,C,s) | at(A,C,out1) # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
path_free(A,B,in,out1) | -at(A,B,in) | gate(B) != out1 | C != B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
-safe(c1,c2) # label(collision_critical) # label(conjecture).  [deny(41)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating empty/2
42 empty(A,B) | at(A,f1(A,B),B) # label(node_empty) # label(axiom).  [clausify(10)].
43 -empty(A,B) | -at(A,C,B) # label(node_empty) # label(axiom).  [clausify(10)].
Derived: at(A,f1(A,B),B) | -at(A,C,B).  [resolve(42,a,43,a)].
44 switch(succ(A),B) != C | empty(A,B) | switch(A,B) = C # label(switch_restr) # label(axiom).  [clausify(16)].
Derived: switch(succ(A),B) != C | switch(A,B) = C | -at(A,D,B).  [resolve(44,b,43,a)].
45 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | empty(D,E) # label(train_enters) # label(axiom).  [clausify(18)].
Derived: -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,V7,E).  [resolve(45,b,43,a)].

Eliminating notBlocked/1
46 notBlocked(A) | at(f5(A),f6(A),A) # label(not_blocked) # label(axiom).  [clausify(12)].
47 -notBlocked(A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)) # label(not_blocked) # label(axiom).  [clausify(12)].
48 -notBlocked(A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A) # label(not_blocked) # label(axiom).  [clausify(12)].
Derived: at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(46,a,47,a)].
Derived: at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(46,a,48,a)].
49 notBlocked(A) | -open(f5(A),A) # label(not_blocked) # label(axiom).  [clausify(12)].
Derived: -open(f5(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(49,a,47,a)].
Derived: -open(f5(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(49,a,48,a)].
50 notBlocked(A) | -less(f5(A),B) | -open(B,A) # label(not_blocked) # label(axiom).  [clausify(12)].
Derived: -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | less(C,f4(A,C,D)).  [resolve(50,a,47,a)].
Derived: -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | open(f4(A,C,D),A).  [resolve(50,a,48,a)].

Eliminating move/2

Eliminating input/1
51 -input(A) | in = A # label(input) # label(axiom).  [clausify(21)].
52 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | input(E) # label(train_enters) # label(axiom).  [clausify(18)].
53 -open(A,B) | input(B) # label(open_restr) # label(axiom).  [clausify(20)].
Derived: in = A | -enter(succ(f11(B,C,D,E,A,F,V6)),F,V6).  [resolve(51,a,52,b)].
Derived: in = A | -open(B,A).  [resolve(51,a,53,b)].

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, less, open, safe, at, enter, path_free ]).
Function symbol precedence:  function_order([ in, out1, out2, s, c1, c2, switch, f1, f2, f3, f13, f14, gate, succ, pred, f5, f6, f15, f4, f7, f8, f9, f11 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      54 -less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].
kept:      55 -less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].
kept:      56 less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].
kept:      57 less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].
kept:      58 less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].
kept:      59 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
kept:      60 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
kept:      61 -at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].
kept:      62 -at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].
kept:      63 -at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].
kept:      64 -enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].
kept:      65 -safe(A,B) | -at(A,C,B) | -at(A,D,B) | D = C # label(node_safe) # label(axiom).  [clausify(11)].
kept:      66 safe(A,B) | at(A,f2(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
kept:      67 safe(A,B) | at(A,f3(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
kept:      68 safe(A,B) | f3(A,B) != f2(A,B) # label(node_safe) # label(axiom).  [clausify(11)].
kept:      69 -at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(13)].
kept:      70 -at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(14)].
kept:      71 -at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(14)].
kept:      72 -at(A,B,C) | -at(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(15)].
kept:      73 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(A,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
kept:      74 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
kept:      75 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -enter(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
kept:      76 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | less(A,D) # label(train_enters) # label(axiom).  [clausify(18)].
kept:      77 -at(A,B,C) | out2 = C | s = C | in = C | out1 = C # label(at_restr) # label(axiom).  [clausify(19)].
kept:      78 gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(22)].
kept:      79 s != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
           80 in != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      81 out2 != in.  [copy(80),flip(a)].
           82 out1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      83 out2 != out1.  [copy(82),flip(a)].
           84 in != s # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      85 s != in.  [copy(84),flip(a)].
           86 out1 != s # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      87 s != out1.  [copy(86),flip(a)].
kept:      88 out1 != in # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      89 -enter(A,B,C) | in = C # label(enter_values) # label(axiom).  [clausify(24)].
kept:      90 switch(A,s) = out1 | switch(A,s) = out2 # label(switch_s_values) # label(axiom).  [clausify(25)].
kept:      91 switch(A,in) = s # label(switch_in_values) # label(axiom).  [clausify(26)].
           92 -at(A,B,in) | gate(B) != out2 | switch(A,in) = s # label(switch_in_with_gate_out2) # label(axiom).  [clausify(27)].
kept:      93 -at(A,B,s) | gate(B) != out2 | switch(A,s) = out2 # label(switch_s_with_gate_out2) # label(axiom).  [clausify(28)].
           94 -at(A,B,in) | gate(B) != out1 | switch(A,in) = s # label(switch_in_with_gate_out1) # label(axiom).  [clausify(29)].
kept:      95 -at(A,B,s) | gate(B) != out1 | switch(A,s) = out1 # label(switch_s_with_gate_out1) # label(axiom).  [clausify(30)].
kept:      96 -enter(f13(A,B),f14(A,B),in) | at(succ(A),B,in) # label(enter_or_wait_at_in) # label(axiom).  [clausify(31)].
kept:      97 -at(f13(A,B),f14(A,B),in) | open(f13(A,B),in) | at(succ(A),B,in) # label(enter_or_wait_at_in) # label(axiom).  [clausify(31)].
kept:      98 -path_free(A,B,C,D) | in = C # label(path_from_to_values) # label(axiom).  [clausify(37)].
kept:      99 -path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(37)].
kept:      100 -open(A,in) | path_free(A,f15(A),in,gate(f15(A))) # label(open_in) # label(axiom).  [clausify(38)].
kept:      101 open(A,in) | -path_free(A,B,in,gate(B)) # label(open_in) # label(axiom).  [clausify(38)].
kept:      102 -path_free(A,B,in,out2) | at(A,B,in) # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
kept:      103 -path_free(A,B,in,out2) | gate(B) = out2 # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
kept:      104 -path_free(A,B,in,out2) | -at(A,C,in) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
kept:      105 -path_free(A,B,in,out2) | -at(A,C,s) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
kept:      106 -path_free(A,B,in,out2) | -at(A,C,out2) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
kept:      107 path_free(A,B,in,out2) | -at(A,B,in) | gate(B) != out2 | at(A,C,in) | at(A,C,s) | at(A,C,out2) # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
           108 path_free(A,B,in,out2) | -at(A,B,in) | gate(B) != out2 | C != B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
kept:      109 path_free(A,B,in,out2) | -at(A,B,in) | gate(B) != out2.  [copy(108),xx(d)].
kept:      110 -path_free(A,B,in,out1) | at(A,B,in) # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
kept:      111 -path_free(A,B,in,out1) | gate(B) = out1 # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
kept:      112 -path_free(A,B,in,out1) | -at(A,C,in) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
kept:      113 -path_free(A,B,in,out1) | -at(A,C,s) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
kept:      114 -path_free(A,B,in,out1) | -at(A,C,out1) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
kept:      115 path_free(A,B,in,out1) | -at(A,B,in) | gate(B) != out1 | at(A,C,in) | at(A,C,s) | at(A,C,out1) # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
           116 path_free(A,B,in,out1) | -at(A,B,in) | gate(B) != out1 | C != B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
kept:      117 path_free(A,B,in,out1) | -at(A,B,in) | gate(B) != out1.  [copy(116),xx(d)].
kept:      118 -safe(c1,c2) # label(collision_critical) # label(conjecture).  [deny(41)].
kept:      119 at(A,f1(A,B),B) | -at(A,C,B).  [resolve(42,a,43,a)].
kept:      120 switch(succ(A),B) != C | switch(A,B) = C | -at(A,D,B).  [resolve(44,b,43,a)].
kept:      121 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,V7,E).  [resolve(45,b,43,a)].
kept:      122 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(46,a,47,a)].
kept:      123 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(46,a,48,a)].
kept:      124 -open(f5(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(49,a,47,a)].
kept:      125 -open(f5(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(49,a,48,a)].
kept:      126 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | less(C,f4(A,C,D)).  [resolve(50,a,47,a)].
kept:      127 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | open(f4(A,C,D),A).  [resolve(50,a,48,a)].
kept:      128 in = A | -enter(succ(f11(B,C,D,E,A,F,V6)),F,V6).  [resolve(51,a,52,b)].
kept:      129 in = A | -open(B,A).  [resolve(51,a,53,b)].
kept:      130 less(A,A).  [factor(56,a,b)].

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

% Clauses after input processing:

formulas(usable).
end_of_list.

formulas(sos).
54 -less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].
55 -less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].
56 less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].
57 less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].
58 less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].
59 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
60 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
61 -at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].
62 -at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].
63 -at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].
64 -enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].
66 safe(A,B) | at(A,f2(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
67 safe(A,B) | at(A,f3(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
68 safe(A,B) | f3(A,B) != f2(A,B) # label(node_safe) # label(axiom).  [clausify(11)].
69 -at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(13)].
70 -at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(14)].
71 -at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(14)].
72 -at(A,B,C) | -at(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(15)].
73 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(A,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
74 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
75 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -enter(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
76 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | less(A,D) # label(train_enters) # label(axiom).  [clausify(18)].
77 -at(A,B,C) | out2 = C | s = C | in = C | out1 = C # label(at_restr) # label(axiom).  [clausify(19)].
78 gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(22)].
79 s != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
81 out2 != in.  [copy(80),flip(a)].
83 out2 != out1.  [copy(82),flip(a)].
85 s != in.  [copy(84),flip(a)].
87 s != out1.  [copy(86),flip(a)].
88 out1 != in # label(distinct_nodes) # label(axiom).  [clausify(23)].
89 -enter(A,B,C) | in = C # label(enter_values) # label(axiom).  [clausify(24)].
90 switch(A,s) = out1 | switch(A,s) = out2 # label(switch_s_values) # label(axiom).  [clausify(25)].
91 switch(A,in) = s # label(switch_in_values) # label(axiom).  [clausify(26)].
93 -at(A,B,s) | gate(B) != out2 | switch(A,s) = out2 # label(switch_s_with_gate_out2) # label(axiom).  [clausify(28)].
95 -at(A,B,s) | gate(B) != out1 | switch(A,s) = out1 # label(switch_s_with_gate_out1) # label(axiom).  [clausify(30)].
96 -enter(f13(A,B),f14(A,B),in) | at(succ(A),B,in) # label(enter_or_wait_at_in) # label(axiom).  [clausify(31)].
97 -at(f13(A,B),f14(A,B),in) | open(f13(A,B),in) | at(succ(A),B,in) # label(enter_or_wait_at_in) # label(axiom).  [clausify(31)].
98 -path_free(A,B,C,D) | in = C # label(path_from_to_values) # label(axiom).  [clausify(37)].
99 -path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(37)].
100 -open(A,in) | path_free(A,f15(A),in,gate(f15(A))) # label(open_in) # label(axiom).  [clausify(38)].
101 open(A,in) | -path_free(A,B,in,gate(B)) # label(open_in) # label(axiom).  [clausify(38)].
102 -path_free(A,B,in,out2) | at(A,B,in) # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
103 -path_free(A,B,in,out2) | gate(B) = out2 # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
104 -path_free(A,B,in,out2) | -at(A,C,in) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
105 -path_free(A,B,in,out2) | -at(A,C,s) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
106 -path_free(A,B,in,out2) | -at(A,C,out2) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].
109 path_free(A,B,in,out2) | -at(A,B,in) | gate(B) != out2.  [copy(108),xx(d)].
110 -path_free(A,B,in,out1) | at(A,B,in) # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
111 -path_free(A,B,in,out1) | gate(B) = out1 # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
112 -path_free(A,B,in,out1) | -at(A,C,in) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
113 -path_free(A,B,in,out1) | -at(A,C,s) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
114 -path_free(A,B,in,out1) | -at(A,C,out1) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].
117 path_free(A,B,in,out1) | -at(A,B,in) | gate(B) != out1.  [copy(116),xx(d)].
118 -safe(c1,c2) # label(collision_critical) # label(conjecture).  [deny(41)].
119 at(A,f1(A,B),B) | -at(A,C,B).  [resolve(42,a,43,a)].
120 switch(succ(A),B) != C | switch(A,B) = C | -at(A,D,B).  [resolve(44,b,43,a)].
121 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,V7,E).  [resolve(45,b,43,a)].
122 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(46,a,47,a)].
123 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(46,a,48,a)].
124 -open(f5(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(49,a,47,a)].
125 -open(f5(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(49,a,48,a)].
126 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | less(C,f4(A,C,D)).  [resolve(50,a,47,a)].
127 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | open(f4(A,C,D),A).  [resolve(50,a,48,a)].
128 in = A | -enter(succ(f11(B,C,D,E,A,F,V6)),F,V6).  [resolve(51,a,52,b)].
129 in = A | -open(B,A).  [resolve(51,a,53,b)].
130 less(A,A).  [factor(56,a,b)].
end_of_list.

formulas(demodulators).
59 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
60 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
91 switch(A,in) = s # label(switch_in_values) # label(axiom).  [clausify(26)].
end_of_list.

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.01 seconds.

given #1 (I,wt=9): 54 -less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].

given #2 (I,wt=9): 55 -less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].

given #3 (I,wt=6): 56 less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].

given #4 (I,wt=4): 57 less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].

given #5 (I,wt=7): 58 less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].

given #6 (I,wt=5): 59 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].

given #7 (I,wt=5): 60 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].

given #8 (I,wt=11): 61 -at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].

given #9 (I,wt=8): 62 -at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].

given #10 (I,wt=8): 63 -at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].

given #11 (I,wt=11): 64 -enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].

given #12 (I,wt=9): 66 safe(A,B) | at(A,f2(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].

given #13 (I,wt=9): 67 safe(A,B) | at(A,f3(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].

given #14 (I,wt=10): 68 safe(A,B) | f3(A,B) != f2(A,B) # label(node_safe) # label(axiom).  [clausify(11)].

given #15 (I,wt=10): 69 -at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(13)].

given #16 (I,wt=14): 70 -at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(14)].

given #17 (I,wt=10): 71 -at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(14)].

given #18 (I,wt=11): 72 -at(A,B,C) | -at(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(15)].

given #19 (I,wt=16): 73 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(A,B,C) # label(train_enters) # label(axiom).  [clausify(18)].

given #20 (I,wt=16): 74 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].

given #21 (I,wt=16): 75 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -enter(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].

given #22 (I,wt=15): 76 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | less(A,D) # label(train_enters) # label(axiom).  [clausify(18)].

given #23 (I,wt=16): 77 -at(A,B,C) | out2 = C | s = C | in = C | out1 = C # label(at_restr) # label(axiom).  [clausify(19)].

given #24 (I,wt=8): 78 gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(22)].

given #25 (I,wt=3): 79 s != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #26 (I,wt=3): 81 out2 != in.  [copy(80),flip(a)].

given #27 (I,wt=3): 83 out2 != out1.  [copy(82),flip(a)].

given #28 (I,wt=3): 85 s != in.  [copy(84),flip(a)].

given #29 (I,wt=3): 87 s != out1.  [copy(86),flip(a)].

given #30 (I,wt=3): 88 out1 != in # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #31 (I,wt=7): 89 -enter(A,B,C) | in = C # label(enter_values) # label(axiom).  [clausify(24)].

given #32 (I,wt=10): 90 switch(A,s) = out1 | switch(A,s) = out2 # label(switch_s_values) # label(axiom).  [clausify(25)].

given #33 (I,wt=5): 91 switch(A,in) = s # label(switch_in_values) # label(axiom).  [clausify(26)].

given #34 (I,wt=13): 93 -at(A,B,s) | gate(B) != out2 | switch(A,s) = out2 # label(switch_s_with_gate_out2) # label(axiom).  [clausify(28)].

given #35 (I,wt=13): 95 -at(A,B,s) | gate(B) != out1 | switch(A,s) = out1 # label(switch_s_with_gate_out1) # label(axiom).  [clausify(30)].

given #36 (I,wt=13): 96 -enter(f13(A,B),f14(A,B),in) | at(succ(A),B,in) # label(enter_or_wait_at_in) # label(axiom).  [clausify(31)].

given #37 (I,wt=18): 97 -at(f13(A,B),f14(A,B),in) | open(f13(A,B),in) | at(succ(A),B,in) # label(enter_or_wait_at_in) # label(axiom).  [clausify(31)].

given #38 (I,wt=8): 98 -path_free(A,B,C,D) | in = C # label(path_from_to_values) # label(axiom).  [clausify(37)].

given #39 (I,wt=11): 99 -path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(37)].

given #40 (I,wt=11): 100 -open(A,in) | path_free(A,f15(A),in,gate(f15(A))) # label(open_in) # label(axiom).  [clausify(38)].

given #41 (I,wt=9): 101 open(A,in) | -path_free(A,B,in,gate(B)) # label(open_in) # label(axiom).  [clausify(38)].

given #42 (I,wt=9): 102 -path_free(A,B,in,out2) | at(A,B,in) # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].

given #43 (I,wt=9): 103 -path_free(A,B,in,out2) | gate(B) = out2 # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].

given #44 (I,wt=12): 104 -path_free(A,B,in,out2) | -at(A,C,in) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].

given #45 (I,wt=12): 105 -path_free(A,B,in,out2) | -at(A,C,s) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].

given #46 (I,wt=12): 106 -path_free(A,B,in,out2) | -at(A,C,out2) | C = B # label(path_free_from_in_to_out2) # label(axiom).  [clausify(39)].

given #47 (I,wt=13): 109 path_free(A,B,in,out2) | -at(A,B,in) | gate(B) != out2.  [copy(108),xx(d)].

given #48 (I,wt=9): 110 -path_free(A,B,in,out1) | at(A,B,in) # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].

given #49 (I,wt=9): 111 -path_free(A,B,in,out1) | gate(B) = out1 # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].

given #50 (I,wt=12): 112 -path_free(A,B,in,out1) | -at(A,C,in) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].

given #51 (I,wt=12): 113 -path_free(A,B,in,out1) | -at(A,C,s) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].

given #52 (I,wt=12): 114 -path_free(A,B,in,out1) | -at(A,C,out1) | C = B # label(path_free_from_in_to_out1) # label(axiom).  [clausify(40)].

given #53 (I,wt=13): 117 path_free(A,B,in,out1) | -at(A,B,in) | gate(B) != out1.  [copy(116),xx(d)].

given #54 (I,wt=3): 118 -safe(c1,c2) # label(collision_critical) # label(conjecture).  [deny(41)].

given #55 (I,wt=10): 119 at(A,f1(A,B),B) | -at(A,C,B).  [resolve(42,a,43,a)].

given #56 (I,wt=15): 120 switch(succ(A),B) != C | switch(A,B) = C | -at(A,D,B).  [resolve(44,b,43,a)].

given #57 (I,wt=16): 121 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,V7,E).  [resolve(45,b,43,a)].

given #58 (I,wt=19): 122 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(46,a,47,a)].

given #59 (I,wt=19): 123 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(46,a,48,a)].

given #60 (I,wt=17): 124 -open(f5(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(49,a,47,a)].

given #61 (I,wt=17): 125 -open(f5(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(49,a,48,a)].

given #62 (I,wt=20): 126 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | less(C,f4(A,C,D)).  [resolve(50,a,47,a)].

given #63 (I,wt=20): 127 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | open(f4(A,C,D),A).  [resolve(50,a,48,a)].

given #64 (I,wt=15): 128 in = A | -enter(succ(f11(B,C,D,E,A,F,V6)),F,V6).  [resolve(51,a,52,b)].

given #65 (I,wt=6): 129 in = A | -open(B,A).  [resolve(51,a,53,b)].

given #66 (I,wt=3): 130 less(A,A).  [factor(56,a,b)].

given #67 (A,wt=9): 131 less(A,B) | -less(C,B) | less(C,A).  [resolve(56,a,55,b)].

given #68 (F,wt=3): 191 -open(A,out1).  [ur(129,a,88,a(flip))].

given #69 (F,wt=3): 192 -open(A,s).  [ur(129,a,85,a(flip))].

given #70 (F,wt=3): 193 -open(A,out2).  [ur(129,a,81,a(flip))].

given #71 (F,wt=4): 156 -enter(A,B,out1).  [ur(89,b,88,a(flip))].

given #72 (T,wt=4): 141 less(pred(A),A).  [para(60(a,1),57(a,2))].

given #73 (T,wt=7): 132 -less(A,B) | less(A,succ(B)).  [resolve(57,a,55,b)].

given #74 (T,wt=5): 201 less(pred(A),succ(A)).  [resolve(132,a,141,a)].

given #75 (T,wt=5): 203 less(A,succ(succ(A))).  [resolve(132,a,57,a)].

given #76 (A,wt=7): 133 -less(succ(A),B) | less(A,B).  [resolve(57,a,55,a)].

given #77 (F,wt=4): 157 -enter(A,B,s).  [ur(89,b,85,a(flip))].

given #78 (F,wt=4): 158 -enter(A,B,out2).  [ur(89,b,81,a(flip))].

given #79 (F,wt=5): 163 -path_free(A,B,out1,C).  [ur(98,b,88,a(flip))].

given #80 (F,wt=5): 164 -path_free(A,B,s,C).  [ur(98,b,85,a(flip))].

given #81 (T,wt=5): 209 less(pred(pred(A)),A).  [para(60(a,1),201(a,2))].

given #82 (T,wt=6): 204 less(pred(A),succ(succ(A))).  [resolve(201,a,132,a)].

given #83 (T,wt=6): 210 less(A,succ(succ(succ(A)))).  [resolve(203,a,132,a)].

given #84 (T,wt=6): 215 less(pred(pred(A)),succ(A)).  [resolve(209,a,132,a)].

given #85 (A,wt=8): 134 -less(succ(A),A) | succ(A) = A.  [resolve(57,a,54,b),flip(b)].

given #86 (F,wt=5): 165 -path_free(A,B,out2,C).  [ur(98,b,81,a(flip))].

given #87 (F,wt=5): 166 -path_free(A,B,C,in).  [ur(99,b,81,a,c,88,a)].

given #88 (F,wt=5): 167 -path_free(A,B,C,s).  [ur(99,b,79,a(flip),c,87,a(flip))].

given #89 (F,wt=7): 173 f3(c1,c2) != f2(c1,c2).  [ur(68,a,118,a)].

given #90 (T,wt=6): 235 less(pred(pred(pred(A))),A).  [para(60(a,1),215(a,2))].

given #91 (T,wt=7): 142 less(A,pred(B)) | less(B,A).  [para(60(a,1),58(b,1))].

given #92 (T,wt=7): 195 less(A,succ(B)) | less(B,A).  [resolve(131,b,57,a)].

given #93 (T,wt=7): 197 less(A,B) | less(pred(B),A).  [resolve(141,a,131,b)].

given #94 (A,wt=10): 135 less(succ(A),B) | -less(C,B) | less(C,A).  [resolve(58,a,55,b)].

given #95 (F,wt=12): 188 -enter(succ(f11(A,B,C,D,out1,E,F)),E,F).  [ur(128,a,88,a(flip))].

given #96 (F,wt=12): 189 -enter(succ(f11(A,B,C,D,s,E,F)),E,F).  [ur(128,a,85,a(flip))].

given #97 (F,wt=12): 190 -enter(succ(f11(A,B,C,D,out2,E,F)),E,F).  [ur(128,a,81,a(flip))].

given #98 (T,wt=7): 198 -less(A,pred(B)) | less(A,B).  [resolve(141,a,55,b)].

given #99 (T,wt=7): 199 -less(A,B) | less(pred(A),B).  [resolve(141,a,55,a)].

given #100 (T,wt=7): 220 less(pred(A),succ(succ(succ(A)))).  [resolve(204,a,132,a)].

given #101 (T,wt=7): 225 less(A,succ(succ(succ(succ(A))))).  [resolve(210,a,133,a)].

given #102 (A,wt=10): 136 less(succ(A),B) | -less(A,C) | less(B,C).  [resolve(58,a,55,a)].

given #103 (T,wt=7): 230 less(pred(pred(A)),succ(succ(A))).  [resolve(215,a,132,a)].

given #104 (T,wt=7): 236 less(pred(pred(pred(A))),succ(A)).  [resolve(235,a,132,a)].

given #105 (T,wt=7): 274 less(pred(pred(pred(pred(A)))),A).  [resolve(198,a,235,a)].

given #106 (T,wt=8): 200 -less(A,pred(A)) | pred(A) = A.  [resolve(141,a,54,b)].

given #107 (A,wt=10): 137 less(succ(A),B) | -less(A,B) | B = A.  [resolve(58,a,54,b)].

given #108 (T,wt=8): 202 less(succ(A),succ(B)) | less(B,A).  [resolve(132,a,58,b)].

given #109 (T,wt=8): 205 less(A,succ(B)) | less(pred(B),A).  [resolve(201,a,131,b)].

given #110 (T,wt=8): 206 -less(A,pred(B)) | less(A,succ(B)).  [resolve(201,a,55,b)].

given #111 (T,wt=8): 207 -less(succ(A),B) | less(pred(A),B).  [resolve(201,a,55,a)].

given #112 (A,wt=10): 138 less(succ(A),B) | -less(A,B) | A = B.  [resolve(58,a,54,a)].

given #113 (T,wt=8): 211 less(A,succ(succ(B))) | less(B,A).  [resolve(203,a,131,b)].

given #114 (T,wt=8): 212 -less(A,B) | less(A,succ(succ(B))).  [resolve(203,a,55,b)].

given #115 (T,wt=8): 213 -less(succ(succ(A)),B) | less(A,B).  [resolve(203,a,55,a)].

given #116 (T,wt=8): 216 less(A,B) | less(pred(pred(B)),A).  [resolve(209,a,131,b)].

given #117 (A,wt=10): 139 less(A,B) | -less(C,succ(B)) | less(C,A).  [resolve(58,b,55,b)].

given #118 (T,wt=8): 217 -less(A,pred(pred(B))) | less(A,B).  [resolve(209,a,55,b)].

given #119 (T,wt=8): 218 -less(A,B) | less(pred(pred(A)),B).  [resolve(209,a,55,a)].

given #120 (T,wt=8): 241 less(A,succ(B)) | less(B,pred(A)).  [resolve(142,a,133,a)].

given #121 (T,wt=8): 249 less(A,succ(B)) | less(B,succ(A)).  [resolve(195,a,133,a)].

given #122 (A,wt=11): 140 less(A,B) | -less(A,succ(B)) | succ(B) = A.  [resolve(58,b,54,b)].

given #123 (T,wt=8): 254 less(pred(A),succ(B)) | less(B,A).  [resolve(197,a,133,a)].

given #124 (T,wt=8): 272 less(succ(A),B) | less(pred(B),A).  [resolve(135,b,141,a)].

given #125 (T,wt=8): 275 less(pred(A),B) | less(pred(B),A).  [resolve(198,a,197,b)].

given #126 (T,wt=8): 276 less(A,B) | less(pred(B),pred(A)).  [resolve(198,a,142,b)].

given #127 (A,wt=12): 143 safe(A,B) | -at(A,f2(A,B),C) | B = C.  [resolve(66,b,61,b)].

given #128 (T,wt=8): 277 less(pred(pred(A)),succ(succ(succ(A)))).  [resolve(220,a,199,a)].

given #129 (T,wt=8): 279 less(pred(A),succ(succ(succ(succ(A))))).  [resolve(220,a,132,a)].

given #130 (T,wt=8): 285 less(A,succ(succ(succ(succ(succ(A)))))).  [resolve(225,a,133,a)].

given #131 (T,wt=8): 292 less(pred(pred(pred(A))),succ(succ(A))).  [resolve(230,a,199,a)].

given #132 (A,wt=12): 144 safe(A,B) | -at(A,f2(A,B),C) | C = B.  [resolve(66,b,61,a)].

given #133 (T,wt=8): 298 less(pred(pred(pred(pred(A)))),succ(A)).  [resolve(236,a,199,a)].

given #134 (T,wt=8): 304 less(pred(pred(pred(pred(pred(A))))),A).  [resolve(274,a,199,a)].

given #135 (T,wt=9): 174 at(A,f1(A,B),B) | safe(A,B).  [resolve(119,b,67,b)].

given #136 (T,wt=9): 196 less(A,B) | less(C,A) | less(B,C).  [resolve(131,b,56,b)].

given #137 (A,wt=12): 145 safe(A,B) | -at(A,f3(A,B),C) | B = C.  [resolve(67,b,61,b)].

given #138 (T,wt=9): 221 less(A,succ(succ(B))) | less(pred(B),A).  [resolve(204,a,131,b)].

given #139 (T,wt=9): 222 -less(A,pred(B)) | less(A,succ(succ(B))).  [resolve(204,a,55,b)].

given #140 (T,wt=9): 223 -less(succ(succ(A)),B) | less(pred(A),B).  [resolve(204,a,55,a)].

given #141 (T,wt=9): 226 less(A,succ(succ(succ(B)))) | less(B,A).  [resolve(210,a,131,b)].

given #142 (A,wt=12): 146 safe(A,B) | -at(A,f3(A,B),C) | C = B.  [resolve(67,b,61,a)].

given #143 (T,wt=9): 227 -less(A,B) | less(A,succ(succ(succ(B)))).  [resolve(210,a,55,b)].

given #144 (T,wt=9): 228 -less(succ(succ(succ(A))),B) | less(A,B).  [resolve(210,a,55,a)].

given #145 (T,wt=9): 231 less(A,succ(B)) | less(pred(pred(B)),A).  [resolve(215,a,131,b)].

given #146 (T,wt=9): 232 -less(A,pred(pred(B))) | less(A,succ(B)).  [resolve(215,a,55,b)].

given #147 (A,wt=11): 147 less(A,f7(A,f3(A,B),B)) | safe(A,B).  [resolve(69,a,67,b)].

given #148 (T,wt=8): 555 less(c1,f7(c1,f3(c1,c2),c2)).  [resolve(147,b,118,a)].

given #149 (T,wt=9): 233 -less(succ(A),B) | less(pred(pred(A)),B).  [resolve(215,a,55,a)].

given #150 (T,wt=9): 237 less(A,B) | less(pred(pred(pred(B))),A).  [resolve(235,a,131,b)].

given #151 (T,wt=9): 238 -less(A,pred(pred(pred(B)))) | less(A,B).  [resolve(235,a,55,b)].

given #152 (A,wt=11): 148 less(A,f7(A,f2(A,B),B)) | safe(A,B).  [resolve(69,a,66,b)].

given #153 (T,wt=8): 589 less(c1,f7(c1,f2(c1,c2),c2)).  [resolve(148,b,118,a)].

given #154 (T,wt=9): 239 -less(A,B) | less(pred(pred(pred(A))),B).  [resolve(235,a,55,a)].

given #155 (T,wt=9): 262 less(succ(A),B) | less(pred(pred(B)),A).  [resolve(135,b,209,a)].

given #156 (T,wt=9): 264 less(succ(A),succ(succ(B))) | less(B,A).  [resolve(135,b,203,a)].

given #157 (A,wt=19): 149 enter(f8(A,f3(A,B),B),f3(A,B),f9(A,f3(A,B),B)) | safe(A,B).  [resolve(70,a,67,b)].

given #158 (T,wt=9): 265 less(succ(A),succ(B)) | less(pred(B),A).  [resolve(135,b,201,a)].

given #159 (T,wt=9): 325 less(pred(A),B) | less(pred(B),succ(A)).  [resolve(205,a,199,a)].

given #160 (T,wt=9): 328 less(pred(A),succ(B)) | less(B,succ(A)).  [resolve(205,a,133,a)].

given #161 (T,wt=9): 333 less(pred(pred(pred(pred(pred(A))))),succ(A)).  [resolve(206,a,274,a)].

given #162 (A,wt=19): 150 enter(f8(A,f2(A,B),B),f2(A,B),f9(A,f2(A,B),B)) | safe(A,B).  [resolve(70,a,66,b)].

given #163 (T,wt=9): 335 less(A,succ(B)) | less(pred(B),pred(A)).  [resolve(206,a,142,b)].

given #164 (T,wt=9): 336 less(pred(A),succ(succ(succ(succ(succ(A)))))).  [resolve(207,a,225,a)].

given #165 (T,wt=9): 340 less(A,B) | less(pred(B),succ(succ(A))).  [resolve(211,a,199,a)].

given #166 (T,wt=9): 343 less(A,succ(B)) | less(B,succ(succ(A))).  [resolve(211,a,133,a)].

given #167 (A,wt=11): 151 less(f8(A,f3(A,B),B),A) | safe(A,B).  [resolve(71,a,67,b)].

given #168 (T,wt=8): 736 less(f8(c1,f3(c1,c2),c2),c1).  [resolve(151,b,118,a)].

given #169 (T,wt=9): 348 less(pred(pred(pred(pred(A)))),succ(succ(A))).  [resolve(212,a,274,a)].

given #170 (T,wt=9): 349 less(pred(pred(pred(A))),succ(succ(succ(A)))).  [resolve(212,a,236,a)].

given #171 (T,wt=9): 350 less(pred(pred(A)),succ(succ(succ(succ(A))))).  [resolve(212,a,230,a)].

given #172 (A,wt=11): 152 less(f8(A,f2(A,B),B),A) | safe(A,B).  [resolve(71,a,66,b)].

given #173 (T,wt=8): 766 less(f8(c1,f2(c1,c2),c2),c1).  [resolve(152,b,118,a)].

given #174 (T,wt=9): 351 less(A,succ(succ(succ(succ(succ(succ(A))))))).  [resolve(212,a,225,a)].

given #175 (T,wt=9): 353 less(A,succ(succ(B))) | less(B,pred(A)).  [resolve(212,a,142,b)].

given #176 (T,wt=9): 356 less(pred(pred(A)),B) | less(pred(B),A).  [resolve(216,a,199,a)].

given #177 (A,wt=12): 153 -at(A,B,C) | f3(A,C) = B | safe(A,C).  [resolve(72,a,67,b),flip(b)].

given #178 (F,wt=6): 817 -at(c1,f2(c1,c2),c2).  [ur(153,b,173,a,c,118,a)].

============================== PROOF =================================

% Proof 1 at 0.06 (+ 0.01) seconds.
% Length of proof is 12.
% Level of proof is 4.
% Maximum clause weight is 12.000.
% Given clauses 178.

11 (all T all N (safe(T,N) <-> (all Train all OtherTrain (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)))) # label(node_safe) # label(axiom) # label(non_clause).  [assumption].
15 (all T all Train all OtherTrain all N (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)) # label(occupied_only_once) # label(axiom) # label(non_clause).  [assumption].
41 (all T all N safe(T,N)) # label(collision_critical) # label(conjecture) # label(non_clause) # label(goal).  [goal].
66 safe(A,B) | at(A,f2(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
67 safe(A,B) | at(A,f3(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
68 safe(A,B) | f3(A,B) != f2(A,B) # label(node_safe) # label(axiom).  [clausify(11)].
72 -at(A,B,C) | -at(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(15)].
118 -safe(c1,c2) # label(collision_critical) # label(conjecture).  [deny(41)].
153 -at(A,B,C) | f3(A,C) = B | safe(A,C).  [resolve(72,a,67,b),flip(b)].
173 f3(c1,c2) != f2(c1,c2).  [ur(68,a,118,a)].
817 -at(c1,f2(c1,c2),c2).  [ur(153,b,173,a,c,118,a)].
818 $F.  [resolve(817,a,66,b),unit_del(a,118)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=178. Generated=2824. Kept=756. proofs=1.
Usable=178. Sos=575. Demods=3. Limbo=0, Disabled=87. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=2067. Back_subsumed=3.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=3 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=18576. Demod_rewrites=381.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=32833. Nonunit_bsub_feature_tests=2089.
Megabytes=1.79.
User_CPU=0.06, System_CPU=0.01, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 16143 exit (max_proofs) Sat Jul  8 18:29:46 2017
