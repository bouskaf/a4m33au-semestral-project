============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 16078 was started by mac on Filip-MacBook-Pro.local,
Sat Jul  8 18:25:34 2017
The command was "./prover9".
============================== end of head ===========================

============================== INPUT =================================
set(prolog_style_variables).

formulas(assumptions).
(all X all Y (less(X,Y) & less(Y,X) -> X = Y)) # label(antisymmetry) # label(axiom).
(all X all Y all Z (less(X,Y) & less(Y,Z) -> less(X,Z))) # label(transitivity) # label(axiom).
(all X all Y (less(X,Y) | less(Y,X))) # label(totality) # label(axiom).
(all X (less(X,succ(X)) & (all Y (less(Y,X) | less(succ(X),Y))))) # label(succ) # label(axiom).
(all X (pred(succ(X)) = X & succ(pred(X)) = X)) # label(pred) # label(axiom).
(all T all Train all N1 all N2 (at(T,Train,N1) & at(T,Train,N2) -> N1 = N2)) # label(at_uniq) # label(axiom).
(all T all Train all N all OtherN (at(T,Train,N) -> -enter(T,Train,OtherN))) # label(at_nondup) # label(axiom).
(all T all Train all OtherTrain all N (at(T,Train,N) -> -enter(T,OtherTrain,N))) # label(input_nocol) # label(axiom).
(all T all Train all OtherTrain all N (enter(T,Train,N) & enter(T,OtherTrain,N) -> Train = OtherTrain)) # label(enter_uniq) # label(axiom).
(all T all N (empty(T,N) <-> (all Train -at(T,Train,N)))) # label(node_empty) # label(axiom).
(all T all N (safe(T,N) <-> (all Train all OtherTrain (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)))) # label(node_safe) # label(axiom).
(all N (notBlocked(N) <-> (all T1 all Train (at(T1,Train,N) & -open(T1,N) -> (exists T2 (less(T1,T2) & open(T2,N))))))) # label(not_blocked) # label(axiom).
(all T1 all Train all N (at(T1,Train,N) -> (exists T2 (move(T2,Train) & less(T1,T2))))) # label(train_will_move) # label(axiom).
(all T1 all Train all N1 (at(T1,Train,N1) -> (exists T2 exists N2 (enter(T2,Train,N2) & less(T2,T1))))) # label(train_entered) # label(axiom).
(all T all Train all OtherTrain all N (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)) # label(occupied_only_once) # label(axiom).
(all T all N1 all N2 (switch(succ(T),N1) = N2 & -empty(T,N1) -> switch(T,N1) = N2)) # label(switch_restr) # label(axiom).
(all T all Train move(T,Train)) # label(train_moves) # label(axiom).
(exists Train exists N1 all T1 all T2 all N2 enter(succ(T2),Train,N1)) -> -at(T1,Train,N2) & -at(T2,Train,N2) & -enter(T2,Train,N2) & empty(T2,N1) & input(N1) & less(T1,T2) # label(train_enters) # label(axiom).
(all T all Train all N (at(T,Train,N) -> N = out2 | N = out1 | N = in2 | N = in1 | N = s1 | N = s2)) # label(at_restr) # label(axiom).
(all T all N (open(T,N) -> input(N))) # label(open_restr) # label(axiom).
(all N (input(N) -> N = in2 | N = in1)) # label(input) # label(axiom).
(all Train (gate(Train) = out2 | gate(Train) = out1)) # label(gate_restr) # label(axiom).
out2 != out1 & out2 != in2 & out2 != in1 & out2 != s1 & out2 != s2 & out1 != in2 & out1 != in1 & out1 != s1 & out1 != s2 & in2 != in1 & in2 != s1 & in2 != s2 & in1 != s1 & in1 != s2 & s1 != s2 # label(distinct_nodes) # label(axiom).
(all T all Train all N (enter(T,Train,N) -> N = in2 | N = in1)) # label(enter_values) # label(axiom).
(all T switch(T,in2) = s2) # label(switch_in2_values) # label(axiom).
(all T switch(T,in1) = s1) # label(switch_in1_values) # label(axiom).
(all T (switch(T,s1) = out1 | switch(T,s1) = out2)) # label(switch_s1_values) # label(axiom).
(all T (switch(T,s2) = out1 | switch(T,s2) = out2)) # label(switch_s2_values) # label(axiom).
(all T all Train (at(T,Train,in2) & gate(Train) = out2 -> switch(T,in2) = s2)) # label(switch_in2_with_gate_out2) # label(axiom).
(all T all Train (at(T,Train,s2) & gate(Train) = out2 -> switch(T,s2) = out2)) # label(switch_s2_with_gate_out2) # label(axiom).
(all T all Train (at(T,Train,in2) & gate(Train) = out1 -> switch(T,in2) = s2)) # label(switch_in2_with_gate_out1) # label(axiom).
(all T all Train (at(T,Train,s2) & gate(Train) = out1 -> switch(T,s2) = out1)) # label(switch_s2_with_gate_out1) # label(axiom).
(all T all Train (at(T,Train,in1) & gate(Train) = out2 -> switch(T,in1) = s1)) # label(switch_in1_with_gate_out2) # label(axiom).
(all T all Train (at(T,Train,s1) & gate(Train) = out2 -> switch(T,s1) = out2)) # label(switch_s1_with_gate_out2) # label(axiom).
(all T all Train (at(T,Train,in1) & gate(Train) = out1 -> switch(T,in1) = s1)) # label(switch_in1_with_gate_out1) # label(axiom).
(all T all Train (at(T,Train,s1) & gate(Train) = out1 -> switch(T,s1) = out1)) # label(switch_s1_with_gate_out1) # label(axiom).
(all T all Train (enter(T,Train,in2) | at(T,Train,in2) & -open(T,in2))) -> at(succ(T),Train,in2) # label(enter_or_wait_at_in2) # label(axiom).
(all T all Train ((at(T,Train,in2) & open(T,in2) & move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,in2) & open(T,in2) & -move(T,Train) -> at(succ(T),Train,in2)))) # label(move_or_stay_from_in2_to_s2) # label(axiom).
(all T all Train (enter(T,Train,in1) | at(T,Train,in1) & -open(T,in1))) -> at(succ(T),Train,in1) # label(enter_or_wait_at_in1) # label(axiom).
(all T all Train ((at(T,Train,in1) & open(T,in1) & move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,in1) & open(T,in1) & -move(T,Train) -> at(succ(T),Train,in1)))) # label(move_or_stay_from_in1_to_s1) # label(axiom).
(all T all Train ((at(T,Train,out2) & -move(T,Train) -> at(succ(T),Train,out2)) | (at(T,Train,out2) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out2) # label(axiom).
(all T all Train ((at(T,Train,out1) & -move(T,Train) -> at(succ(T),Train,out1)) | (at(T,Train,out1) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out1) # label(axiom).
(all T all Train ((at(T,Train,s1) & switch(T,s1) = out1 & -move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,s1) & switch(T,s1) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s1_to_out1) # label(axiom).
(all T all Train ((at(T,Train,s1) & switch(T,s1) = out2 & -move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,s1) & switch(T,s1) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s1_to_out2) # label(axiom).
(all T all Train ((at(T,Train,s2) & switch(T,s2) = out1 & -move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,s2) & switch(T,s2) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s2_to_out1) # label(axiom).
(all T all Train ((at(T,Train,s2) & switch(T,s2) = out2 & -move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,s2) & switch(T,s2) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s2_to_out2) # label(axiom).
(all T all Train all N1 all N2 (path_free(T,Train,N1,N2) -> N1 = in2 & N2 = out2 | N1 = in2 & N2 = out1 | N1 = in1 & N2 = out2 | N1 = in1 & N2 = out1)) # label(path_from_to_values) # label(axiom).
(all T (open(T,in2) <-> (exists Train path_free(T,Train,in2,gate(Train))))) # label(open_in2) # label(axiom).
(all T (open(T,in1) <-> (exists Train path_free(T,Train,in1,gate(Train))))) # label(open_in1) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in2,out2) <-> at(T,Train,in2) & gate(Train) = out2 & (-at(T,OtherTrain,in2) | Train = OtherTrain) & (-at(T,OtherTrain,s2) | Train = OtherTrain) & (-at(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in2_to_out2) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in2,out1) <-> at(T,Train,in2) & gate(Train) = out1 & (-at(T,OtherTrain,in2) | Train = OtherTrain) & (-at(T,OtherTrain,s2) | Train = OtherTrain) & (-at(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in2_to_out1) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in1,out2) <-> at(T,Train,in1) & gate(Train) = out2 & (-at(T,OtherTrain,in1) | Train = OtherTrain) & (-at(T,OtherTrain,s1) | Train = OtherTrain) & (-at(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in1_to_out2) # label(axiom).
(all T all Train all OtherTrain (path_free(T,Train,in1,out1) <-> at(T,Train,in1) & gate(Train) = out1 & (-at(T,OtherTrain,in1) | Train = OtherTrain) & (-at(T,OtherTrain,s1) | Train = OtherTrain) & (-at(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in1_to_out1) # label(axiom).
end_of_list.

formulas(goals).
(all T all N safe(T,N)) # label(collision_critical) # label(conjecture).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all X all Y (less(X,Y) & less(Y,X) -> X = Y)) # label(antisymmetry) # label(axiom) # label(non_clause).  [assumption].
2 (all X all Y all Z (less(X,Y) & less(Y,Z) -> less(X,Z))) # label(transitivity) # label(axiom) # label(non_clause).  [assumption].
3 (all X all Y (less(X,Y) | less(Y,X))) # label(totality) # label(axiom) # label(non_clause).  [assumption].
4 (all X (less(X,succ(X)) & (all Y (less(Y,X) | less(succ(X),Y))))) # label(succ) # label(axiom) # label(non_clause).  [assumption].
5 (all X (pred(succ(X)) = X & succ(pred(X)) = X)) # label(pred) # label(axiom) # label(non_clause).  [assumption].
6 (all T all Train all N1 all N2 (at(T,Train,N1) & at(T,Train,N2) -> N1 = N2)) # label(at_uniq) # label(axiom) # label(non_clause).  [assumption].
7 (all T all Train all N all OtherN (at(T,Train,N) -> -enter(T,Train,OtherN))) # label(at_nondup) # label(axiom) # label(non_clause).  [assumption].
8 (all T all Train all OtherTrain all N (at(T,Train,N) -> -enter(T,OtherTrain,N))) # label(input_nocol) # label(axiom) # label(non_clause).  [assumption].
9 (all T all Train all OtherTrain all N (enter(T,Train,N) & enter(T,OtherTrain,N) -> Train = OtherTrain)) # label(enter_uniq) # label(axiom) # label(non_clause).  [assumption].
10 (all T all N (empty(T,N) <-> (all Train -at(T,Train,N)))) # label(node_empty) # label(axiom) # label(non_clause).  [assumption].
11 (all T all N (safe(T,N) <-> (all Train all OtherTrain (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)))) # label(node_safe) # label(axiom) # label(non_clause).  [assumption].
12 (all N (notBlocked(N) <-> (all T1 all Train (at(T1,Train,N) & -open(T1,N) -> (exists T2 (less(T1,T2) & open(T2,N))))))) # label(not_blocked) # label(axiom) # label(non_clause).  [assumption].
13 (all T1 all Train all N (at(T1,Train,N) -> (exists T2 (move(T2,Train) & less(T1,T2))))) # label(train_will_move) # label(axiom) # label(non_clause).  [assumption].
14 (all T1 all Train all N1 (at(T1,Train,N1) -> (exists T2 exists N2 (enter(T2,Train,N2) & less(T2,T1))))) # label(train_entered) # label(axiom) # label(non_clause).  [assumption].
15 (all T all Train all OtherTrain all N (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)) # label(occupied_only_once) # label(axiom) # label(non_clause).  [assumption].
16 (all T all N1 all N2 (switch(succ(T),N1) = N2 & -empty(T,N1) -> switch(T,N1) = N2)) # label(switch_restr) # label(axiom) # label(non_clause).  [assumption].
17 (all T all Train move(T,Train)) # label(train_moves) # label(axiom) # label(non_clause).  [assumption].
18 (exists Train exists N1 all T1 all T2 all N2 enter(succ(T2),Train,N1)) -> -at(T1,Train,N2) & -at(T2,Train,N2) & -enter(T2,Train,N2) & empty(T2,N1) & input(N1) & less(T1,T2) # label(train_enters) # label(axiom) # label(non_clause).  [assumption].
19 (all T all Train all N (at(T,Train,N) -> N = out2 | N = out1 | N = in2 | N = in1 | N = s1 | N = s2)) # label(at_restr) # label(axiom) # label(non_clause).  [assumption].
20 (all T all N (open(T,N) -> input(N))) # label(open_restr) # label(axiom) # label(non_clause).  [assumption].
21 (all N (input(N) -> N = in2 | N = in1)) # label(input) # label(axiom) # label(non_clause).  [assumption].
22 (all Train (gate(Train) = out2 | gate(Train) = out1)) # label(gate_restr) # label(axiom) # label(non_clause).  [assumption].
23 out2 != out1 & out2 != in2 & out2 != in1 & out2 != s1 & out2 != s2 & out1 != in2 & out1 != in1 & out1 != s1 & out1 != s2 & in2 != in1 & in2 != s1 & in2 != s2 & in1 != s1 & in1 != s2 & s1 != s2 # label(distinct_nodes) # label(axiom) # label(non_clause).  [assumption].
24 (all T all Train all N (enter(T,Train,N) -> N = in2 | N = in1)) # label(enter_values) # label(axiom) # label(non_clause).  [assumption].
25 (all T switch(T,in2) = s2) # label(switch_in2_values) # label(axiom) # label(non_clause).  [assumption].
26 (all T switch(T,in1) = s1) # label(switch_in1_values) # label(axiom) # label(non_clause).  [assumption].
27 (all T (switch(T,s1) = out1 | switch(T,s1) = out2)) # label(switch_s1_values) # label(axiom) # label(non_clause).  [assumption].
28 (all T (switch(T,s2) = out1 | switch(T,s2) = out2)) # label(switch_s2_values) # label(axiom) # label(non_clause).  [assumption].
29 (all T all Train (at(T,Train,in2) & gate(Train) = out2 -> switch(T,in2) = s2)) # label(switch_in2_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
30 (all T all Train (at(T,Train,s2) & gate(Train) = out2 -> switch(T,s2) = out2)) # label(switch_s2_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
31 (all T all Train (at(T,Train,in2) & gate(Train) = out1 -> switch(T,in2) = s2)) # label(switch_in2_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
32 (all T all Train (at(T,Train,s2) & gate(Train) = out1 -> switch(T,s2) = out1)) # label(switch_s2_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
33 (all T all Train (at(T,Train,in1) & gate(Train) = out2 -> switch(T,in1) = s1)) # label(switch_in1_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
34 (all T all Train (at(T,Train,s1) & gate(Train) = out2 -> switch(T,s1) = out2)) # label(switch_s1_with_gate_out2) # label(axiom) # label(non_clause).  [assumption].
35 (all T all Train (at(T,Train,in1) & gate(Train) = out1 -> switch(T,in1) = s1)) # label(switch_in1_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
36 (all T all Train (at(T,Train,s1) & gate(Train) = out1 -> switch(T,s1) = out1)) # label(switch_s1_with_gate_out1) # label(axiom) # label(non_clause).  [assumption].
37 (all T all Train (enter(T,Train,in2) | at(T,Train,in2) & -open(T,in2))) -> at(succ(T),Train,in2) # label(enter_or_wait_at_in2) # label(axiom) # label(non_clause).  [assumption].
38 (all T all Train ((at(T,Train,in2) & open(T,in2) & move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,in2) & open(T,in2) & -move(T,Train) -> at(succ(T),Train,in2)))) # label(move_or_stay_from_in2_to_s2) # label(axiom) # label(non_clause).  [assumption].
39 (all T all Train (enter(T,Train,in1) | at(T,Train,in1) & -open(T,in1))) -> at(succ(T),Train,in1) # label(enter_or_wait_at_in1) # label(axiom) # label(non_clause).  [assumption].
40 (all T all Train ((at(T,Train,in1) & open(T,in1) & move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,in1) & open(T,in1) & -move(T,Train) -> at(succ(T),Train,in1)))) # label(move_or_stay_from_in1_to_s1) # label(axiom) # label(non_clause).  [assumption].
41 (all T all Train ((at(T,Train,out2) & -move(T,Train) -> at(succ(T),Train,out2)) | (at(T,Train,out2) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out2) # label(axiom) # label(non_clause).  [assumption].
42 (all T all Train ((at(T,Train,out1) & -move(T,Train) -> at(succ(T),Train,out1)) | (at(T,Train,out1) & move(T,Train) -> (all N -at(succ(T),Train,N))))) # label(leave_or_stay_at_out1) # label(axiom) # label(non_clause).  [assumption].
43 (all T all Train ((at(T,Train,s1) & switch(T,s1) = out1 & -move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,s1) & switch(T,s1) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s1_to_out1) # label(axiom) # label(non_clause).  [assumption].
44 (all T all Train ((at(T,Train,s1) & switch(T,s1) = out2 & -move(T,Train) -> at(succ(T),Train,s1)) | (at(T,Train,s1) & switch(T,s1) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s1_to_out2) # label(axiom) # label(non_clause).  [assumption].
45 (all T all Train ((at(T,Train,s2) & switch(T,s2) = out1 & -move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,s2) & switch(T,s2) = out1 & move(T,Train) -> at(succ(T),Train,out1)))) # label(move_or_stay_from_s2_to_out1) # label(axiom) # label(non_clause).  [assumption].
46 (all T all Train ((at(T,Train,s2) & switch(T,s2) = out2 & -move(T,Train) -> at(succ(T),Train,s2)) | (at(T,Train,s2) & switch(T,s2) = out2 & move(T,Train) -> at(succ(T),Train,out2)))) # label(move_or_stay_from_s2_to_out2) # label(axiom) # label(non_clause).  [assumption].
47 (all T all Train all N1 all N2 (path_free(T,Train,N1,N2) -> N1 = in2 & N2 = out2 | N1 = in2 & N2 = out1 | N1 = in1 & N2 = out2 | N1 = in1 & N2 = out1)) # label(path_from_to_values) # label(axiom) # label(non_clause).  [assumption].
48 (all T (open(T,in2) <-> (exists Train path_free(T,Train,in2,gate(Train))))) # label(open_in2) # label(axiom) # label(non_clause).  [assumption].
49 (all T (open(T,in1) <-> (exists Train path_free(T,Train,in1,gate(Train))))) # label(open_in1) # label(axiom) # label(non_clause).  [assumption].
50 (all T all Train all OtherTrain (path_free(T,Train,in2,out2) <-> at(T,Train,in2) & gate(Train) = out2 & (-at(T,OtherTrain,in2) | Train = OtherTrain) & (-at(T,OtherTrain,s2) | Train = OtherTrain) & (-at(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in2_to_out2) # label(axiom) # label(non_clause).  [assumption].
51 (all T all Train all OtherTrain (path_free(T,Train,in2,out1) <-> at(T,Train,in2) & gate(Train) = out1 & (-at(T,OtherTrain,in2) | Train = OtherTrain) & (-at(T,OtherTrain,s2) | Train = OtherTrain) & (-at(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in2_to_out1) # label(axiom) # label(non_clause).  [assumption].
52 (all T all Train all OtherTrain (path_free(T,Train,in1,out2) <-> at(T,Train,in1) & gate(Train) = out2 & (-at(T,OtherTrain,in1) | Train = OtherTrain) & (-at(T,OtherTrain,s1) | Train = OtherTrain) & (-at(T,OtherTrain,out2) | Train = OtherTrain))) # label(path_free_from_in1_to_out2) # label(axiom) # label(non_clause).  [assumption].
53 (all T all Train all OtherTrain (path_free(T,Train,in1,out1) <-> at(T,Train,in1) & gate(Train) = out1 & (-at(T,OtherTrain,in1) | Train = OtherTrain) & (-at(T,OtherTrain,s1) | Train = OtherTrain) & (-at(T,OtherTrain,out1) | Train = OtherTrain))) # label(path_free_from_in1_to_out1) # label(axiom) # label(non_clause).  [assumption].
54 (all T all N safe(T,N)) # label(collision_critical) # label(conjecture) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
-less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].
-less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].
less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].
less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].
less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].
pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
-at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].
-at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].
-at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].
-enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].
-empty(A,B) | -at(A,C,B) # label(node_empty) # label(axiom).  [clausify(10)].
empty(A,B) | at(A,f1(A,B),B) # label(node_empty) # label(axiom).  [clausify(10)].
-safe(A,B) | -at(A,C,B) | -at(A,D,B) | D = C # label(node_safe) # label(axiom).  [clausify(11)].
safe(A,B) | at(A,f2(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
safe(A,B) | at(A,f3(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
safe(A,B) | f3(A,B) != f2(A,B) # label(node_safe) # label(axiom).  [clausify(11)].
-notBlocked(A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)) # label(not_blocked) # label(axiom).  [clausify(12)].
-notBlocked(A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A) # label(not_blocked) # label(axiom).  [clausify(12)].
notBlocked(A) | at(f5(A),f6(A),A) # label(not_blocked) # label(axiom).  [clausify(12)].
notBlocked(A) | -open(f5(A),A) # label(not_blocked) # label(axiom).  [clausify(12)].
notBlocked(A) | -less(f5(A),B) | -open(B,A) # label(not_blocked) # label(axiom).  [clausify(12)].
-at(A,B,C) | move(f7(A,B,C),B) # label(train_will_move) # label(axiom).  [clausify(13)].
-at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(13)].
-at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(14)].
-at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(14)].
-at(A,B,C) | -at(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(15)].
switch(succ(A),B) != C | empty(A,B) | switch(A,B) = C # label(switch_restr) # label(axiom).  [clausify(16)].
move(A,B) # label(train_moves) # label(axiom).  [clausify(17)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(A,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -enter(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | empty(D,E) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | input(E) # label(train_enters) # label(axiom).  [clausify(18)].
-enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | less(A,D) # label(train_enters) # label(axiom).  [clausify(18)].
-at(A,B,C) | out2 = C | out1 = C | in2 = C | in1 = C | s1 = C | s2 = C # label(at_restr) # label(axiom).  [clausify(19)].
-open(A,B) | input(B) # label(open_restr) # label(axiom).  [clausify(20)].
-input(A) | in2 = A | in1 = A # label(input) # label(axiom).  [clausify(21)].
gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(22)].
out1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
in2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
in1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
s1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
s2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
in2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
in1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
s1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
s2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
in1 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
s1 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
s2 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
s1 != in1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
s2 != in1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
s2 != s1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
-enter(A,B,C) | in2 = C | in1 = C # label(enter_values) # label(axiom).  [clausify(24)].
switch(A,in2) = s2 # label(switch_in2_values) # label(axiom).  [clausify(25)].
switch(A,in1) = s1 # label(switch_in1_values) # label(axiom).  [clausify(26)].
switch(A,s1) = out1 | switch(A,s1) = out2 # label(switch_s1_values) # label(axiom).  [clausify(27)].
switch(A,s2) = out1 | switch(A,s2) = out2 # label(switch_s2_values) # label(axiom).  [clausify(28)].
-at(A,B,in2) | gate(B) != out2 | switch(A,in2) = s2 # label(switch_in2_with_gate_out2) # label(axiom).  [clausify(29)].
-at(A,B,s2) | gate(B) != out2 | switch(A,s2) = out2 # label(switch_s2_with_gate_out2) # label(axiom).  [clausify(30)].
-at(A,B,in2) | gate(B) != out1 | switch(A,in2) = s2 # label(switch_in2_with_gate_out1) # label(axiom).  [clausify(31)].
-at(A,B,s2) | gate(B) != out1 | switch(A,s2) = out1 # label(switch_s2_with_gate_out1) # label(axiom).  [clausify(32)].
-at(A,B,in1) | gate(B) != out2 | switch(A,in1) = s1 # label(switch_in1_with_gate_out2) # label(axiom).  [clausify(33)].
-at(A,B,s1) | gate(B) != out2 | switch(A,s1) = out2 # label(switch_s1_with_gate_out2) # label(axiom).  [clausify(34)].
-at(A,B,in1) | gate(B) != out1 | switch(A,in1) = s1 # label(switch_in1_with_gate_out1) # label(axiom).  [clausify(35)].
-at(A,B,s1) | gate(B) != out1 | switch(A,s1) = out1 # label(switch_s1_with_gate_out1) # label(axiom).  [clausify(36)].
-enter(f13(A,B),f14(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(37)].
-at(f13(A,B),f14(A,B),in2) | open(f13(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(37)].
-enter(f15(A,B),f16(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(39)].
-at(f15(A,B),f16(A,B),in1) | open(f15(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(39)].
-path_free(A,B,C,D) | in2 = C | in1 = C # label(path_from_to_values) # label(axiom).  [clausify(47)].
-path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(47)].
-open(A,in2) | path_free(A,f17(A),in2,gate(f17(A))) # label(open_in2) # label(axiom).  [clausify(48)].
open(A,in2) | -path_free(A,B,in2,gate(B)) # label(open_in2) # label(axiom).  [clausify(48)].
-open(A,in1) | path_free(A,f18(A),in1,gate(f18(A))) # label(open_in1) # label(axiom).  [clausify(49)].
open(A,in1) | -path_free(A,B,in1,gate(B)) # label(open_in1) # label(axiom).  [clausify(49)].
-path_free(A,B,in2,out2) | at(A,B,in2) # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
-path_free(A,B,in2,out2) | gate(B) = out2 # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
-path_free(A,B,in2,out2) | -at(A,C,in2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
-path_free(A,B,in2,out2) | -at(A,C,s2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
-path_free(A,B,in2,out2) | -at(A,C,out2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2 | at(A,C,in2) | at(A,C,s2) | at(A,C,out2) # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2 | C != B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
-path_free(A,B,in2,out1) | at(A,B,in2) # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
-path_free(A,B,in2,out1) | gate(B) = out1 # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
-path_free(A,B,in2,out1) | -at(A,C,in2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
-path_free(A,B,in2,out1) | -at(A,C,s2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
-path_free(A,B,in2,out1) | -at(A,C,out1) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1 | at(A,C,in2) | at(A,C,s2) | at(A,C,out1) # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1 | C != B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
-path_free(A,B,in1,out2) | at(A,B,in1) # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
-path_free(A,B,in1,out2) | gate(B) = out2 # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
-path_free(A,B,in1,out2) | -at(A,C,in1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
-path_free(A,B,in1,out2) | -at(A,C,s1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
-path_free(A,B,in1,out2) | -at(A,C,out2) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2 | at(A,C,in1) | at(A,C,s1) | at(A,C,out2) # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2 | C != B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
-path_free(A,B,in1,out1) | at(A,B,in1) # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
-path_free(A,B,in1,out1) | gate(B) = out1 # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
-path_free(A,B,in1,out1) | -at(A,C,in1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
-path_free(A,B,in1,out1) | -at(A,C,s1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
-path_free(A,B,in1,out1) | -at(A,C,out1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1 | at(A,C,in1) | at(A,C,s1) | at(A,C,out1) # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1 | C != B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
-safe(c1,c2) # label(collision_critical) # label(conjecture).  [deny(54)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating empty/2
55 empty(A,B) | at(A,f1(A,B),B) # label(node_empty) # label(axiom).  [clausify(10)].
56 -empty(A,B) | -at(A,C,B) # label(node_empty) # label(axiom).  [clausify(10)].
Derived: at(A,f1(A,B),B) | -at(A,C,B).  [resolve(55,a,56,a)].
57 switch(succ(A),B) != C | empty(A,B) | switch(A,B) = C # label(switch_restr) # label(axiom).  [clausify(16)].
Derived: switch(succ(A),B) != C | switch(A,B) = C | -at(A,D,B).  [resolve(57,b,56,a)].
58 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | empty(D,E) # label(train_enters) # label(axiom).  [clausify(18)].
Derived: -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,V7,E).  [resolve(58,b,56,a)].

Eliminating notBlocked/1
59 notBlocked(A) | at(f5(A),f6(A),A) # label(not_blocked) # label(axiom).  [clausify(12)].
60 -notBlocked(A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)) # label(not_blocked) # label(axiom).  [clausify(12)].
61 -notBlocked(A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A) # label(not_blocked) # label(axiom).  [clausify(12)].
Derived: at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(59,a,60,a)].
Derived: at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(59,a,61,a)].
62 notBlocked(A) | -open(f5(A),A) # label(not_blocked) # label(axiom).  [clausify(12)].
Derived: -open(f5(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(62,a,60,a)].
Derived: -open(f5(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(62,a,61,a)].
63 notBlocked(A) | -less(f5(A),B) | -open(B,A) # label(not_blocked) # label(axiom).  [clausify(12)].
Derived: -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | less(C,f4(A,C,D)).  [resolve(63,a,60,a)].
Derived: -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | open(f4(A,C,D),A).  [resolve(63,a,61,a)].

Eliminating move/2

Eliminating input/1
64 -input(A) | in2 = A | in1 = A # label(input) # label(axiom).  [clausify(21)].
65 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | input(E) # label(train_enters) # label(axiom).  [clausify(18)].
66 -open(A,B) | input(B) # label(open_restr) # label(axiom).  [clausify(20)].
Derived: in2 = A | in1 = A | -enter(succ(f11(B,C,D,E,A,F,V6)),F,V6).  [resolve(64,a,65,b)].
Derived: in2 = A | in1 = A | -open(B,A).  [resolve(64,a,66,b)].

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, open, less, safe, at, enter, path_free ]).
Function symbol precedence:  function_order([ in1, in2, out1, out2, s1, s2, c1, c2, switch, f1, f2, f3, f13, f14, f15, f16, gate, succ, pred, f5, f6, f17, f18, f4, f7, f8, f9, f11 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      67 -less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].
kept:      68 -less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].
kept:      69 less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].
kept:      70 less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].
kept:      71 less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].
kept:      72 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
kept:      73 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
kept:      74 -at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].
kept:      75 -at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].
kept:      76 -at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].
kept:      77 -enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].
kept:      78 -safe(A,B) | -at(A,C,B) | -at(A,D,B) | D = C # label(node_safe) # label(axiom).  [clausify(11)].
kept:      79 safe(A,B) | at(A,f2(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
kept:      80 safe(A,B) | at(A,f3(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
kept:      81 safe(A,B) | f3(A,B) != f2(A,B) # label(node_safe) # label(axiom).  [clausify(11)].
kept:      82 -at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(13)].
kept:      83 -at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(14)].
kept:      84 -at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(14)].
kept:      85 -at(A,B,C) | -at(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(15)].
kept:      86 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(A,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
kept:      87 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
kept:      88 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -enter(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
kept:      89 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | less(A,D) # label(train_enters) # label(axiom).  [clausify(18)].
kept:      90 -at(A,B,C) | out2 = C | out1 = C | in2 = C | in1 = C | s1 = C | s2 = C # label(at_restr) # label(axiom).  [clausify(19)].
kept:      91 gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(22)].
           92 out1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      93 out2 != out1.  [copy(92),flip(a)].
           94 in2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      95 out2 != in2.  [copy(94),flip(a)].
           96 in1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      97 out2 != in1.  [copy(96),flip(a)].
kept:      98 s1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      99 s2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
           100 in2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      101 out1 != in2.  [copy(100),flip(a)].
           102 in1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      103 out1 != in1.  [copy(102),flip(a)].
kept:      104 s1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      105 s2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
           106 in1 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      107 in2 != in1.  [copy(106),flip(a)].
kept:      108 s1 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      109 s2 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      110 s1 != in1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      111 s2 != in1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      112 s2 != s1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
kept:      113 -enter(A,B,C) | in2 = C | in1 = C # label(enter_values) # label(axiom).  [clausify(24)].
kept:      114 switch(A,in2) = s2 # label(switch_in2_values) # label(axiom).  [clausify(25)].
kept:      115 switch(A,in1) = s1 # label(switch_in1_values) # label(axiom).  [clausify(26)].
kept:      116 switch(A,s1) = out1 | switch(A,s1) = out2 # label(switch_s1_values) # label(axiom).  [clausify(27)].
kept:      117 switch(A,s2) = out1 | switch(A,s2) = out2 # label(switch_s2_values) # label(axiom).  [clausify(28)].
           118 -at(A,B,in2) | gate(B) != out2 | switch(A,in2) = s2 # label(switch_in2_with_gate_out2) # label(axiom).  [clausify(29)].
kept:      119 -at(A,B,s2) | gate(B) != out2 | switch(A,s2) = out2 # label(switch_s2_with_gate_out2) # label(axiom).  [clausify(30)].
           120 -at(A,B,in2) | gate(B) != out1 | switch(A,in2) = s2 # label(switch_in2_with_gate_out1) # label(axiom).  [clausify(31)].
kept:      121 -at(A,B,s2) | gate(B) != out1 | switch(A,s2) = out1 # label(switch_s2_with_gate_out1) # label(axiom).  [clausify(32)].
           122 -at(A,B,in1) | gate(B) != out2 | switch(A,in1) = s1 # label(switch_in1_with_gate_out2) # label(axiom).  [clausify(33)].
kept:      123 -at(A,B,s1) | gate(B) != out2 | switch(A,s1) = out2 # label(switch_s1_with_gate_out2) # label(axiom).  [clausify(34)].
           124 -at(A,B,in1) | gate(B) != out1 | switch(A,in1) = s1 # label(switch_in1_with_gate_out1) # label(axiom).  [clausify(35)].
kept:      125 -at(A,B,s1) | gate(B) != out1 | switch(A,s1) = out1 # label(switch_s1_with_gate_out1) # label(axiom).  [clausify(36)].
kept:      126 -enter(f13(A,B),f14(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(37)].
kept:      127 -at(f13(A,B),f14(A,B),in2) | open(f13(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(37)].
kept:      128 -enter(f15(A,B),f16(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(39)].
kept:      129 -at(f15(A,B),f16(A,B),in1) | open(f15(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(39)].
kept:      130 -path_free(A,B,C,D) | in2 = C | in1 = C # label(path_from_to_values) # label(axiom).  [clausify(47)].
kept:      131 -path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(47)].
kept:      132 -open(A,in2) | path_free(A,f17(A),in2,gate(f17(A))) # label(open_in2) # label(axiom).  [clausify(48)].
kept:      133 open(A,in2) | -path_free(A,B,in2,gate(B)) # label(open_in2) # label(axiom).  [clausify(48)].
kept:      134 -open(A,in1) | path_free(A,f18(A),in1,gate(f18(A))) # label(open_in1) # label(axiom).  [clausify(49)].
kept:      135 open(A,in1) | -path_free(A,B,in1,gate(B)) # label(open_in1) # label(axiom).  [clausify(49)].
kept:      136 -path_free(A,B,in2,out2) | at(A,B,in2) # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
kept:      137 -path_free(A,B,in2,out2) | gate(B) = out2 # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
kept:      138 -path_free(A,B,in2,out2) | -at(A,C,in2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
kept:      139 -path_free(A,B,in2,out2) | -at(A,C,s2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
kept:      140 -path_free(A,B,in2,out2) | -at(A,C,out2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
kept:      141 path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2 | at(A,C,in2) | at(A,C,s2) | at(A,C,out2) # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
           142 path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2 | C != B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
kept:      143 path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2.  [copy(142),xx(d)].
kept:      144 -path_free(A,B,in2,out1) | at(A,B,in2) # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
kept:      145 -path_free(A,B,in2,out1) | gate(B) = out1 # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
kept:      146 -path_free(A,B,in2,out1) | -at(A,C,in2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
kept:      147 -path_free(A,B,in2,out1) | -at(A,C,s2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
kept:      148 -path_free(A,B,in2,out1) | -at(A,C,out1) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
kept:      149 path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1 | at(A,C,in2) | at(A,C,s2) | at(A,C,out1) # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
           150 path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1 | C != B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
kept:      151 path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1.  [copy(150),xx(d)].
kept:      152 -path_free(A,B,in1,out2) | at(A,B,in1) # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
kept:      153 -path_free(A,B,in1,out2) | gate(B) = out2 # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
kept:      154 -path_free(A,B,in1,out2) | -at(A,C,in1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
kept:      155 -path_free(A,B,in1,out2) | -at(A,C,s1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
kept:      156 -path_free(A,B,in1,out2) | -at(A,C,out2) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
kept:      157 path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2 | at(A,C,in1) | at(A,C,s1) | at(A,C,out2) # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
           158 path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2 | C != B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
kept:      159 path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2.  [copy(158),xx(d)].
kept:      160 -path_free(A,B,in1,out1) | at(A,B,in1) # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
kept:      161 -path_free(A,B,in1,out1) | gate(B) = out1 # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
kept:      162 -path_free(A,B,in1,out1) | -at(A,C,in1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
kept:      163 -path_free(A,B,in1,out1) | -at(A,C,s1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
kept:      164 -path_free(A,B,in1,out1) | -at(A,C,out1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
kept:      165 path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1 | at(A,C,in1) | at(A,C,s1) | at(A,C,out1) # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
           166 path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1 | C != B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
kept:      167 path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1.  [copy(166),xx(d)].
kept:      168 -safe(c1,c2) # label(collision_critical) # label(conjecture).  [deny(54)].
kept:      169 at(A,f1(A,B),B) | -at(A,C,B).  [resolve(55,a,56,a)].
kept:      170 switch(succ(A),B) != C | switch(A,B) = C | -at(A,D,B).  [resolve(57,b,56,a)].
kept:      171 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,V7,E).  [resolve(58,b,56,a)].
kept:      172 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(59,a,60,a)].
kept:      173 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(59,a,61,a)].
kept:      174 -open(f5(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(62,a,60,a)].
kept:      175 -open(f5(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(62,a,61,a)].
kept:      176 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | less(C,f4(A,C,D)).  [resolve(63,a,60,a)].
kept:      177 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | open(f4(A,C,D),A).  [resolve(63,a,61,a)].
kept:      178 in2 = A | in1 = A | -enter(succ(f11(B,C,D,E,A,F,V6)),F,V6).  [resolve(64,a,65,b)].
kept:      179 in2 = A | in1 = A | -open(B,A).  [resolve(64,a,66,b)].
kept:      180 less(A,A).  [factor(69,a,b)].

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

% Clauses after input processing:

formulas(usable).
end_of_list.

formulas(sos).
67 -less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].
68 -less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].
69 less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].
70 less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].
71 less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].
72 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
73 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
74 -at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].
75 -at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].
76 -at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].
77 -enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].
79 safe(A,B) | at(A,f2(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
80 safe(A,B) | at(A,f3(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
81 safe(A,B) | f3(A,B) != f2(A,B) # label(node_safe) # label(axiom).  [clausify(11)].
82 -at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(13)].
83 -at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(14)].
84 -at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(14)].
85 -at(A,B,C) | -at(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(15)].
86 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(A,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
87 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
88 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -enter(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].
89 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | less(A,D) # label(train_enters) # label(axiom).  [clausify(18)].
90 -at(A,B,C) | out2 = C | out1 = C | in2 = C | in1 = C | s1 = C | s2 = C # label(at_restr) # label(axiom).  [clausify(19)].
91 gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(22)].
93 out2 != out1.  [copy(92),flip(a)].
95 out2 != in2.  [copy(94),flip(a)].
97 out2 != in1.  [copy(96),flip(a)].
98 s1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
99 s2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
101 out1 != in2.  [copy(100),flip(a)].
103 out1 != in1.  [copy(102),flip(a)].
104 s1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
105 s2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
107 in2 != in1.  [copy(106),flip(a)].
108 s1 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
109 s2 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].
110 s1 != in1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
111 s2 != in1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
112 s2 != s1 # label(distinct_nodes) # label(axiom).  [clausify(23)].
113 -enter(A,B,C) | in2 = C | in1 = C # label(enter_values) # label(axiom).  [clausify(24)].
114 switch(A,in2) = s2 # label(switch_in2_values) # label(axiom).  [clausify(25)].
115 switch(A,in1) = s1 # label(switch_in1_values) # label(axiom).  [clausify(26)].
116 switch(A,s1) = out1 | switch(A,s1) = out2 # label(switch_s1_values) # label(axiom).  [clausify(27)].
117 switch(A,s2) = out1 | switch(A,s2) = out2 # label(switch_s2_values) # label(axiom).  [clausify(28)].
119 -at(A,B,s2) | gate(B) != out2 | switch(A,s2) = out2 # label(switch_s2_with_gate_out2) # label(axiom).  [clausify(30)].
121 -at(A,B,s2) | gate(B) != out1 | switch(A,s2) = out1 # label(switch_s2_with_gate_out1) # label(axiom).  [clausify(32)].
123 -at(A,B,s1) | gate(B) != out2 | switch(A,s1) = out2 # label(switch_s1_with_gate_out2) # label(axiom).  [clausify(34)].
125 -at(A,B,s1) | gate(B) != out1 | switch(A,s1) = out1 # label(switch_s1_with_gate_out1) # label(axiom).  [clausify(36)].
126 -enter(f13(A,B),f14(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(37)].
127 -at(f13(A,B),f14(A,B),in2) | open(f13(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(37)].
128 -enter(f15(A,B),f16(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(39)].
129 -at(f15(A,B),f16(A,B),in1) | open(f15(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(39)].
130 -path_free(A,B,C,D) | in2 = C | in1 = C # label(path_from_to_values) # label(axiom).  [clausify(47)].
131 -path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(47)].
132 -open(A,in2) | path_free(A,f17(A),in2,gate(f17(A))) # label(open_in2) # label(axiom).  [clausify(48)].
133 open(A,in2) | -path_free(A,B,in2,gate(B)) # label(open_in2) # label(axiom).  [clausify(48)].
134 -open(A,in1) | path_free(A,f18(A),in1,gate(f18(A))) # label(open_in1) # label(axiom).  [clausify(49)].
135 open(A,in1) | -path_free(A,B,in1,gate(B)) # label(open_in1) # label(axiom).  [clausify(49)].
136 -path_free(A,B,in2,out2) | at(A,B,in2) # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
137 -path_free(A,B,in2,out2) | gate(B) = out2 # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
138 -path_free(A,B,in2,out2) | -at(A,C,in2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
139 -path_free(A,B,in2,out2) | -at(A,C,s2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
140 -path_free(A,B,in2,out2) | -at(A,C,out2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].
143 path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2.  [copy(142),xx(d)].
144 -path_free(A,B,in2,out1) | at(A,B,in2) # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
145 -path_free(A,B,in2,out1) | gate(B) = out1 # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
146 -path_free(A,B,in2,out1) | -at(A,C,in2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
147 -path_free(A,B,in2,out1) | -at(A,C,s2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
148 -path_free(A,B,in2,out1) | -at(A,C,out1) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].
151 path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1.  [copy(150),xx(d)].
152 -path_free(A,B,in1,out2) | at(A,B,in1) # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
153 -path_free(A,B,in1,out2) | gate(B) = out2 # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
154 -path_free(A,B,in1,out2) | -at(A,C,in1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
155 -path_free(A,B,in1,out2) | -at(A,C,s1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
156 -path_free(A,B,in1,out2) | -at(A,C,out2) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].
159 path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2.  [copy(158),xx(d)].
160 -path_free(A,B,in1,out1) | at(A,B,in1) # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
161 -path_free(A,B,in1,out1) | gate(B) = out1 # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
162 -path_free(A,B,in1,out1) | -at(A,C,in1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
163 -path_free(A,B,in1,out1) | -at(A,C,s1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
164 -path_free(A,B,in1,out1) | -at(A,C,out1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].
167 path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1.  [copy(166),xx(d)].
168 -safe(c1,c2) # label(collision_critical) # label(conjecture).  [deny(54)].
169 at(A,f1(A,B),B) | -at(A,C,B).  [resolve(55,a,56,a)].
170 switch(succ(A),B) != C | switch(A,B) = C | -at(A,D,B).  [resolve(57,b,56,a)].
171 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,V7,E).  [resolve(58,b,56,a)].
172 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(59,a,60,a)].
173 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(59,a,61,a)].
174 -open(f5(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(62,a,60,a)].
175 -open(f5(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(62,a,61,a)].
176 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | less(C,f4(A,C,D)).  [resolve(63,a,60,a)].
177 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | open(f4(A,C,D),A).  [resolve(63,a,61,a)].
178 in2 = A | in1 = A | -enter(succ(f11(B,C,D,E,A,F,V6)),F,V6).  [resolve(64,a,65,b)].
179 in2 = A | in1 = A | -open(B,A).  [resolve(64,a,66,b)].
180 less(A,A).  [factor(69,a,b)].
end_of_list.

formulas(demodulators).
72 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].
73 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].
114 switch(A,in2) = s2 # label(switch_in2_values) # label(axiom).  [clausify(25)].
115 switch(A,in1) = s1 # label(switch_in1_values) # label(axiom).  [clausify(26)].
end_of_list.

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.02 seconds.

given #1 (I,wt=9): 67 -less(A,B) | -less(B,A) | B = A # label(antisymmetry) # label(axiom).  [clausify(1)].

given #2 (I,wt=9): 68 -less(A,B) | -less(B,C) | less(A,C) # label(transitivity) # label(axiom).  [clausify(2)].

given #3 (I,wt=6): 69 less(A,B) | less(B,A) # label(totality) # label(axiom).  [clausify(3)].

given #4 (I,wt=4): 70 less(A,succ(A)) # label(succ) # label(axiom).  [clausify(4)].

given #5 (I,wt=7): 71 less(A,B) | less(succ(B),A) # label(succ) # label(axiom).  [clausify(4)].

given #6 (I,wt=5): 72 pred(succ(A)) = A # label(pred) # label(axiom).  [clausify(5)].

given #7 (I,wt=5): 73 succ(pred(A)) = A # label(pred) # label(axiom).  [clausify(5)].

given #8 (I,wt=11): 74 -at(A,B,C) | -at(A,B,D) | D = C # label(at_uniq) # label(axiom).  [clausify(6)].

given #9 (I,wt=8): 75 -at(A,B,C) | -enter(A,B,D) # label(at_nondup) # label(axiom).  [clausify(7)].

given #10 (I,wt=8): 76 -at(A,B,C) | -enter(A,D,C) # label(input_nocol) # label(axiom).  [clausify(8)].

given #11 (I,wt=11): 77 -enter(A,B,C) | -enter(A,D,C) | D = B # label(enter_uniq) # label(axiom).  [clausify(9)].

given #12 (I,wt=9): 79 safe(A,B) | at(A,f2(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].

given #13 (I,wt=9): 80 safe(A,B) | at(A,f3(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].

given #14 (I,wt=10): 81 safe(A,B) | f3(A,B) != f2(A,B) # label(node_safe) # label(axiom).  [clausify(11)].

given #15 (I,wt=10): 82 -at(A,B,C) | less(A,f7(A,B,C)) # label(train_will_move) # label(axiom).  [clausify(13)].

given #16 (I,wt=14): 83 -at(A,B,C) | enter(f8(A,B,C),B,f9(A,B,C)) # label(train_entered) # label(axiom).  [clausify(14)].

given #17 (I,wt=10): 84 -at(A,B,C) | less(f8(A,B,C),A) # label(train_entered) # label(axiom).  [clausify(14)].

given #18 (I,wt=11): 85 -at(A,B,C) | -at(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(15)].

given #19 (I,wt=16): 86 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(A,B,C) # label(train_enters) # label(axiom).  [clausify(18)].

given #20 (I,wt=16): 87 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].

given #21 (I,wt=16): 88 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -enter(D,B,C) # label(train_enters) # label(axiom).  [clausify(18)].

given #22 (I,wt=15): 89 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | less(A,D) # label(train_enters) # label(axiom).  [clausify(18)].

given #23 (I,wt=22): 90 -at(A,B,C) | out2 = C | out1 = C | in2 = C | in1 = C | s1 = C | s2 = C # label(at_restr) # label(axiom).  [clausify(19)].

given #24 (I,wt=8): 91 gate(A) = out2 | gate(A) = out1 # label(gate_restr) # label(axiom).  [clausify(22)].

given #25 (I,wt=3): 93 out2 != out1.  [copy(92),flip(a)].

given #26 (I,wt=3): 95 out2 != in2.  [copy(94),flip(a)].

given #27 (I,wt=3): 97 out2 != in1.  [copy(96),flip(a)].

given #28 (I,wt=3): 98 s1 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #29 (I,wt=3): 99 s2 != out2 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #30 (I,wt=3): 101 out1 != in2.  [copy(100),flip(a)].

given #31 (I,wt=3): 103 out1 != in1.  [copy(102),flip(a)].

given #32 (I,wt=3): 104 s1 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #33 (I,wt=3): 105 s2 != out1 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #34 (I,wt=3): 107 in2 != in1.  [copy(106),flip(a)].

given #35 (I,wt=3): 108 s1 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #36 (I,wt=3): 109 s2 != in2 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #37 (I,wt=3): 110 s1 != in1 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #38 (I,wt=3): 111 s2 != in1 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #39 (I,wt=3): 112 s2 != s1 # label(distinct_nodes) # label(axiom).  [clausify(23)].

given #40 (I,wt=10): 113 -enter(A,B,C) | in2 = C | in1 = C # label(enter_values) # label(axiom).  [clausify(24)].

given #41 (I,wt=5): 114 switch(A,in2) = s2 # label(switch_in2_values) # label(axiom).  [clausify(25)].

given #42 (I,wt=5): 115 switch(A,in1) = s1 # label(switch_in1_values) # label(axiom).  [clausify(26)].

given #43 (I,wt=10): 116 switch(A,s1) = out1 | switch(A,s1) = out2 # label(switch_s1_values) # label(axiom).  [clausify(27)].

given #44 (I,wt=10): 117 switch(A,s2) = out1 | switch(A,s2) = out2 # label(switch_s2_values) # label(axiom).  [clausify(28)].

given #45 (I,wt=13): 119 -at(A,B,s2) | gate(B) != out2 | switch(A,s2) = out2 # label(switch_s2_with_gate_out2) # label(axiom).  [clausify(30)].

given #46 (I,wt=13): 121 -at(A,B,s2) | gate(B) != out1 | switch(A,s2) = out1 # label(switch_s2_with_gate_out1) # label(axiom).  [clausify(32)].

given #47 (I,wt=13): 123 -at(A,B,s1) | gate(B) != out2 | switch(A,s1) = out2 # label(switch_s1_with_gate_out2) # label(axiom).  [clausify(34)].

given #48 (I,wt=13): 125 -at(A,B,s1) | gate(B) != out1 | switch(A,s1) = out1 # label(switch_s1_with_gate_out1) # label(axiom).  [clausify(36)].

given #49 (I,wt=13): 126 -enter(f13(A,B),f14(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(37)].

given #50 (I,wt=18): 127 -at(f13(A,B),f14(A,B),in2) | open(f13(A,B),in2) | at(succ(A),B,in2) # label(enter_or_wait_at_in2) # label(axiom).  [clausify(37)].

given #51 (I,wt=13): 128 -enter(f15(A,B),f16(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(39)].

given #52 (I,wt=18): 129 -at(f15(A,B),f16(A,B),in1) | open(f15(A,B),in1) | at(succ(A),B,in1) # label(enter_or_wait_at_in1) # label(axiom).  [clausify(39)].

given #53 (I,wt=11): 130 -path_free(A,B,C,D) | in2 = C | in1 = C # label(path_from_to_values) # label(axiom).  [clausify(47)].

given #54 (I,wt=11): 131 -path_free(A,B,C,D) | out2 = D | out1 = D # label(path_from_to_values) # label(axiom).  [clausify(47)].

given #55 (I,wt=11): 132 -open(A,in2) | path_free(A,f17(A),in2,gate(f17(A))) # label(open_in2) # label(axiom).  [clausify(48)].

given #56 (I,wt=9): 133 open(A,in2) | -path_free(A,B,in2,gate(B)) # label(open_in2) # label(axiom).  [clausify(48)].

given #57 (I,wt=11): 134 -open(A,in1) | path_free(A,f18(A),in1,gate(f18(A))) # label(open_in1) # label(axiom).  [clausify(49)].

given #58 (I,wt=9): 135 open(A,in1) | -path_free(A,B,in1,gate(B)) # label(open_in1) # label(axiom).  [clausify(49)].

given #59 (I,wt=9): 136 -path_free(A,B,in2,out2) | at(A,B,in2) # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].

given #60 (I,wt=9): 137 -path_free(A,B,in2,out2) | gate(B) = out2 # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].

given #61 (I,wt=12): 138 -path_free(A,B,in2,out2) | -at(A,C,in2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].

given #62 (I,wt=12): 139 -path_free(A,B,in2,out2) | -at(A,C,s2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].

given #63 (I,wt=12): 140 -path_free(A,B,in2,out2) | -at(A,C,out2) | C = B # label(path_free_from_in2_to_out2) # label(axiom).  [clausify(50)].

given #64 (I,wt=13): 143 path_free(A,B,in2,out2) | -at(A,B,in2) | gate(B) != out2.  [copy(142),xx(d)].

given #65 (I,wt=9): 144 -path_free(A,B,in2,out1) | at(A,B,in2) # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].

given #66 (I,wt=9): 145 -path_free(A,B,in2,out1) | gate(B) = out1 # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].

given #67 (I,wt=12): 146 -path_free(A,B,in2,out1) | -at(A,C,in2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].

given #68 (I,wt=12): 147 -path_free(A,B,in2,out1) | -at(A,C,s2) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].

given #69 (I,wt=12): 148 -path_free(A,B,in2,out1) | -at(A,C,out1) | C = B # label(path_free_from_in2_to_out1) # label(axiom).  [clausify(51)].

given #70 (I,wt=13): 151 path_free(A,B,in2,out1) | -at(A,B,in2) | gate(B) != out1.  [copy(150),xx(d)].

given #71 (I,wt=9): 152 -path_free(A,B,in1,out2) | at(A,B,in1) # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].

given #72 (I,wt=9): 153 -path_free(A,B,in1,out2) | gate(B) = out2 # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].

given #73 (I,wt=12): 154 -path_free(A,B,in1,out2) | -at(A,C,in1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].

given #74 (I,wt=12): 155 -path_free(A,B,in1,out2) | -at(A,C,s1) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].

given #75 (I,wt=12): 156 -path_free(A,B,in1,out2) | -at(A,C,out2) | C = B # label(path_free_from_in1_to_out2) # label(axiom).  [clausify(52)].

given #76 (I,wt=13): 159 path_free(A,B,in1,out2) | -at(A,B,in1) | gate(B) != out2.  [copy(158),xx(d)].

given #77 (I,wt=9): 160 -path_free(A,B,in1,out1) | at(A,B,in1) # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].

given #78 (I,wt=9): 161 -path_free(A,B,in1,out1) | gate(B) = out1 # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].

given #79 (I,wt=12): 162 -path_free(A,B,in1,out1) | -at(A,C,in1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].

given #80 (I,wt=12): 163 -path_free(A,B,in1,out1) | -at(A,C,s1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].

given #81 (I,wt=12): 164 -path_free(A,B,in1,out1) | -at(A,C,out1) | C = B # label(path_free_from_in1_to_out1) # label(axiom).  [clausify(53)].

given #82 (I,wt=13): 167 path_free(A,B,in1,out1) | -at(A,B,in1) | gate(B) != out1.  [copy(166),xx(d)].

given #83 (I,wt=3): 168 -safe(c1,c2) # label(collision_critical) # label(conjecture).  [deny(54)].

given #84 (I,wt=10): 169 at(A,f1(A,B),B) | -at(A,C,B).  [resolve(55,a,56,a)].

given #85 (I,wt=15): 170 switch(succ(A),B) != C | switch(A,B) = C | -at(A,D,B).  [resolve(57,b,56,a)].

given #86 (I,wt=16): 171 -enter(succ(f11(A,B,C,D,E,F,V6)),F,V6) | -at(D,V7,E).  [resolve(58,b,56,a)].

given #87 (I,wt=19): 172 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(59,a,60,a)].

given #88 (I,wt=19): 173 at(f5(A),f6(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(59,a,61,a)].

given #89 (I,wt=17): 174 -open(f5(A),A) | -at(B,C,A) | open(B,A) | less(B,f4(A,B,C)).  [resolve(62,a,60,a)].

given #90 (I,wt=17): 175 -open(f5(A),A) | -at(B,C,A) | open(B,A) | open(f4(A,B,C),A).  [resolve(62,a,61,a)].

given #91 (I,wt=20): 176 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | less(C,f4(A,C,D)).  [resolve(63,a,60,a)].

given #92 (I,wt=20): 177 -less(f5(A),B) | -open(B,A) | -at(C,D,A) | open(C,A) | open(f4(A,C,D),A).  [resolve(63,a,61,a)].

given #93 (I,wt=18): 178 in2 = A | in1 = A | -enter(succ(f11(B,C,D,E,A,F,V6)),F,V6).  [resolve(64,a,65,b)].

given #94 (I,wt=9): 179 in2 = A | in1 = A | -open(B,A).  [resolve(64,a,66,b)].

given #95 (I,wt=3): 180 less(A,A).  [factor(69,a,b)].

given #96 (A,wt=9): 181 less(A,B) | -less(C,B) | less(C,A).  [resolve(69,a,68,b)].

given #97 (T,wt=4): 191 less(pred(A),A).  [para(73(a,1),70(a,2))].

given #98 (T,wt=7): 182 -less(A,B) | less(A,succ(B)).  [resolve(70,a,68,b)].

given #99 (T,wt=5): 245 less(pred(A),succ(A)).  [resolve(182,a,191,a)].

given #100 (T,wt=5): 247 less(A,succ(succ(A))).  [resolve(182,a,70,a)].

given #101 (A,wt=7): 183 -less(succ(A),B) | less(A,B).  [resolve(70,a,68,a)].

given #102 (T,wt=5): 253 less(pred(pred(A)),A).  [para(73(a,1),245(a,2))].

given #103 (T,wt=6): 248 less(pred(A),succ(succ(A))).  [resolve(245,a,182,a)].

given #104 (T,wt=6): 254 less(A,succ(succ(succ(A)))).  [resolve(247,a,182,a)].

given #105 (T,wt=6): 259 less(pred(pred(A)),succ(A)).  [resolve(253,a,182,a)].

given #106 (A,wt=8): 184 -less(succ(A),A) | succ(A) = A.  [resolve(70,a,67,b),flip(b)].

given #107 (T,wt=6): 279 less(pred(pred(pred(A))),A).  [para(73(a,1),259(a,2))].

given #108 (T,wt=7): 192 less(A,pred(B)) | less(B,A).  [para(73(a,1),71(b,1))].

given #109 (T,wt=7): 239 less(A,succ(B)) | less(B,A).  [resolve(181,b,70,a)].

given #110 (T,wt=7): 241 less(A,B) | less(pred(B),A).  [resolve(191,a,181,b)].

given #111 (A,wt=10): 185 less(succ(A),B) | -less(C,B) | less(C,A).  [resolve(71,a,68,b)].

given #112 (T,wt=7): 242 -less(A,pred(B)) | less(A,B).  [resolve(191,a,68,b)].

given #113 (T,wt=7): 243 -less(A,B) | less(pred(A),B).  [resolve(191,a,68,a)].

given #114 (T,wt=7): 264 less(pred(A),succ(succ(succ(A)))).  [resolve(248,a,182,a)].

given #115 (T,wt=7): 269 less(A,succ(succ(succ(succ(A))))).  [resolve(254,a,183,a)].

given #116 (A,wt=10): 186 less(succ(A),B) | -less(A,C) | less(B,C).  [resolve(71,a,68,a)].

given #117 (T,wt=7): 274 less(pred(pred(A)),succ(succ(A))).  [resolve(259,a,182,a)].

given #118 (T,wt=7): 280 less(pred(pred(pred(A))),succ(A)).  [resolve(279,a,182,a)].

given #119 (T,wt=7): 318 less(pred(pred(pred(pred(A)))),A).  [resolve(242,a,279,a)].

given #120 (T,wt=8): 244 -less(A,pred(A)) | pred(A) = A.  [resolve(191,a,67,b)].

given #121 (A,wt=10): 187 less(succ(A),B) | -less(A,B) | B = A.  [resolve(71,a,67,b)].

given #122 (T,wt=8): 246 less(succ(A),succ(B)) | less(B,A).  [resolve(182,a,71,b)].

given #123 (T,wt=8): 249 less(A,succ(B)) | less(pred(B),A).  [resolve(245,a,181,b)].

given #124 (T,wt=8): 250 -less(A,pred(B)) | less(A,succ(B)).  [resolve(245,a,68,b)].

given #125 (T,wt=8): 251 -less(succ(A),B) | less(pred(A),B).  [resolve(245,a,68,a)].

given #126 (A,wt=10): 188 less(succ(A),B) | -less(A,B) | A = B.  [resolve(71,a,67,a)].

given #127 (T,wt=8): 255 less(A,succ(succ(B))) | less(B,A).  [resolve(247,a,181,b)].

given #128 (T,wt=8): 256 -less(A,B) | less(A,succ(succ(B))).  [resolve(247,a,68,b)].

given #129 (T,wt=8): 257 -less(succ(succ(A)),B) | less(A,B).  [resolve(247,a,68,a)].

given #130 (T,wt=8): 260 less(A,B) | less(pred(pred(B)),A).  [resolve(253,a,181,b)].

given #131 (A,wt=10): 189 less(A,B) | -less(C,succ(B)) | less(C,A).  [resolve(71,b,68,b)].

given #132 (T,wt=8): 261 -less(A,pred(pred(B))) | less(A,B).  [resolve(253,a,68,b)].

given #133 (T,wt=8): 262 -less(A,B) | less(pred(pred(A)),B).  [resolve(253,a,68,a)].

given #134 (T,wt=8): 285 less(A,succ(B)) | less(B,pred(A)).  [resolve(192,a,183,a)].

given #135 (T,wt=8): 293 less(A,succ(B)) | less(B,succ(A)).  [resolve(239,a,183,a)].

given #136 (A,wt=11): 190 less(A,B) | -less(A,succ(B)) | succ(B) = A.  [resolve(71,b,67,b)].

given #137 (T,wt=8): 298 less(pred(A),succ(B)) | less(B,A).  [resolve(241,a,183,a)].

given #138 (T,wt=8): 316 less(succ(A),B) | less(pred(B),A).  [resolve(185,b,191,a)].

given #139 (T,wt=8): 319 less(pred(A),B) | less(pred(B),A).  [resolve(242,a,241,b)].

given #140 (T,wt=8): 320 less(A,B) | less(pred(B),pred(A)).  [resolve(242,a,192,b)].

given #141 (A,wt=12): 193 safe(A,B) | -at(A,f2(A,B),C) | B = C.  [resolve(79,b,74,b)].

given #142 (T,wt=8): 321 less(pred(pred(A)),succ(succ(succ(A)))).  [resolve(264,a,243,a)].

given #143 (T,wt=8): 323 less(pred(A),succ(succ(succ(succ(A))))).  [resolve(264,a,182,a)].

given #144 (T,wt=8): 329 less(A,succ(succ(succ(succ(succ(A)))))).  [resolve(269,a,183,a)].

given #145 (T,wt=8): 336 less(pred(pred(pred(A))),succ(succ(A))).  [resolve(274,a,243,a)].

given #146 (A,wt=12): 194 safe(A,B) | -at(A,f2(A,B),C) | C = B.  [resolve(79,b,74,a)].

given #147 (T,wt=8): 342 less(pred(pred(pred(pred(A)))),succ(A)).  [resolve(280,a,243,a)].

given #148 (T,wt=8): 348 less(pred(pred(pred(pred(pred(A))))),A).  [resolve(318,a,243,a)].

given #149 (T,wt=9): 224 at(A,f1(A,B),B) | safe(A,B).  [resolve(169,b,80,b)].

given #150 (T,wt=9): 240 less(A,B) | less(C,A) | less(B,C).  [resolve(181,b,69,b)].

given #151 (A,wt=12): 195 safe(A,B) | -at(A,f3(A,B),C) | B = C.  [resolve(80,b,74,b)].

given #152 (T,wt=9): 265 less(A,succ(succ(B))) | less(pred(B),A).  [resolve(248,a,181,b)].

given #153 (T,wt=9): 266 -less(A,pred(B)) | less(A,succ(succ(B))).  [resolve(248,a,68,b)].

given #154 (T,wt=9): 267 -less(succ(succ(A)),B) | less(pred(A),B).  [resolve(248,a,68,a)].

given #155 (T,wt=9): 270 less(A,succ(succ(succ(B)))) | less(B,A).  [resolve(254,a,181,b)].

given #156 (A,wt=12): 196 safe(A,B) | -at(A,f3(A,B),C) | C = B.  [resolve(80,b,74,a)].

given #157 (T,wt=9): 271 -less(A,B) | less(A,succ(succ(succ(B)))).  [resolve(254,a,68,b)].

given #158 (T,wt=9): 272 -less(succ(succ(succ(A))),B) | less(A,B).  [resolve(254,a,68,a)].

given #159 (T,wt=9): 275 less(A,succ(B)) | less(pred(pred(B)),A).  [resolve(259,a,181,b)].

given #160 (T,wt=9): 276 -less(A,pred(pred(B))) | less(A,succ(B)).  [resolve(259,a,68,b)].

given #161 (A,wt=11): 197 less(A,f7(A,f3(A,B),B)) | safe(A,B).  [resolve(82,a,80,b)].

given #162 (T,wt=8): 603 less(c1,f7(c1,f3(c1,c2),c2)).  [resolve(197,b,168,a)].

given #163 (T,wt=9): 277 -less(succ(A),B) | less(pred(pred(A)),B).  [resolve(259,a,68,a)].

given #164 (T,wt=9): 281 less(A,B) | less(pred(pred(pred(B))),A).  [resolve(279,a,181,b)].

given #165 (T,wt=9): 282 -less(A,pred(pred(pred(B)))) | less(A,B).  [resolve(279,a,68,b)].

given #166 (A,wt=11): 198 less(A,f7(A,f2(A,B),B)) | safe(A,B).  [resolve(82,a,79,b)].

given #167 (T,wt=8): 637 less(c1,f7(c1,f2(c1,c2),c2)).  [resolve(198,b,168,a)].

given #168 (T,wt=9): 283 -less(A,B) | less(pred(pred(pred(A))),B).  [resolve(279,a,68,a)].

given #169 (T,wt=9): 306 less(succ(A),B) | less(pred(pred(B)),A).  [resolve(185,b,253,a)].

given #170 (T,wt=9): 308 less(succ(A),succ(succ(B))) | less(B,A).  [resolve(185,b,247,a)].

given #171 (A,wt=19): 199 enter(f8(A,f3(A,B),B),f3(A,B),f9(A,f3(A,B),B)) | safe(A,B).  [resolve(83,a,80,b)].

given #172 (T,wt=9): 309 less(succ(A),succ(B)) | less(pred(B),A).  [resolve(185,b,245,a)].

given #173 (T,wt=9): 369 less(pred(A),B) | less(pred(B),succ(A)).  [resolve(249,a,243,a)].

given #174 (T,wt=9): 372 less(pred(A),succ(B)) | less(B,succ(A)).  [resolve(249,a,183,a)].

given #175 (T,wt=9): 377 less(pred(pred(pred(pred(pred(A))))),succ(A)).  [resolve(250,a,318,a)].

given #176 (A,wt=19): 200 enter(f8(A,f2(A,B),B),f2(A,B),f9(A,f2(A,B),B)) | safe(A,B).  [resolve(83,a,79,b)].

given #177 (T,wt=9): 379 less(A,succ(B)) | less(pred(B),pred(A)).  [resolve(250,a,192,b)].

given #178 (T,wt=9): 380 less(pred(A),succ(succ(succ(succ(succ(A)))))).  [resolve(251,a,269,a)].

given #179 (T,wt=9): 384 less(A,B) | less(pred(B),succ(succ(A))).  [resolve(255,a,243,a)].

given #180 (T,wt=9): 387 less(A,succ(B)) | less(B,succ(succ(A))).  [resolve(255,a,183,a)].

given #181 (A,wt=11): 201 less(f8(A,f3(A,B),B),A) | safe(A,B).  [resolve(84,a,80,b)].

given #182 (T,wt=8): 784 less(f8(c1,f3(c1,c2),c2),c1).  [resolve(201,b,168,a)].

given #183 (T,wt=9): 392 less(pred(pred(pred(pred(A)))),succ(succ(A))).  [resolve(256,a,318,a)].

given #184 (T,wt=9): 393 less(pred(pred(pred(A))),succ(succ(succ(A)))).  [resolve(256,a,280,a)].

given #185 (T,wt=9): 394 less(pred(pred(A)),succ(succ(succ(succ(A))))).  [resolve(256,a,274,a)].

given #186 (A,wt=11): 202 less(f8(A,f2(A,B),B),A) | safe(A,B).  [resolve(84,a,79,b)].

given #187 (T,wt=8): 814 less(f8(c1,f2(c1,c2),c2),c1).  [resolve(202,b,168,a)].

given #188 (T,wt=9): 395 less(A,succ(succ(succ(succ(succ(succ(A))))))).  [resolve(256,a,269,a)].

given #189 (T,wt=9): 397 less(A,succ(succ(B))) | less(B,pred(A)).  [resolve(256,a,192,b)].

given #190 (T,wt=9): 400 less(pred(pred(A)),B) | less(pred(B),A).  [resolve(260,a,243,a)].

given #191 (A,wt=12): 203 -at(A,B,C) | f3(A,C) = B | safe(A,C).  [resolve(85,a,80,b),flip(b)].

given #192 (T,wt=9): 403 less(pred(pred(A)),succ(B)) | less(B,A).  [resolve(260,a,183,a)].

given #193 (T,wt=9): 409 less(pred(pred(pred(pred(pred(pred(A)))))),A).  [resolve(261,a,318,a)].

given #194 (T,wt=9): 411 less(A,B) | less(pred(pred(B)),pred(A)).  [resolve(261,a,192,b)].

given #195 (T,wt=9): 607 less(pred(c1),f7(c1,f3(c1,c2),c2)).  [resolve(603,a,243,a)].

given #196 (A,wt=12): 204 -at(A,B,C) | f2(A,C) = B | safe(A,C).  [resolve(85,a,79,b),flip(b)].

given #197 (T,wt=9): 611 less(c1,succ(f7(c1,f3(c1,c2),c2))).  [resolve(603,a,182,a)].

given #198 (T,wt=9): 641 less(pred(c1),f7(c1,f2(c1,c2),c2)).  [resolve(637,a,243,a)].

given #199 (T,wt=9): 645 less(c1,succ(f7(c1,f2(c1,c2),c2))).  [resolve(637,a,182,a)].

given #200 (T,wt=9): 789 less(pred(f8(c1,f3(c1,c2),c2)),c1).  [resolve(784,a,243,a)].

given #201 (A,wt=21): 205 out2 = A | out1 = A | in2 = A | in1 = A | s1 = A | s2 = A | safe(B,A).  [resolve(90,a,80,b)].

given #202 (T,wt=9): 793 less(f8(c1,f3(c1,c2),c2),succ(c1)).  [resolve(784,a,182,a)].

given #203 (T,wt=9): 819 less(pred(f8(c1,f2(c1,c2),c2)),c1).  [resolve(814,a,243,a)].

given #204 (T,wt=9): 823 less(f8(c1,f2(c1,c2),c2),succ(c1)).  [resolve(814,a,182,a)].

given #205 (T,wt=10): 238 less(A,B) | less(succ(C),A) | less(B,C).  [resolve(181,b,71,b)].

given #206 (A,wt=14): 206 gate(f3(A,s2)) != out2 | switch(A,s2) = out2 | safe(A,s2).  [resolve(119,a,80,b)].

given #207 (T,wt=10): 252 -less(succ(A),pred(A)) | pred(A) = succ(A).  [resolve(245,a,67,b)].

given #208 (T,wt=10): 258 -less(succ(succ(A)),A) | succ(succ(A)) = A.  [resolve(247,a,67,b),flip(b)].

given #209 (T,wt=10): 263 -less(A,pred(pred(A))) | pred(pred(A)) = A.  [resolve(253,a,67,b)].

given #210 (T,wt=10): 286 less(A,B) | less(C,pred(A)) | less(B,C).  [resolve(192,a,181,b)].

given #211 (A,wt=14): 207 gate(f2(A,s2)) != out2 | switch(A,s2) = out2 | safe(A,s2).  [resolve(119,a,79,b)].

given #212 (T,wt=10): 287 less(A,B) | -less(C,B) | less(C,pred(A)).  [resolve(192,a,68,b)].

given #213 (T,wt=10): 288 less(A,B) | -less(pred(A),C) | less(B,C).  [resolve(192,a,68,a)].

given #214 (T,wt=10): 290 less(A,pred(B)) | -less(C,B) | less(C,A).  [resolve(192,b,68,b)].

given #215 (T,wt=10): 291 less(A,pred(B)) | -less(A,B) | B = A.  [resolve(192,b,67,b)].

given #216 (A,wt=14): 208 gate(f3(A,s2)) != out1 | switch(A,s2) = out1 | safe(A,s2).  [resolve(121,a,80,b)].

given #217 (T,wt=10): 292 less(A,pred(B)) | -less(A,B) | A = B.  [resolve(192,b,67,a)].

given #218 (T,wt=10): 294 less(A,B) | less(C,succ(A)) | less(B,C).  [resolve(239,a,181,b)].

given #219 (T,wt=10): 295 less(A,B) | -less(C,B) | less(C,succ(A)).  [resolve(239,a,68,b)].

given #220 (T,wt=10): 296 less(A,B) | -less(succ(A),C) | less(B,C).  [resolve(239,a,68,a)].

given #221 (A,wt=14): 209 gate(f2(A,s2)) != out1 | switch(A,s2) = out1 | safe(A,s2).  [resolve(121,a,79,b)].

given #222 (T,wt=10): 297 less(A,succ(B)) | -less(C,B) | less(C,A).  [resolve(239,b,68,b)].

given #223 (T,wt=10): 299 less(pred(A),B) | less(C,A) | less(B,C).  [resolve(241,a,181,b)].

given #224 (T,wt=10): 300 less(pred(A),B) | -less(C,B) | less(C,A).  [resolve(241,a,68,b)].

given #225 (T,wt=10): 301 less(pred(A),B) | -less(A,C) | less(B,C).  [resolve(241,a,68,a)].

given #226 (A,wt=14): 210 gate(f3(A,s1)) != out2 | switch(A,s1) = out2 | safe(A,s1).  [resolve(123,a,80,b)].

given #227 (T,wt=10): 302 less(A,B) | -less(C,pred(B)) | less(C,A).  [resolve(241,b,68,b)].

given #228 (T,wt=10): 303 less(succ(A),B) | less(pred(pred(pred(B))),A).  [resolve(185,b,279,a)].

given #229 (T,wt=10): 304 less(succ(A),succ(B)) | less(pred(pred(B)),A).  [resolve(185,b,259,a)].

given #230 (T,wt=10): 305 less(succ(A),succ(succ(succ(B)))) | less(B,A).  [resolve(185,b,254,a)].

given #231 (A,wt=14): 211 gate(f2(A,s1)) != out2 | switch(A,s1) = out2 | safe(A,s1).  [resolve(123,a,79,b)].

given #232 (T,wt=10): 307 less(succ(A),succ(succ(B))) | less(pred(B),A).  [resolve(185,b,248,a)].

given #233 (T,wt=10): 324 less(A,succ(succ(succ(B)))) | less(pred(B),A).  [resolve(264,a,181,b)].

given #234 (T,wt=10): 325 -less(A,pred(B)) | less(A,succ(succ(succ(B)))).  [resolve(264,a,68,b)].

given #235 (T,wt=10): 326 -less(succ(succ(succ(A))),B) | less(pred(A),B).  [resolve(264,a,68,a)].

given #236 (A,wt=14): 212 gate(f3(A,s1)) != out1 | switch(A,s1) = out1 | safe(A,s1).  [resolve(125,a,80,b)].

given #237 (T,wt=10): 330 less(A,succ(succ(succ(succ(B))))) | less(B,A).  [resolve(269,a,181,b)].

given #238 (T,wt=10): 331 -less(A,B) | less(A,succ(succ(succ(succ(B))))).  [resolve(269,a,68,b)].

given #239 (T,wt=10): 332 -less(succ(succ(succ(succ(A)))),B) | less(A,B).  [resolve(269,a,68,a)].

given #240 (T,wt=10): 338 less(A,succ(succ(B))) | less(pred(pred(B)),A).  [resolve(274,a,181,b)].

given #241 (A,wt=14): 213 gate(f2(A,s1)) != out1 | switch(A,s1) = out1 | safe(A,s1).  [resolve(125,a,79,b)].

given #242 (T,wt=10): 339 -less(A,pred(pred(B))) | less(A,succ(succ(B))).  [resolve(274,a,68,b)].

given #243 (T,wt=10): 340 -less(succ(succ(A)),B) | less(pred(pred(A)),B).  [resolve(274,a,68,a)].

given #244 (T,wt=10): 344 less(A,succ(B)) | less(pred(pred(pred(B))),A).  [resolve(280,a,181,b)].

given #245 (T,wt=10): 345 -less(A,pred(pred(pred(B)))) | less(A,succ(B)).  [resolve(280,a,68,b)].

given #246 (A,wt=12): 214 gate(A) = out1 | open(B,in2) | -path_free(B,A,in2,out2).  [para(91(a,1),133(b,4))].

given #247 (T,wt=10): 346 -less(succ(A),B) | less(pred(pred(pred(A))),B).  [resolve(280,a,68,a)].

given #248 (T,wt=10): 350 less(A,B) | less(pred(pred(pred(pred(B)))),A).  [resolve(318,a,181,b)].

given #249 (T,wt=10): 351 -less(A,pred(pred(pred(pred(B))))) | less(A,B).  [resolve(318,a,68,b)].

given #250 (T,wt=10): 352 -less(A,B) | less(pred(pred(pred(pred(A)))),B).  [resolve(318,a,68,a)].

given #251 (A,wt=12): 215 gate(A) = out1 | open(B,in1) | -path_free(B,A,in1,out2).  [para(91(a,1),135(b,4))].

given #252 (T,wt=10): 378 less(pred(A),succ(B)) | less(pred(B),succ(A)).  [resolve(250,a,249,b)].

given #253 (T,wt=10): 383 less(A,succ(B)) | less(pred(B),succ(succ(A))).  [resolve(255,a,251,a)].

given #254 (T,wt=10): 396 less(A,succ(succ(B))) | less(B,succ(succ(A))).  [resolve(256,a,255,b)].

given #255 (T,wt=10): 398 less(pred(pred(A)),succ(succ(B))) | less(B,A).  [resolve(260,a,257,a)].

given #256 (A,wt=16): 216 path_free(A,f3(A,in2),in2,out2) | gate(f3(A,in2)) != out2 | safe(A,in2).  [resolve(143,b,80,b)].

given #257 (T,wt=10): 399 less(pred(pred(A)),succ(B)) | less(pred(B),A).  [resolve(260,a,251,a)].

given #258 (T,wt=10): 410 less(pred(pred(A)),B) | less(pred(pred(B)),A).  [resolve(261,a,260,b)].

given #259 (T,wt=10): 412 less(A,pred(B)) | less(B,succ(succ(succ(A)))).  [resolve(285,a,256,a)].

given #260 (T,wt=10): 420 less(A,succ(B)) | less(pred(pred(B)),pred(A)).  [resolve(285,b,262,a)].

given #261 (A,wt=16): 217 path_free(A,f2(A,in2),in2,out2) | gate(f2(A,in2)) != out2 | safe(A,in2).  [resolve(143,b,79,b)].

given #262 (T,wt=10): 421 less(A,succ(succ(B))) | less(pred(B),pred(A)).  [resolve(285,b,251,a)].

given #263 (T,wt=10): 427 less(A,succ(B)) | less(pred(pred(B)),succ(A)).  [resolve(293,a,262,a)].

given #264 (T,wt=10): 428 less(A,succ(succ(succ(B)))) | less(B,succ(A)).  [resolve(293,a,257,a)].

given #265 (T,wt=10): 429 less(A,succ(succ(B))) | less(pred(B),succ(A)).  [resolve(293,a,251,a)].

given #266 (A,wt=16): 218 path_free(A,f3(A,in2),in2,out1) | gate(f3(A,in2)) != out1 | safe(A,in2).  [resolve(151,b,80,b)].

given #267 (T,wt=10): 438 less(A,B) | less(pred(pred(pred(B))),succ(A)).  [resolve(298,a,262,a)].

given #268 (T,wt=10): 439 less(A,B) | less(pred(B),succ(succ(succ(A)))).  [resolve(298,a,256,a)].

given #269 (T,wt=10): 445 less(pred(A),succ(B)) | less(pred(pred(B)),A).  [resolve(298,b,262,a)].

given #270 (T,wt=10): 446 less(pred(A),succ(succ(B))) | less(pred(B),A).  [resolve(298,b,251,a)].

given #271 (A,wt=16): 219 path_free(A,f2(A,in2),in2,out1) | gate(f2(A,in2)) != out1 | safe(A,in2).  [resolve(151,b,79,b)].

given #272 (T,wt=10): 464 less(pred(A),B) | less(pred(pred(pred(B))),A).  [resolve(319,a,262,a)].

given #273 (T,wt=10): 470 less(pred(pred(pred(A))),pred(B)) | less(B,A).  [resolve(320,a,261,a)].

given #274 (T,wt=10): 486 less(pred(pred(pred(pred(A)))),succ(succ(succ(A)))).  [resolve(321,a,262,a)].

given #275 (T,wt=10): 487 less(pred(pred(A)),succ(succ(succ(succ(succ(A)))))).  [resolve(321,a,256,a)].

given #276 (A,wt=16): 220 path_free(A,f3(A,in1),in1,out2) | gate(f3(A,in1)) != out2 | safe(A,in1).  [resolve(159,b,80,b)].

given #277 (T,wt=10): 493 less(pred(pred(pred(A))),succ(succ(succ(succ(A))))).  [resolve(323,a,262,a)].

given #278 (T,wt=10): 494 less(pred(A),succ(succ(succ(succ(succ(succ(A))))))).  [resolve(323,a,256,a)].

given #279 (T,wt=10): 500 less(A,succ(succ(succ(succ(succ(succ(succ(A)))))))).  [resolve(329,a,257,a)].

given #280 (T,wt=10): 506 less(pred(pred(pred(pred(pred(A))))),succ(succ(A))).  [resolve(336,a,262,a)].

given #281 (A,wt=16): 221 path_free(A,f2(A,in1),in1,out2) | gate(f2(A,in1)) != out2 | safe(A,in1).  [resolve(159,b,79,b)].

given #282 (T,wt=10): 512 less(pred(pred(pred(pred(pred(pred(A)))))),succ(A)).  [resolve(342,a,262,a)].

given #283 (T,wt=10): 518 less(pred(pred(pred(pred(pred(pred(pred(A))))))),A).  [resolve(348,a,262,a)].

given #284 (T,wt=10): 605 less(pred(pred(c1)),f7(c1,f3(c1,c2),c2)).  [resolve(603,a,262,a)].

given #285 (T,wt=10): 606 less(c1,succ(succ(f7(c1,f3(c1,c2),c2)))).  [resolve(603,a,256,a)].

given #286 (A,wt=16): 222 path_free(A,f3(A,in1),in1,out1) | gate(f3(A,in1)) != out1 | safe(A,in1).  [resolve(167,b,80,b)].

given #287 (T,wt=10): 639 less(pred(pred(c1)),f7(c1,f2(c1,c2),c2)).  [resolve(637,a,262,a)].

given #288 (T,wt=10): 640 less(c1,succ(succ(f7(c1,f2(c1,c2),c2)))).  [resolve(637,a,256,a)].

given #289 (T,wt=10): 787 less(pred(pred(f8(c1,f3(c1,c2),c2))),c1).  [resolve(784,a,262,a)].

given #290 (T,wt=10): 788 less(f8(c1,f3(c1,c2),c2),succ(succ(c1))).  [resolve(784,a,256,a)].

given #291 (A,wt=16): 223 path_free(A,f2(A,in1),in1,out1) | gate(f2(A,in1)) != out1 | safe(A,in1).  [resolve(167,b,79,b)].

given #292 (T,wt=10): 817 less(pred(pred(f8(c1,f2(c1,c2),c2))),c1).  [resolve(814,a,262,a)].

given #293 (T,wt=10): 818 less(f8(c1,f2(c1,c2),c2),succ(succ(c1))).  [resolve(814,a,256,a)].

given #294 (T,wt=10): 863 f3(A,B) = f1(A,B) | safe(A,B).  [resolve(203,a,224,a),merge(c)].

given #295 (T,wt=7): 1917 f3(c1,c2) = f1(c1,c2).  [resolve(863,b,168,a)].

given #296 (A,wt=14): 225 switch(succ(A),B) != C | switch(A,B) = C | safe(A,B).  [resolve(170,c,80,b)].

given #297 (F,wt=7): 2083 f2(c1,c2) != f1(c1,c2).  [para(1917(a,1),81(b,1)),flip(b),unit_del(a,168)].

given #298 (T,wt=6): 2082 at(c1,f1(c1,c2),c2).  [para(1917(a,1),80(b,2)),unit_del(a,168)].

============================== PROOF =================================

% Proof 1 at 0.28 (+ 0.01) seconds.
% Length of proof is 20.
% Level of proof is 7.
% Maximum clause weight is 12.000.
% Given clauses 298.

10 (all T all N (empty(T,N) <-> (all Train -at(T,Train,N)))) # label(node_empty) # label(axiom) # label(non_clause).  [assumption].
11 (all T all N (safe(T,N) <-> (all Train all OtherTrain (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)))) # label(node_safe) # label(axiom) # label(non_clause).  [assumption].
15 (all T all Train all OtherTrain all N (at(T,Train,N) & at(T,OtherTrain,N) -> Train = OtherTrain)) # label(occupied_only_once) # label(axiom) # label(non_clause).  [assumption].
54 (all T all N safe(T,N)) # label(collision_critical) # label(conjecture) # label(non_clause) # label(goal).  [goal].
55 empty(A,B) | at(A,f1(A,B),B) # label(node_empty) # label(axiom).  [clausify(10)].
56 -empty(A,B) | -at(A,C,B) # label(node_empty) # label(axiom).  [clausify(10)].
79 safe(A,B) | at(A,f2(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
80 safe(A,B) | at(A,f3(A,B),B) # label(node_safe) # label(axiom).  [clausify(11)].
81 safe(A,B) | f3(A,B) != f2(A,B) # label(node_safe) # label(axiom).  [clausify(11)].
85 -at(A,B,C) | -at(A,D,C) | D = B # label(occupied_only_once) # label(axiom).  [clausify(15)].
168 -safe(c1,c2) # label(collision_critical) # label(conjecture).  [deny(54)].
169 at(A,f1(A,B),B) | -at(A,C,B).  [resolve(55,a,56,a)].
203 -at(A,B,C) | f3(A,C) = B | safe(A,C).  [resolve(85,a,80,b),flip(b)].
204 -at(A,B,C) | f2(A,C) = B | safe(A,C).  [resolve(85,a,79,b),flip(b)].
224 at(A,f1(A,B),B) | safe(A,B).  [resolve(169,b,80,b)].
863 f3(A,B) = f1(A,B) | safe(A,B).  [resolve(203,a,224,a),merge(c)].
1917 f3(c1,c2) = f1(c1,c2).  [resolve(863,b,168,a)].
2082 at(c1,f1(c1,c2),c2).  [para(1917(a,1),80(b,2)),unit_del(a,168)].
2083 f2(c1,c2) != f1(c1,c2).  [para(1917(a,1),81(b,1)),flip(b),unit_del(a,168)].
2092 $F.  [resolve(2082,a,204,a),unit_del(a,2083),unit_del(b,168)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=298. Generated=9468. Kept=2011. proofs=1.
Usable=288. Sos=1554. Demods=5. Limbo=0, Disabled=286. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=7456. Back_subsumed=5.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=5 (0 lex), Back_demodulated=164. Back_unit_deleted=0.
Demod_attempts=75958. Demod_rewrites=1934.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=255651. Nonunit_bsub_feature_tests=9915.
Megabytes=4.41.
User_CPU=0.28, System_CPU=0.01, Wall_clock=1.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 16078 exit (max_proofs) Sat Jul  8 18:25:35 2017
